// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metrics.proto

package operd

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	pds "github.com/david-gurley/gopen/pds"
	_ "github.com/david-gurley/gopen/pds/meta/pds"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetricsGetRequest struct {
	// Name identifies the name of the statistics table
	// NOTE: supported names are
	// 1.  "MacMetrics",
	// 2.  "MgmtMacMetrics"
	// 3.  "LifMetrics"
	// 4.  "FlowStatsSummary"
	// 5.  "DataPathAssistStats"
	// 6.  "MemoryMetrics"
	// 7.  "PowerMetrics"
	// 8.  "AsicTemperatureMetrics"
	// 9.  "PortTemperatureMetrics"
	// 10. "RuleMetrics"
	// 11. "BGPPrefixCounterMetrics"
	// 12. "BGPPeerStatusMetrics"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" meta:mandatory`
	// Key identifies particular instance of the statistics table (e.g. uuid)
	Key                  []byte   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty" meta:mandatory`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsGetRequest) Reset()         { *m = MetricsGetRequest{} }
func (m *MetricsGetRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsGetRequest) ProtoMessage()    {}
func (*MetricsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}
func (m *MetricsGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsGetRequest.Merge(m, src)
}
func (m *MetricsGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MetricsGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsGetRequest proto.InternalMessageInfo

func (m *MetricsGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsGetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// CounterStatus defines each individual counter that consists of
// name and value
type CounterStatus struct {
	// (user visible) name of the metric
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// value of the counter
	Value                uint64   `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CounterStatus) Reset()         { *m = CounterStatus{} }
func (m *CounterStatus) String() string { return proto.CompactTextString(m) }
func (*CounterStatus) ProtoMessage()    {}
func (*CounterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{1}
}
func (m *CounterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CounterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CounterStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CounterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CounterStatus.Merge(m, src)
}
func (m *CounterStatus) XXX_Size() int {
	return m.Size()
}
func (m *CounterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CounterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CounterStatus proto.InternalMessageInfo

func (m *CounterStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CounterStatus) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CountersStatus defines generic metrics object that can be used for any set
// of counters per object (e.g., port counters, lif/pf counters, vpp counters,
// s/w counters etc.)
type CountersStatus struct {
	// collection of metrics
	Counters             []*CounterStatus `protobuf:"bytes,1,rep,name=Counters,proto3" json:"Counters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CountersStatus) Reset()         { *m = CountersStatus{} }
func (m *CountersStatus) String() string { return proto.CompactTextString(m) }
func (*CountersStatus) ProtoMessage()    {}
func (*CountersStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{2}
}
func (m *CountersStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountersStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountersStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountersStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountersStatus.Merge(m, src)
}
func (m *CountersStatus) XXX_Size() int {
	return m.Size()
}
func (m *CountersStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CountersStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CountersStatus proto.InternalMessageInfo

func (m *CountersStatus) GetCounters() []*CounterStatus {
	if m != nil {
		return m.Counters
	}
	return nil
}

type MetricsGetResponse struct {
	// ApiStatus indicates the success/failure status of the get operation
	ApiStatus pds.ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response containing potentially mutiple counter objects
	Response             []*CountersStatus `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetricsGetResponse) Reset()         { *m = MetricsGetResponse{} }
func (m *MetricsGetResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsGetResponse) ProtoMessage()    {}
func (*MetricsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{3}
}
func (m *MetricsGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsGetResponse.Merge(m, src)
}
func (m *MetricsGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MetricsGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsGetResponse proto.InternalMessageInfo

func (m *MetricsGetResponse) GetApiStatus() pds.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return pds.ApiStatus_API_STATUS_OK
}

func (m *MetricsGetResponse) GetResponse() []*CountersStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsGetRequest)(nil), "operd.MetricsGetRequest")
	proto.RegisterType((*CounterStatus)(nil), "operd.CounterStatus")
	proto.RegisterType((*CountersStatus)(nil), "operd.CountersStatus")
	proto.RegisterType((*MetricsGetResponse)(nil), "operd.MetricsGetResponse")
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_6039342a2ba47b72) }

var fileDescriptor_6039342a2ba47b72 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x76, 0xfb, 0x23, 0xed, 0xf4, 0x47, 0x1d, 0xaa, 0xc4, 0x1e, 0x6a, 0x09, 0x22, 0x39, 0xc5,
	0x5a, 0x4f, 0x7a, 0xb3, 0x1e, 0x7a, 0x10, 0x2b, 0xa4, 0xe0, 0x7d, 0x6d, 0x87, 0x52, 0x30, 0xd9,
	0x98, 0x9d, 0x28, 0x7d, 0x21, 0x9f, 0xc5, 0xa3, 0x4f, 0x20, 0xd2, 0x47, 0xf0, 0x09, 0xa4, 0xc9,
	0xa6, 0x3f, 0xd8, 0x93, 0x97, 0xc0, 0x7c, 0xbf, 0x99, 0x61, 0xa1, 0xe6, 0x13, 0x47, 0xd3, 0x91,
	0x76, 0xc3, 0x48, 0xb1, 0xc2, 0xa2, 0x0a, 0x29, 0x1a, 0x37, 0x61, 0xa2, 0x26, 0x2a, 0x85, 0x9a,
	0x7b, 0x3e, 0xb1, 0x3c, 0x5f, 0x7c, 0x0c, 0x50, 0xe1, 0x59, 0x48, 0xc6, 0x60, 0x4b, 0x38, 0xb8,
	0x4f, 0x13, 0xfa, 0xc4, 0x1e, 0xbd, 0xc4, 0xa4, 0x19, 0xcf, 0xa0, 0x30, 0x90, 0x3e, 0x59, 0xa2,
	0x2d, 0x9c, 0x72, 0x0f, 0x7f, 0xbe, 0x4e, 0xea, 0x0b, 0xff, 0xb5, 0x2f, 0x83, 0xb1, 0x64, 0x15,
	0xcd, 0xbc, 0x84, 0xc7, 0x53, 0xc8, 0xdf, 0xd1, 0xcc, 0xca, 0xb5, 0x85, 0x53, 0xdd, 0x2a, 0x5b,
	0xd0, 0xf6, 0x15, 0xd4, 0x6e, 0x55, 0x1c, 0x30, 0x45, 0x43, 0x96, 0x1c, 0x6b, 0xc4, 0xf5, 0x78,
	0x13, 0xd5, 0x80, 0xe2, 0xa3, 0x7c, 0x8e, 0x29, 0x09, 0x2b, 0x78, 0xe9, 0x60, 0xf7, 0xa0, 0x6e,
	0xac, 0xda, 0x78, 0x3b, 0x50, 0xca, 0x10, 0x4b, 0xb4, 0xf3, 0x4e, 0xa5, 0xdb, 0x70, 0x93, 0x9d,
	0xdd, 0x8d, 0x0e, 0x6f, 0xa9, 0xb2, 0xdf, 0x00, 0xd7, 0x37, 0xd4, 0xa1, 0x0a, 0x34, 0xa1, 0x0b,
	0xe5, 0x9b, 0x70, 0x9a, 0x8a, 0x93, 0x1f, 0xa9, 0x77, 0xf7, 0xdd, 0xf4, 0x30, 0x4b, 0xdc, 0x5b,
	0x49, 0xf0, 0x02, 0x4a, 0x99, 0xd7, 0xca, 0x25, 0xbd, 0x87, 0x9b, 0xbd, 0x3a, 0x2b, 0xce, 0x64,
	0xdd, 0x77, 0x01, 0x60, 0x9a, 0x87, 0xaf, 0x23, 0xec, 0x2f, 0xa7, 0x3e, 0x31, 0x5a, 0xc6, 0xfd,
	0xe7, 0xf8, 0xcd, 0xe3, 0x2d, 0x4c, 0x9a, 0x68, 0xef, 0x38, 0xa2, 0x23, 0xf0, 0x01, 0x8e, 0x56,
	0xdc, 0x40, 0x05, 0x43, 0x8e, 0x48, 0xfa, 0xd3, 0x60, 0xf2, 0xcf, 0xd0, 0x5e, 0xf5, 0x63, 0xde,
	0x12, 0x9f, 0xf3, 0x96, 0xf8, 0x9e, 0xb7, 0xc4, 0xd3, 0x6e, 0xf2, 0x30, 0x2e, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xe2, 0xb0, 0x50, 0x09, 0x5a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsSvcClient is the client API for MetricsSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsSvcClient interface {
	// Metrics exposes the metric counters kept by components
	MetricsGet(ctx context.Context, opts ...grpc.CallOption) (MetricsSvc_MetricsGetClient, error)
	MetricsGetNonStreaming(ctx context.Context, in *MetricsGetRequest, opts ...grpc.CallOption) (*MetricsGetResponse, error)
}

type metricsSvcClient struct {
	cc *grpc.ClientConn
}

func NewMetricsSvcClient(cc *grpc.ClientConn) MetricsSvcClient {
	return &metricsSvcClient{cc}
}

func (c *metricsSvcClient) MetricsGet(ctx context.Context, opts ...grpc.CallOption) (MetricsSvc_MetricsGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricsSvc_serviceDesc.Streams[0], "/operd.MetricsSvc/MetricsGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsSvcMetricsGetClient{stream}
	return x, nil
}

type MetricsSvc_MetricsGetClient interface {
	Send(*MetricsGetRequest) error
	Recv() (*MetricsGetResponse, error)
	grpc.ClientStream
}

type metricsSvcMetricsGetClient struct {
	grpc.ClientStream
}

func (x *metricsSvcMetricsGetClient) Send(m *MetricsGetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsSvcMetricsGetClient) Recv() (*MetricsGetResponse, error) {
	m := new(MetricsGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricsSvcClient) MetricsGetNonStreaming(ctx context.Context, in *MetricsGetRequest, opts ...grpc.CallOption) (*MetricsGetResponse, error) {
	out := new(MetricsGetResponse)
	err := c.cc.Invoke(ctx, "/operd.MetricsSvc/MetricsGetNonStreaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsSvcServer is the server API for MetricsSvc service.
type MetricsSvcServer interface {
	// Metrics exposes the metric counters kept by components
	MetricsGet(MetricsSvc_MetricsGetServer) error
	MetricsGetNonStreaming(context.Context, *MetricsGetRequest) (*MetricsGetResponse, error)
}

// UnimplementedMetricsSvcServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsSvcServer struct {
}

func (*UnimplementedMetricsSvcServer) MetricsGet(srv MetricsSvc_MetricsGetServer) error {
	return status.Errorf(codes.Unimplemented, "method MetricsGet not implemented")
}
func (*UnimplementedMetricsSvcServer) MetricsGetNonStreaming(ctx context.Context, req *MetricsGetRequest) (*MetricsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsGetNonStreaming not implemented")
}

func RegisterMetricsSvcServer(s *grpc.Server, srv MetricsSvcServer) {
	s.RegisterService(&_MetricsSvc_serviceDesc, srv)
}

func _MetricsSvc_MetricsGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsSvcServer).MetricsGet(&metricsSvcMetricsGetServer{stream})
}

type MetricsSvc_MetricsGetServer interface {
	Send(*MetricsGetResponse) error
	Recv() (*MetricsGetRequest, error)
	grpc.ServerStream
}

type metricsSvcMetricsGetServer struct {
	grpc.ServerStream
}

func (x *metricsSvcMetricsGetServer) Send(m *MetricsGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsSvcMetricsGetServer) Recv() (*MetricsGetRequest, error) {
	m := new(MetricsGetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricsSvc_MetricsGetNonStreaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsSvcServer).MetricsGetNonStreaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/operd.MetricsSvc/MetricsGetNonStreaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsSvcServer).MetricsGetNonStreaming(ctx, req.(*MetricsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "operd.MetricsSvc",
	HandlerType: (*MetricsSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MetricsGetNonStreaming",
			Handler:    _MetricsSvc_MetricsGetNonStreaming_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MetricsGet",
			Handler:       _MetricsSvc_MetricsGet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metrics.proto",
}

func (m *MetricsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CounterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CounterStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintMetrics(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountersStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountersStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountersStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counters) > 0 {
		for iNdEx := len(m.Counters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetrics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetrics(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintMetrics(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetrics(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetricsGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CounterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovMetrics(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountersStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetricsGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMetrics(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountersStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountersStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountersStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &CounterStatus{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= pds.ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetrics
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CountersStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMetrics
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)
