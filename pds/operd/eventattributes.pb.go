// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventattributes.proto

package operd

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventCategory int32

const (
	EventCategory_NONE EventCategory = 0
	// system related events (service events, system boot/reboot events, etc...)
	EventCategory_SYSTEM EventCategory = 1
	// network related events (linkmgr, bgp, etc...)
	EventCategory_NETWORK EventCategory = 2
	// resource related events (cpu, mem and disk usage)
	EventCategory_RESOURCE EventCategory = 3
	// learning related events (endpoint info)
	EventCategory_LEARN EventCategory = 4
	// upgrade/rollout related events
	EventCategory_ROLLOUT EventCategory = 5
	// system interrupt related events
	EventCategory_INTERRUPT EventCategory = 6
	// ha related events
	EventCategory_HA EventCategory = 7
)

var EventCategory_name = map[int32]string{
	0: "NONE",
	1: "SYSTEM",
	2: "NETWORK",
	3: "RESOURCE",
	4: "LEARN",
	5: "ROLLOUT",
	6: "INTERRUPT",
	7: "HA",
}

var EventCategory_value = map[string]int32{
	"NONE":      0,
	"SYSTEM":    1,
	"NETWORK":   2,
	"RESOURCE":  3,
	"LEARN":     4,
	"ROLLOUT":   5,
	"INTERRUPT": 6,
	"HA":        7,
}

func (x EventCategory) String() string {
	return proto.EnumName(EventCategory_name, int32(x))
}

func (EventCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfcc24566f2423b9, []int{0}
}

// severity level of the event
type EventSeverity int32

const (
	EventSeverity_DEBUG    EventSeverity = 0
	EventSeverity_INFO     EventSeverity = 1
	EventSeverity_WARN     EventSeverity = 2
	EventSeverity_CRITICAL EventSeverity = 3
)

var EventSeverity_name = map[int32]string{
	0: "DEBUG",
	1: "INFO",
	2: "WARN",
	3: "CRITICAL",
}

var EventSeverity_value = map[string]int32{
	"DEBUG":    0,
	"INFO":     1,
	"WARN":     2,
	"CRITICAL": 3,
}

func (x EventSeverity) String() string {
	return proto.EnumName(EventSeverity_name, int32(x))
}

func (EventSeverity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfcc24566f2423b9, []int{1}
}

type EventSource struct {
	// name of the component which generated the event
	Component string `protobuf:"bytes,1,opt,name=Component,proto3" json:"Component,omitempty"`
	// name of the DSC node which generated the event
	NodeName             string   `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSource) Reset()         { *m = EventSource{} }
func (m *EventSource) String() string { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()    {}
func (*EventSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfcc24566f2423b9, []int{0}
}
func (m *EventSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSource.Merge(m, src)
}
func (m *EventSource) XXX_Size() int {
	return m.Size()
}
func (m *EventSource) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSource.DiscardUnknown(m)
}

var xxx_messageInfo_EventSource proto.InternalMessageInfo

func (m *EventSource) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *EventSource) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func init() {
	proto.RegisterEnum("operd.EventCategory", EventCategory_name, EventCategory_value)
	proto.RegisterEnum("operd.EventSeverity", EventSeverity_name, EventSeverity_value)
	proto.RegisterType((*EventSource)(nil), "operd.EventSource")
}

func init() { proto.RegisterFile("eventattributes.proto", fileDescriptor_dfcc24566f2423b9) }

var fileDescriptor_dfcc24566f2423b9 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0xbb, 0xfd, 0x93, 0x26, 0xd3, 0x16, 0x96, 0x05, 0xa1, 0x88, 0x04, 0xf1, 0x24, 0x3d,
	0x78, 0xf1, 0xea, 0x25, 0x8d, 0x6b, 0x0d, 0xc6, 0x5d, 0xd9, 0x6c, 0x28, 0x1e, 0x53, 0x3b, 0x48,
	0x0f, 0xcd, 0x86, 0x75, 0x5b, 0xe8, 0x1b, 0x7a, 0xf4, 0x11, 0x24, 0x4f, 0x22, 0x1b, 0x44, 0x6f,
	0x33, 0xf3, 0x9b, 0xf9, 0x3e, 0x18, 0x38, 0xc3, 0x23, 0xd6, 0xae, 0x72, 0xce, 0xee, 0x36, 0x07,
	0x87, 0x1f, 0x37, 0x8d, 0x35, 0xce, 0xb0, 0x91, 0x69, 0xd0, 0x6e, 0xaf, 0x56, 0x30, 0xe1, 0x3e,
	0x2f, 0xcc, 0xc1, 0xbe, 0x21, 0xbb, 0x80, 0x28, 0x35, 0xfb, 0xc6, 0xd4, 0x58, 0xbb, 0x39, 0xb9,
	0x24, 0xd7, 0x91, 0xfa, 0x1f, 0xb0, 0x73, 0x08, 0x85, 0xd9, 0xa2, 0xa8, 0xf6, 0x38, 0xef, 0x77,
	0xe1, 0x5f, 0xbf, 0x30, 0x30, 0xeb, 0x40, 0x69, 0xe5, 0xf0, 0xdd, 0xd8, 0x13, 0x0b, 0x61, 0x28,
	0xa4, 0xe0, 0xb4, 0xc7, 0x00, 0x82, 0xe2, 0xb5, 0xd0, 0xfc, 0x99, 0x12, 0x36, 0x81, 0xb1, 0xe0,
	0x7a, 0x2d, 0xd5, 0x13, 0xed, 0xb3, 0x29, 0x84, 0x8a, 0x17, 0xb2, 0x54, 0x29, 0xa7, 0x03, 0x16,
	0xc1, 0x28, 0xe7, 0x89, 0x12, 0x74, 0xe8, 0xb7, 0x94, 0xcc, 0x73, 0x59, 0x6a, 0x3a, 0x62, 0x33,
	0x88, 0x32, 0xa1, 0xb9, 0x52, 0xe5, 0x8b, 0xa6, 0x01, 0x0b, 0xa0, 0xff, 0x98, 0xd0, 0xf1, 0xe2,
	0xee, 0x57, 0x58, 0xe0, 0x11, 0xed, 0xce, 0x9d, 0xfc, 0xfd, 0x3d, 0x5f, 0x96, 0x2b, 0xda, 0xf3,
	0xee, 0x4c, 0x3c, 0x48, 0x4a, 0x7c, 0xb5, 0xf6, 0xcc, 0x4e, 0x96, 0xaa, 0x4c, 0x67, 0x69, 0x92,
	0xd3, 0xc1, 0x72, 0xfa, 0xd9, 0xc6, 0xe4, 0xab, 0x8d, 0xc9, 0x77, 0x1b, 0x93, 0x4d, 0xd0, 0xfd,
	0xe4, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x8d, 0xbb, 0x4e, 0x2c, 0x01, 0x00, 0x00,
}

func (m *EventSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NodeName) > 0 {
		i -= len(m.NodeName)
		copy(dAtA[i:], m.NodeName)
		i = encodeVarintEventattributes(dAtA, i, uint64(len(m.NodeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Component) > 0 {
		i -= len(m.Component)
		copy(dAtA[i:], m.Component)
		i = encodeVarintEventattributes(dAtA, i, uint64(len(m.Component)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEventattributes(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventattributes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Component)
	if l > 0 {
		n += 1 + l + sovEventattributes(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEventattributes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEventattributes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventattributes(x uint64) (n int) {
	return sovEventattributes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventattributes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventattributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventattributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventattributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventattributes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventattributes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventattributes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventattributes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventattributes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventattributes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventattributes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventattributes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventattributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventattributes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventattributes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEventattributes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEventattributes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEventattributes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEventattributes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEventattributes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventattributes   = fmt.Errorf("proto: integer overflow")
)
