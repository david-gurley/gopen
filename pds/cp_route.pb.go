// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cp_route.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// control plane route table
type CPRouteStatus struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr,proto3" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr,proto3" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// type of route
	Type RouteType `protobuf:"varint,6,opt,name=Type,proto3,enum=types.RouteType" json:"Type,omitempty"`
	// protocol via which the route is learned
	Proto RouteProtocol `protobuf:"varint,7,opt,name=Proto,proto3,enum=types.RouteProtocol" json:"Proto,omitempty"`
	// The number of seconds since this route was last updated or otherwise determined to be correct.
	Age int32 `protobuf:"varint,8,opt,name=Age,proto3" json:"Age,omitempty"`
	// The primary routing metric for this route
	Metric1 int32 `protobuf:"varint,9,opt,name=Metric1,proto3" json:"Metric1,omitempty"`
	// Is this route programmed either to a forwarding table, or to a partner that queries route information
	FibRoute bool `protobuf:"varint,10,opt,name=FibRoute,proto3" json:"FibRoute,omitempty"`
	// Indicates whether the route destination is directly connected
	Connected bool `protobuf:"varint,11,opt,name=Connected,proto3" json:"Connected,omitempty"`
	// whether DC-RTM considers that the next-hop address for this route is a loose next hop.
	LooseNextHop bool `protobuf:"varint,12,opt,name=LooseNextHop,proto3" json:"LooseNextHop,omitempty"`
	// Administrative distance for this route
	AdminDistance        int32    `protobuf:"varint,13,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPRouteStatus) Reset()         { *m = CPRouteStatus{} }
func (m *CPRouteStatus) String() string { return proto.CompactTextString(m) }
func (*CPRouteStatus) ProtoMessage()    {}
func (*CPRouteStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{0}
}
func (m *CPRouteStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteStatus.Merge(m, src)
}
func (m *CPRouteStatus) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteStatus proto.InternalMessageInfo

func (m *CPRouteStatus) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPRouteStatus) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPRouteStatus) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPRouteStatus) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPRouteStatus) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPRouteStatus) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_ROUTE_TYPE_NONE
}

func (m *CPRouteStatus) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

func (m *CPRouteStatus) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *CPRouteStatus) GetMetric1() int32 {
	if m != nil {
		return m.Metric1
	}
	return 0
}

func (m *CPRouteStatus) GetFibRoute() bool {
	if m != nil {
		return m.FibRoute
	}
	return false
}

func (m *CPRouteStatus) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *CPRouteStatus) GetLooseNextHop() bool {
	if m != nil {
		return m.LooseNextHop
	}
	return false
}

func (m *CPRouteStatus) GetAdminDistance() int32 {
	if m != nil {
		return m.AdminDistance
	}
	return 0
}

type CPRouteKey struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr,proto3" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr,proto3" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// protocol via which the route is learned
	Proto                RouteProtocol `protobuf:"varint,6,opt,name=Proto,proto3,enum=types.RouteProtocol" json:"Proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CPRouteKey) Reset()         { *m = CPRouteKey{} }
func (m *CPRouteKey) String() string { return proto.CompactTextString(m) }
func (*CPRouteKey) ProtoMessage()    {}
func (*CPRouteKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{1}
}
func (m *CPRouteKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteKey.Merge(m, src)
}
func (m *CPRouteKey) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteKey.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteKey proto.InternalMessageInfo

func (m *CPRouteKey) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPRouteKey) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPRouteKey) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPRouteKey) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPRouteKey) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPRouteKey) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

type CPRouteKeyHandle struct {
	Key                  *CPRouteKey `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CPRouteKeyHandle) Reset()         { *m = CPRouteKeyHandle{} }
func (m *CPRouteKeyHandle) String() string { return proto.CompactTextString(m) }
func (*CPRouteKeyHandle) ProtoMessage()    {}
func (*CPRouteKeyHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{2}
}
func (m *CPRouteKeyHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteKeyHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteKeyHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteKeyHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteKeyHandle.Merge(m, src)
}
func (m *CPRouteKeyHandle) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteKeyHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteKeyHandle.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteKeyHandle proto.InternalMessageInfo

func (m *CPRouteKeyHandle) GetKey() *CPRouteKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// control plane route table get request
type CPRouteGetRequest struct {
	Request              []*CPRouteKeyHandle `protobuf:"bytes,1,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CPRouteGetRequest) Reset()         { *m = CPRouteGetRequest{} }
func (m *CPRouteGetRequest) String() string { return proto.CompactTextString(m) }
func (*CPRouteGetRequest) ProtoMessage()    {}
func (*CPRouteGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{3}
}
func (m *CPRouteGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteGetRequest.Merge(m, src)
}
func (m *CPRouteGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteGetRequest proto.InternalMessageInfo

func (m *CPRouteGetRequest) GetRequest() []*CPRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

type CPRoute struct {
	Status               *CPRouteStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CPRoute) Reset()         { *m = CPRoute{} }
func (m *CPRoute) String() string { return proto.CompactTextString(m) }
func (*CPRoute) ProtoMessage()    {}
func (*CPRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{4}
}
func (m *CPRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRoute.Merge(m, src)
}
func (m *CPRoute) XXX_Size() int {
	return m.Size()
}
func (m *CPRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRoute.DiscardUnknown(m)
}

var xxx_messageInfo_CPRoute proto.InternalMessageInfo

func (m *CPRoute) GetStatus() *CPRouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CPRouteGetResponse struct {
	ApiStatus            ApiStatus  `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*CPRoute `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CPRouteGetResponse) Reset()         { *m = CPRouteGetResponse{} }
func (m *CPRouteGetResponse) String() string { return proto.CompactTextString(m) }
func (*CPRouteGetResponse) ProtoMessage()    {}
func (*CPRouteGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{5}
}
func (m *CPRouteGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteGetResponse.Merge(m, src)
}
func (m *CPRouteGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteGetResponse proto.InternalMessageInfo

func (m *CPRouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPRouteGetResponse) GetResponse() []*CPRoute {
	if m != nil {
		return m.Response
	}
	return nil
}

// control plane static route configuration
type CPStaticRouteSpec struct {
	// route table id this route belongs to
	RouteTableId []byte `protobuf:"bytes,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr,proto3" json:"DestAddr,omitempty" meta:mandatory,immutable`
	// destination address prefix length
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty" meta:mandatory,immutable`
	// next-hop address
	NextHopAddr *IPAddress `protobuf:"bytes,4,opt,name=NextHopAddr,proto3" json:"NextHopAddr,omitempty" meta:mandatory,immutable`
	// route is enabled or not
	State AdminState `protobuf:"varint,5,opt,name=State,proto3,enum=types.AdminState" json:"State,omitempty"`
	// override admin distance
	Override bool `protobuf:"varint,6,opt,name=Override,proto3" json:"Override,omitempty"`
	// admin distance
	AdminDist uint32 `protobuf:"varint,7,opt,name=AdminDist,proto3" json:"AdminDist,omitempty"`
	// optional interface ID, if this route is configured on RR
	InterfaceId          []byte   `protobuf:"bytes,8,opt,name=InterfaceId,proto3" json:"InterfaceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPStaticRouteSpec) Reset()         { *m = CPStaticRouteSpec{} }
func (m *CPStaticRouteSpec) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteSpec) ProtoMessage()    {}
func (*CPStaticRouteSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{6}
}
func (m *CPStaticRouteSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteSpec.Merge(m, src)
}
func (m *CPStaticRouteSpec) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteSpec proto.InternalMessageInfo

func (m *CPStaticRouteSpec) GetRouteTableId() []byte {
	if m != nil {
		return m.RouteTableId
	}
	return nil
}

func (m *CPStaticRouteSpec) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CPStaticRouteSpec) GetNextHopAddr() *IPAddress {
	if m != nil {
		return m.NextHopAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetState() AdminState {
	if m != nil {
		return m.State
	}
	return AdminState_ADMIN_STATE_NONE
}

func (m *CPStaticRouteSpec) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *CPStaticRouteSpec) GetAdminDist() uint32 {
	if m != nil {
		return m.AdminDist
	}
	return 0
}

func (m *CPStaticRouteSpec) GetInterfaceId() []byte {
	if m != nil {
		return m.InterfaceId
	}
	return nil
}

// control plane static route create and update request message
type CPStaticRouteRequest struct {
	Request              []*CPStaticRouteSpec `protobuf:"bytes,1,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CPStaticRouteRequest) Reset()         { *m = CPStaticRouteRequest{} }
func (m *CPStaticRouteRequest) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteRequest) ProtoMessage()    {}
func (*CPStaticRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{7}
}
func (m *CPStaticRouteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteRequest.Merge(m, src)
}
func (m *CPStaticRouteRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteRequest proto.InternalMessageInfo

func (m *CPStaticRouteRequest) GetRequest() []*CPStaticRouteSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// status of control plane static route, if any
type CPStaticRouteStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPStaticRouteStatus) Reset()         { *m = CPStaticRouteStatus{} }
func (m *CPStaticRouteStatus) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteStatus) ProtoMessage()    {}
func (*CPStaticRouteStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{8}
}
func (m *CPStaticRouteStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteStatus.Merge(m, src)
}
func (m *CPStaticRouteStatus) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteStatus proto.InternalMessageInfo

// control plane static route object
type CPStaticRoute struct {
	Spec                 *CPStaticRouteSpec   `protobuf:"bytes,1,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status               *CPStaticRouteStatus `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CPStaticRoute) Reset()         { *m = CPStaticRoute{} }
func (m *CPStaticRoute) String() string { return proto.CompactTextString(m) }
func (*CPStaticRoute) ProtoMessage()    {}
func (*CPStaticRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{9}
}
func (m *CPStaticRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRoute.Merge(m, src)
}
func (m *CPStaticRoute) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRoute.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRoute proto.InternalMessageInfo

func (m *CPStaticRoute) GetSpec() *CPStaticRouteSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CPStaticRoute) GetStatus() *CPStaticRouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// response messages
type CPStaticRouteResponse struct {
	ApiStatus            ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CPStaticRouteResponse) Reset()         { *m = CPStaticRouteResponse{} }
func (m *CPStaticRouteResponse) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteResponse) ProtoMessage()    {}
func (*CPStaticRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{10}
}
func (m *CPStaticRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteResponse.Merge(m, src)
}
func (m *CPStaticRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteResponse proto.InternalMessageInfo

func (m *CPStaticRouteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// control plane static route key parameters
type CPStaticRouteKey struct {
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,1,opt,name=DestAddr,proto3" json:"DestAddr,omitempty"`
	// destination address prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// next-hop address
	NextHopAddr          *IPAddress `protobuf:"bytes,3,opt,name=NextHopAddr,proto3" json:"NextHopAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CPStaticRouteKey) Reset()         { *m = CPStaticRouteKey{} }
func (m *CPStaticRouteKey) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteKey) ProtoMessage()    {}
func (*CPStaticRouteKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{11}
}
func (m *CPStaticRouteKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteKey.Merge(m, src)
}
func (m *CPStaticRouteKey) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteKey.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteKey proto.InternalMessageInfo

func (m *CPStaticRouteKey) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPStaticRouteKey) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CPStaticRouteKey) GetNextHopAddr() *IPAddress {
	if m != nil {
		return m.NextHopAddr
	}
	return nil
}

// control plane static route key handle
type CPStaticRouteKeyHandle struct {
	//unique identifier or key parameters
	//
	// Types that are valid to be assigned to IdOrKey:
	//	*CPStaticRouteKeyHandle_Id
	//	*CPStaticRouteKeyHandle_Key
	IdOrKey              isCPStaticRouteKeyHandle_IdOrKey `protobuf_oneof:"id_or_key"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CPStaticRouteKeyHandle) Reset()         { *m = CPStaticRouteKeyHandle{} }
func (m *CPStaticRouteKeyHandle) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteKeyHandle) ProtoMessage()    {}
func (*CPStaticRouteKeyHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{12}
}
func (m *CPStaticRouteKeyHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteKeyHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteKeyHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteKeyHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteKeyHandle.Merge(m, src)
}
func (m *CPStaticRouteKeyHandle) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteKeyHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteKeyHandle.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteKeyHandle proto.InternalMessageInfo

type isCPStaticRouteKeyHandle_IdOrKey interface {
	isCPStaticRouteKeyHandle_IdOrKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CPStaticRouteKeyHandle_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3,oneof"`
}
type CPStaticRouteKeyHandle_Key struct {
	Key *CPStaticRouteKey `protobuf:"bytes,2,opt,name=Key,proto3,oneof"`
}

func (*CPStaticRouteKeyHandle_Id) isCPStaticRouteKeyHandle_IdOrKey()  {}
func (*CPStaticRouteKeyHandle_Key) isCPStaticRouteKeyHandle_IdOrKey() {}

func (m *CPStaticRouteKeyHandle) GetIdOrKey() isCPStaticRouteKeyHandle_IdOrKey {
	if m != nil {
		return m.IdOrKey
	}
	return nil
}

func (m *CPStaticRouteKeyHandle) GetId() []byte {
	if x, ok := m.GetIdOrKey().(*CPStaticRouteKeyHandle_Id); ok {
		return x.Id
	}
	return nil
}

func (m *CPStaticRouteKeyHandle) GetKey() *CPStaticRouteKey {
	if x, ok := m.GetIdOrKey().(*CPStaticRouteKeyHandle_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CPStaticRouteKeyHandle) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CPStaticRouteKeyHandle_Id)(nil),
		(*CPStaticRouteKeyHandle_Key)(nil),
	}
}

// control plane route delete request
type CPStaticRouteDeleteRequest struct {
	Request              []*CPStaticRouteKeyHandle `protobuf:"bytes,1,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CPStaticRouteDeleteRequest) Reset()         { *m = CPStaticRouteDeleteRequest{} }
func (m *CPStaticRouteDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteDeleteRequest) ProtoMessage()    {}
func (*CPStaticRouteDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{13}
}
func (m *CPStaticRouteDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteDeleteRequest.Merge(m, src)
}
func (m *CPStaticRouteDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteDeleteRequest proto.InternalMessageInfo

func (m *CPStaticRouteDeleteRequest) GetRequest() []*CPStaticRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

// control plane route delete response
type CPStaticRouteDeleteResponse struct {
	ApiStatus            ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CPStaticRouteDeleteResponse) Reset()         { *m = CPStaticRouteDeleteResponse{} }
func (m *CPStaticRouteDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteDeleteResponse) ProtoMessage()    {}
func (*CPStaticRouteDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{14}
}
func (m *CPStaticRouteDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteDeleteResponse.Merge(m, src)
}
func (m *CPStaticRouteDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteDeleteResponse proto.InternalMessageInfo

func (m *CPStaticRouteDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// control plane route get request
type CPStaticRouteGetRequest struct {
	Request              []*CPStaticRouteKeyHandle `protobuf:"bytes,1,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CPStaticRouteGetRequest) Reset()         { *m = CPStaticRouteGetRequest{} }
func (m *CPStaticRouteGetRequest) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteGetRequest) ProtoMessage()    {}
func (*CPStaticRouteGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{15}
}
func (m *CPStaticRouteGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteGetRequest.Merge(m, src)
}
func (m *CPStaticRouteGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteGetRequest proto.InternalMessageInfo

func (m *CPStaticRouteGetRequest) GetRequest() []*CPStaticRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

// control plane route get response
type CPStaticRouteGetResponse struct {
	ApiStatus            ApiStatus        `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*CPStaticRoute `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CPStaticRouteGetResponse) Reset()         { *m = CPStaticRouteGetResponse{} }
func (m *CPStaticRouteGetResponse) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteGetResponse) ProtoMessage()    {}
func (*CPStaticRouteGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{16}
}
func (m *CPStaticRouteGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPStaticRouteGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPStaticRouteGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPStaticRouteGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPStaticRouteGetResponse.Merge(m, src)
}
func (m *CPStaticRouteGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPStaticRouteGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPStaticRouteGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPStaticRouteGetResponse proto.InternalMessageInfo

func (m *CPStaticRouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPStaticRouteGetResponse) GetResponse() []*CPStaticRoute {
	if m != nil {
		return m.Response
	}
	return nil
}

// control plane route table
type CPRouteRedistStatus struct {
	// The HAF entity index identifying the instance of DC-RTM
	FteIndex uint32 `protobuf:"varint,1,opt,name=FteIndex,proto3" json:"FteIndex,omitempty"`
	// The index of this DC-RTM redistribution table entry
	EntryId uint32 `protobuf:"varint,2,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
	// type of route
	RuleUsageCount uint32 `protobuf:"varint,3,opt,name=RuleUsageCount,proto3" json:"RuleUsageCount,omitempty"`
	// Destination IP address filter
	AddrFilter           *IPAddress `protobuf:"bytes,4,opt,name=AddrFilter,proto3" json:"AddrFilter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CPRouteRedistStatus) Reset()         { *m = CPRouteRedistStatus{} }
func (m *CPRouteRedistStatus) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedistStatus) ProtoMessage()    {}
func (*CPRouteRedistStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{17}
}
func (m *CPRouteRedistStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedistStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedistStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedistStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedistStatus.Merge(m, src)
}
func (m *CPRouteRedistStatus) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedistStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedistStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedistStatus proto.InternalMessageInfo

func (m *CPRouteRedistStatus) GetFteIndex() uint32 {
	if m != nil {
		return m.FteIndex
	}
	return 0
}

func (m *CPRouteRedistStatus) GetEntryId() uint32 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

func (m *CPRouteRedistStatus) GetRuleUsageCount() uint32 {
	if m != nil {
		return m.RuleUsageCount
	}
	return 0
}

func (m *CPRouteRedistStatus) GetAddrFilter() *IPAddress {
	if m != nil {
		return m.AddrFilter
	}
	return nil
}

type CPRouteRedistKey struct {
	// The HAF entity index identifying the instance of DC-RTM
	FteIndex uint32 `protobuf:"varint,1,opt,name=FteIndex,proto3" json:"FteIndex,omitempty"`
	// The index of this DC-RTM redistribution table entry
	EntryId              uint32   `protobuf:"varint,2,opt,name=EntryId,proto3" json:"EntryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPRouteRedistKey) Reset()         { *m = CPRouteRedistKey{} }
func (m *CPRouteRedistKey) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedistKey) ProtoMessage()    {}
func (*CPRouteRedistKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{18}
}
func (m *CPRouteRedistKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedistKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedistKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedistKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedistKey.Merge(m, src)
}
func (m *CPRouteRedistKey) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedistKey) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedistKey.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedistKey proto.InternalMessageInfo

func (m *CPRouteRedistKey) GetFteIndex() uint32 {
	if m != nil {
		return m.FteIndex
	}
	return 0
}

func (m *CPRouteRedistKey) GetEntryId() uint32 {
	if m != nil {
		return m.EntryId
	}
	return 0
}

type CPRouteRedistKeyHandle struct {
	Key                  *CPRouteRedistKey `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CPRouteRedistKeyHandle) Reset()         { *m = CPRouteRedistKeyHandle{} }
func (m *CPRouteRedistKeyHandle) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedistKeyHandle) ProtoMessage()    {}
func (*CPRouteRedistKeyHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{19}
}
func (m *CPRouteRedistKeyHandle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedistKeyHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedistKeyHandle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedistKeyHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedistKeyHandle.Merge(m, src)
}
func (m *CPRouteRedistKeyHandle) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedistKeyHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedistKeyHandle.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedistKeyHandle proto.InternalMessageInfo

func (m *CPRouteRedistKeyHandle) GetKey() *CPRouteRedistKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// control plane route table get request
type CPRouteRedistGetRequest struct {
	Request              []*CPRouteRedistKeyHandle `protobuf:"bytes,1,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CPRouteRedistGetRequest) Reset()         { *m = CPRouteRedistGetRequest{} }
func (m *CPRouteRedistGetRequest) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedistGetRequest) ProtoMessage()    {}
func (*CPRouteRedistGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{20}
}
func (m *CPRouteRedistGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedistGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedistGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedistGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedistGetRequest.Merge(m, src)
}
func (m *CPRouteRedistGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedistGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedistGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedistGetRequest proto.InternalMessageInfo

func (m *CPRouteRedistGetRequest) GetRequest() []*CPRouteRedistKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

type CPRouteRedist struct {
	Status               *CPRouteRedistStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CPRouteRedist) Reset()         { *m = CPRouteRedist{} }
func (m *CPRouteRedist) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedist) ProtoMessage()    {}
func (*CPRouteRedist) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{21}
}
func (m *CPRouteRedist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedist.Merge(m, src)
}
func (m *CPRouteRedist) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedist) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedist.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedist proto.InternalMessageInfo

func (m *CPRouteRedist) GetStatus() *CPRouteRedistStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CPRouteRedistGetResponse struct {
	ApiStatus            ApiStatus        `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*CPRouteRedist `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CPRouteRedistGetResponse) Reset()         { *m = CPRouteRedistGetResponse{} }
func (m *CPRouteRedistGetResponse) String() string { return proto.CompactTextString(m) }
func (*CPRouteRedistGetResponse) ProtoMessage()    {}
func (*CPRouteRedistGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40f9747b4ddd926, []int{22}
}
func (m *CPRouteRedistGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPRouteRedistGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPRouteRedistGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPRouteRedistGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPRouteRedistGetResponse.Merge(m, src)
}
func (m *CPRouteRedistGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CPRouteRedistGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CPRouteRedistGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CPRouteRedistGetResponse proto.InternalMessageInfo

func (m *CPRouteRedistGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPRouteRedistGetResponse) GetResponse() []*CPRouteRedist {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CPRouteStatus)(nil), "pds.CPRouteStatus")
	proto.RegisterType((*CPRouteKey)(nil), "pds.CPRouteKey")
	proto.RegisterType((*CPRouteKeyHandle)(nil), "pds.CPRouteKeyHandle")
	proto.RegisterType((*CPRouteGetRequest)(nil), "pds.CPRouteGetRequest")
	proto.RegisterType((*CPRoute)(nil), "pds.CPRoute")
	proto.RegisterType((*CPRouteGetResponse)(nil), "pds.CPRouteGetResponse")
	proto.RegisterType((*CPStaticRouteSpec)(nil), "pds.CPStaticRouteSpec")
	proto.RegisterType((*CPStaticRouteRequest)(nil), "pds.CPStaticRouteRequest")
	proto.RegisterType((*CPStaticRouteStatus)(nil), "pds.CPStaticRouteStatus")
	proto.RegisterType((*CPStaticRoute)(nil), "pds.CPStaticRoute")
	proto.RegisterType((*CPStaticRouteResponse)(nil), "pds.CPStaticRouteResponse")
	proto.RegisterType((*CPStaticRouteKey)(nil), "pds.CPStaticRouteKey")
	proto.RegisterType((*CPStaticRouteKeyHandle)(nil), "pds.CPStaticRouteKeyHandle")
	proto.RegisterType((*CPStaticRouteDeleteRequest)(nil), "pds.CPStaticRouteDeleteRequest")
	proto.RegisterType((*CPStaticRouteDeleteResponse)(nil), "pds.CPStaticRouteDeleteResponse")
	proto.RegisterType((*CPStaticRouteGetRequest)(nil), "pds.CPStaticRouteGetRequest")
	proto.RegisterType((*CPStaticRouteGetResponse)(nil), "pds.CPStaticRouteGetResponse")
	proto.RegisterType((*CPRouteRedistStatus)(nil), "pds.CPRouteRedistStatus")
	proto.RegisterType((*CPRouteRedistKey)(nil), "pds.CPRouteRedistKey")
	proto.RegisterType((*CPRouteRedistKeyHandle)(nil), "pds.CPRouteRedistKeyHandle")
	proto.RegisterType((*CPRouteRedistGetRequest)(nil), "pds.CPRouteRedistGetRequest")
	proto.RegisterType((*CPRouteRedist)(nil), "pds.CPRouteRedist")
	proto.RegisterType((*CPRouteRedistGetResponse)(nil), "pds.CPRouteRedistGetResponse")
}

func init() { proto.RegisterFile("cp_route.proto", fileDescriptor_a40f9747b4ddd926) }

var fileDescriptor_a40f9747b4ddd926 = []byte{
	// 1060 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x8d, 0x63, 0x1f, 0xdb, 0x69, 0x3a, 0x34, 0xe9, 0xe2, 0x86, 0xd4, 0xac, 0x2a,
	0x6a, 0xa2, 0xca, 0x0d, 0x46, 0xb9, 0xe9, 0x0d, 0x72, 0x12, 0x1a, 0x9b, 0xb6, 0xc1, 0x4c, 0xda,
	0x1b, 0x6e, 0x22, 0xc7, 0x7b, 0x12, 0xad, 0xb0, 0x77, 0x97, 0xdd, 0x71, 0x15, 0xf3, 0x18, 0x5c,
	0xf0, 0x06, 0xbc, 0x0b, 0x37, 0x48, 0x3c, 0x01, 0x42, 0x79, 0x01, 0x24, 0xc4, 0x03, 0xa0, 0xf9,
	0xf1, 0xec, 0xec, 0xda, 0xc6, 0xc8, 0x70, 0xc3, 0x4d, 0xb4, 0x73, 0xce, 0x99, 0x6f, 0xce, 0xcc,
	0xf9, 0xce, 0x77, 0x1c, 0xd8, 0x1c, 0x84, 0x17, 0x51, 0x30, 0x66, 0xd8, 0x0c, 0xa3, 0x80, 0x05,
	0x24, 0x1f, 0xba, 0x71, 0x0d, 0xae, 0x83, 0xeb, 0x40, 0x1a, 0x6a, 0x77, 0x47, 0xc8, 0xfa, 0xcf,
	0xf8, 0x1f, 0x65, 0x28, 0xb3, 0x49, 0x88, 0xb1, 0x5c, 0x38, 0x3f, 0xe7, 0xa1, 0x7a, 0xdc, 0xa3,
	0x1c, 0xe0, 0x9c, 0xf5, 0xd9, 0x38, 0x26, 0x0e, 0x54, 0xc4, 0xf2, 0x4d, 0xff, 0x72, 0x88, 0x5d,
	0xd7, 0xb6, 0xea, 0x56, 0xa3, 0x4a, 0x53, 0x36, 0xf2, 0x14, 0x8a, 0x27, 0x18, 0xb3, 0xb6, 0xeb,
	0x46, 0x76, 0xae, 0x6e, 0x35, 0xca, 0xad, 0xad, 0xa6, 0x44, 0xed, 0xf6, 0xb8, 0x11, 0xe3, 0x98,
	0xea, 0x08, 0xf2, 0x18, 0xaa, 0xfc, 0xbb, 0x17, 0xe1, 0x95, 0x77, 0xf3, 0x0a, 0x7d, 0x3b, 0x2f,
	0x20, 0xd3, 0x46, 0xd2, 0x80, 0xc2, 0x59, 0x47, 0x20, 0xde, 0x59, 0x80, 0xa8, 0xfc, 0xc4, 0x86,
	0x8d, 0xee, 0x55, 0xd7, 0x77, 0xf1, 0xc6, 0x5e, 0x17, 0x48, 0xd3, 0x25, 0x79, 0x0c, 0x77, 0xde,
	0x4c, 0x42, 0xb4, 0x0b, 0x75, 0xab, 0xb1, 0xa9, 0x11, 0x64, 0xea, 0x93, 0x10, 0xa9, 0xf0, 0x92,
	0x7d, 0x58, 0xef, 0xf1, 0xcb, 0xdb, 0x1b, 0x22, 0xec, 0xbe, 0x19, 0x26, 0x1c, 0x83, 0x60, 0x48,
	0x65, 0x08, 0xd9, 0x82, 0x7c, 0xfb, 0x1a, 0xed, 0x62, 0xdd, 0x6a, 0xac, 0x53, 0xfe, 0xc9, 0x4f,
	0x7f, 0x8d, 0x2c, 0xf2, 0x06, 0x9f, 0xd8, 0x25, 0x61, 0x9d, 0x2e, 0x49, 0x0d, 0x8a, 0x2f, 0xbc,
	0x4b, 0x01, 0x63, 0x43, 0xdd, 0x6a, 0x14, 0xa9, 0x5e, 0x93, 0x5d, 0x28, 0x1d, 0x07, 0xbe, 0x8f,
	0x03, 0x86, 0xae, 0x5d, 0x16, 0xce, 0xc4, 0xc0, 0xdf, 0xfc, 0x55, 0x10, 0xc4, 0x78, 0x86, 0x37,
	0xac, 0x13, 0x84, 0x76, 0x45, 0x04, 0xa4, 0x6c, 0xfc, 0x15, 0xdb, 0xee, 0xc8, 0xf3, 0x4f, 0xbc,
	0x98, 0xf5, 0xfd, 0x01, 0xda, 0x55, 0x71, 0x7a, 0xda, 0xe8, 0xfc, 0x69, 0x01, 0xa8, 0x7a, 0xbe,
	0xc4, 0xc9, 0xff, 0xba, 0x98, 0xba, 0x4c, 0x85, 0xa5, 0x65, 0x72, 0x0e, 0x61, 0x2b, 0xb9, 0x75,
	0xa7, 0xef, 0xbb, 0x43, 0x24, 0x1f, 0x42, 0xfe, 0x25, 0x4e, 0xc4, 0x95, 0xcb, 0xad, 0xbb, 0xcd,
	0xd0, 0x8d, 0x9b, 0x49, 0x0c, 0xe5, 0x3e, 0xe7, 0x04, 0xee, 0x29, 0xd3, 0x29, 0x32, 0x8a, 0xdf,
	0x8e, 0x31, 0x66, 0xe4, 0x19, 0x6c, 0xa8, 0x4f, 0xdb, 0xaa, 0xe7, 0x1b, 0xe5, 0xd6, 0x76, 0x66,
	0xaf, 0xc4, 0xa7, 0xd3, 0x28, 0xe7, 0x10, 0x36, 0x94, 0x93, 0xec, 0x43, 0x41, 0xb6, 0x91, 0x3a,
	0x96, 0x98, 0x5b, 0xa5, 0x87, 0xaa, 0x08, 0xc7, 0x07, 0x62, 0x1e, 0x1e, 0x87, 0x81, 0x1f, 0x23,
	0x69, 0x42, 0xa9, 0x1d, 0x7a, 0x06, 0x48, 0xc2, 0x63, 0x6d, 0xa7, 0x49, 0x08, 0x69, 0x40, 0x71,
	0xba, 0xd7, 0xce, 0x89, 0x74, 0x2b, 0xe6, 0x99, 0x54, 0x7b, 0x9d, 0x1f, 0xf2, 0xfc, 0xb6, 0x7c,
	0x9b, 0x37, 0x90, 0xf9, 0x84, 0x38, 0x98, 0xcb, 0x90, 0x4a, 0x86, 0x21, 0x5f, 0x2c, 0x67, 0xc8,
	0xd1, 0xee, 0x1f, 0xbf, 0x3e, 0xb2, 0xb9, 0xca, 0x3c, 0x1f, 0xf5, 0x7d, 0xb7, 0xcf, 0x82, 0x68,
	0xf2, 0xd4, 0x1b, 0x8d, 0xc6, 0x8c, 0x63, 0x18, 0xfc, 0x79, 0x0e, 0xa5, 0x0c, 0x77, 0x96, 0x6c,
	0x4d, 0xc2, 0x49, 0x0f, 0xca, 0xaa, 0x1b, 0xfe, 0x8e, 0x5a, 0x4b, 0xf0, 0x4c, 0x08, 0xf2, 0x04,
	0xd6, 0xf9, 0x83, 0xa0, 0xe0, 0xde, 0x66, 0xeb, 0xde, 0xf4, 0xa5, 0x79, 0x4f, 0x09, 0x07, 0x95,
	0x7e, 0xde, 0xdb, 0x5f, 0xbe, 0xc3, 0x28, 0xf2, 0x5c, 0xa9, 0x2e, 0x45, 0xaa, 0xd7, 0xbc, 0xb7,
	0x75, 0x13, 0x0a, 0x4d, 0xa9, 0xd2, 0xc4, 0x40, 0xea, 0x50, 0xee, 0xfa, 0x0c, 0xa3, 0xab, 0xfe,
	0x80, 0xbf, 0x6f, 0x51, 0xbc, 0xaf, 0x69, 0x72, 0x3a, 0x70, 0x3f, 0x55, 0x97, 0x29, 0x11, 0x0f,
	0xb2, 0x44, 0xdc, 0x51, 0x95, 0xcd, 0xd4, 0x30, 0x61, 0xe2, 0x36, 0xbc, 0x97, 0xf6, 0x4a, 0xa6,
	0x8d, 0xb8, 0xc6, 0x1b, 0x66, 0xb2, 0x0f, 0x77, 0xf8, 0x46, 0x45, 0xd2, 0x45, 0xb0, 0x22, 0x86,
	0x1c, 0x68, 0x4a, 0xcb, 0xd2, 0xdb, 0x73, 0xa2, 0xd3, 0xc4, 0x3e, 0x85, 0xed, 0xcc, 0x7d, 0x56,
	0xe3, 0xb6, 0xf3, 0xbd, 0xc5, 0xdb, 0xda, 0x40, 0xe2, 0x92, 0x66, 0xca, 0x95, 0xb5, 0x54, 0xae,
	0x76, 0x4d, 0xba, 0xe5, 0x64, 0x6d, 0x12, 0x42, 0xb5, 0xd2, 0x84, 0xca, 0x2f, 0x80, 0x33, 0x83,
	0x9c, 0x4b, 0xd8, 0xc9, 0xe6, 0xa4, 0x04, 0x67, 0x0b, 0x72, 0xd3, 0x06, 0xea, 0xac, 0xd1, 0x5c,
	0xd7, 0x25, 0x1f, 0x4b, 0x09, 0x92, 0x0f, 0xb7, 0x3d, 0xfb, 0x70, 0x7c, 0xef, 0x9a, 0x90, 0xa2,
	0xa3, 0x32, 0x94, 0x3c, 0xf7, 0x22, 0x88, 0x2e, 0xbe, 0xc1, 0x89, 0x73, 0x0e, 0xb5, 0x54, 0xdc,
	0x09, 0x0e, 0x31, 0xe1, 0xc5, 0x61, 0x96, 0x17, 0x0f, 0xe7, 0x23, 0x67, 0x64, 0xea, 0x35, 0x3c,
	0x9c, 0x0b, 0xba, 0x62, 0x71, 0x7a, 0xf0, 0x20, 0x05, 0x67, 0x28, 0xe8, 0x8a, 0x09, 0x7e, 0x07,
	0xf6, 0x2c, 0xe2, 0x8a, 0xb2, 0xd8, 0x9c, 0x91, 0x45, 0x32, 0x9b, 0x83, 0x21, 0x8e, 0x3f, 0x5a,
	0xbc, 0x75, 0x14, 0x5d, 0x5d, 0x2f, 0x66, 0x0a, 0x87, 0xcf, 0x74, 0x86, 0x72, 0x3e, 0xc9, 0xe1,
	0xa9, 0xd7, 0x7c, 0x74, 0x7d, 0xee, 0xb3, 0x68, 0xd2, 0x75, 0x15, 0xb3, 0xa6, 0x4b, 0xf2, 0x11,
	0x6c, 0xd2, 0xf1, 0x10, 0xdf, 0xc6, 0xfd, 0x6b, 0x3c, 0x0e, 0xc6, 0x3e, 0x53, 0x53, 0x32, 0x63,
	0x25, 0x07, 0x00, 0x9c, 0x53, 0x2f, 0xbc, 0x21, 0xc3, 0xc5, 0xa3, 0xd2, 0x88, 0x71, 0x3a, 0x7a,
	0xd0, 0xc9, 0x34, 0x79, 0x47, 0xac, 0x94, 0xa3, 0xd3, 0xe6, 0x3c, 0x4e, 0x23, 0x29, 0x1e, 0x3f,
	0x31, 0x07, 0x67, 0x6a, 0xf8, 0xe9, 0x48, 0x39, 0x3e, 0x05, 0x05, 0x0c, 0xc7, 0x3f, 0xa1, 0xc0,
	0xbc, 0x13, 0x13, 0x0a, 0xb4, 0xf5, 0xaf, 0x51, 0x19, 0x62, 0xa8, 0x8f, 0x95, 0x52, 0x9f, 0x99,
	0x4a, 0x69, 0xf5, 0x11, 0x2c, 0xca, 0x26, 0xf5, 0x9f, 0xb3, 0xc8, 0x38, 0x20, 0x61, 0x51, 0xeb,
	0xf7, 0xbc, 0xfe, 0xf5, 0x75, 0xfe, 0x6e, 0x40, 0xce, 0x32, 0x72, 0x7c, 0x1c, 0x21, 0x9f, 0x25,
	0xef, 0xcf, 0x61, 0xa2, 0xbc, 0x7f, 0xad, 0x36, 0xcf, 0xa5, 0x28, 0xba, 0x36, 0x83, 0xf7, 0x36,
	0x74, 0xff, 0x15, 0xde, 0xd7, 0x19, 0x3c, 0xa9, 0x08, 0xe4, 0xd1, 0xec, 0xa6, 0x94, 0x00, 0xd5,
	0xea, 0x8b, 0x03, 0x34, 0xf6, 0x57, 0x19, 0xe9, 0x3e, 0x45, 0x46, 0x76, 0x67, 0xf7, 0x25, 0x94,
	0xa9, 0x7d, 0xb0, 0xc0, 0xab, 0x21, 0x3f, 0xd3, 0x8f, 0xcb, 0xc1, 0x76, 0xcc, 0x4a, 0x18, 0x30,
	0x0f, 0x66, 0xec, 0xe9, 0x9c, 0xd2, 0xd4, 0xd0, 0x39, 0xcd, 0xa5, 0xb1, 0xce, 0x69, 0x3e, 0x9f,
	0x9c, 0xb5, 0xa3, 0xca, 0x4f, 0xb7, 0x7b, 0xd6, 0x2f, 0xb7, 0x7b, 0xd6, 0x6f, 0xb7, 0x7b, 0xd6,
	0x65, 0x41, 0xfc, 0x53, 0xf5, 0xe9, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x43, 0xa7, 0x5c, 0x1a,
	0x95, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CPRouteSvcClient is the client API for CPRouteSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CPRouteSvcClient interface {
	CPStaticRouteCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteDelete(ctx context.Context, in *CPStaticRouteDeleteRequest, opts ...grpc.CallOption) (*CPStaticRouteDeleteResponse, error)
	CPStaticRouteGet(ctx context.Context, in *CPStaticRouteGetRequest, opts ...grpc.CallOption) (*CPStaticRouteGetResponse, error)
	CPRouteGet(ctx context.Context, in *CPRouteGetRequest, opts ...grpc.CallOption) (*CPRouteGetResponse, error)
	CPRouteRedistGet(ctx context.Context, in *CPRouteRedistGetRequest, opts ...grpc.CallOption) (*CPRouteRedistGetResponse, error)
}

type cPRouteSvcClient struct {
	cc *grpc.ClientConn
}

func NewCPRouteSvcClient(cc *grpc.ClientConn) CPRouteSvcClient {
	return &cPRouteSvcClient{cc}
}

func (c *cPRouteSvcClient) CPStaticRouteCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteDelete(ctx context.Context, in *CPStaticRouteDeleteRequest, opts ...grpc.CallOption) (*CPStaticRouteDeleteResponse, error) {
	out := new(CPStaticRouteDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteGet(ctx context.Context, in *CPStaticRouteGetRequest, opts ...grpc.CallOption) (*CPStaticRouteGetResponse, error) {
	out := new(CPStaticRouteGetResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPRouteGet(ctx context.Context, in *CPRouteGetRequest, opts ...grpc.CallOption) (*CPRouteGetResponse, error) {
	out := new(CPRouteGetResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPRouteGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPRouteRedistGet(ctx context.Context, in *CPRouteRedistGetRequest, opts ...grpc.CallOption) (*CPRouteRedistGetResponse, error) {
	out := new(CPRouteRedistGetResponse)
	err := c.cc.Invoke(ctx, "/pds.CPRouteSvc/CPRouteRedistGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPRouteSvcServer is the server API for CPRouteSvc service.
type CPRouteSvcServer interface {
	CPStaticRouteCreate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteUpdate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteDelete(context.Context, *CPStaticRouteDeleteRequest) (*CPStaticRouteDeleteResponse, error)
	CPStaticRouteGet(context.Context, *CPStaticRouteGetRequest) (*CPStaticRouteGetResponse, error)
	CPRouteGet(context.Context, *CPRouteGetRequest) (*CPRouteGetResponse, error)
	CPRouteRedistGet(context.Context, *CPRouteRedistGetRequest) (*CPRouteRedistGetResponse, error)
}

// UnimplementedCPRouteSvcServer can be embedded to have forward compatible implementations.
type UnimplementedCPRouteSvcServer struct {
}

func (*UnimplementedCPRouteSvcServer) CPStaticRouteCreate(ctx context.Context, req *CPStaticRouteRequest) (*CPStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPStaticRouteCreate not implemented")
}
func (*UnimplementedCPRouteSvcServer) CPStaticRouteUpdate(ctx context.Context, req *CPStaticRouteRequest) (*CPStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPStaticRouteUpdate not implemented")
}
func (*UnimplementedCPRouteSvcServer) CPStaticRouteDelete(ctx context.Context, req *CPStaticRouteDeleteRequest) (*CPStaticRouteDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPStaticRouteDelete not implemented")
}
func (*UnimplementedCPRouteSvcServer) CPStaticRouteGet(ctx context.Context, req *CPStaticRouteGetRequest) (*CPStaticRouteGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPStaticRouteGet not implemented")
}
func (*UnimplementedCPRouteSvcServer) CPRouteGet(ctx context.Context, req *CPRouteGetRequest) (*CPRouteGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPRouteGet not implemented")
}
func (*UnimplementedCPRouteSvcServer) CPRouteRedistGet(ctx context.Context, req *CPRouteRedistGetRequest) (*CPRouteRedistGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPRouteRedistGet not implemented")
}

func RegisterCPRouteSvcServer(s *grpc.Server, srv CPRouteSvcServer) {
	s.RegisterService(&_CPRouteSvc_serviceDesc, srv)
}

func _CPRouteSvc_CPStaticRouteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteCreate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteUpdate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteDelete(ctx, req.(*CPStaticRouteDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteGet(ctx, req.(*CPStaticRouteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPRouteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPRouteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPRouteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPRouteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPRouteGet(ctx, req.(*CPRouteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPRouteRedistGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPRouteRedistGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPRouteRedistGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPRouteRedistGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPRouteRedistGet(ctx, req.(*CPRouteRedistGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPRouteSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.CPRouteSvc",
	HandlerType: (*CPRouteSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CPStaticRouteCreate",
			Handler:    _CPRouteSvc_CPStaticRouteCreate_Handler,
		},
		{
			MethodName: "CPStaticRouteUpdate",
			Handler:    _CPRouteSvc_CPStaticRouteUpdate_Handler,
		},
		{
			MethodName: "CPStaticRouteDelete",
			Handler:    _CPRouteSvc_CPStaticRouteDelete_Handler,
		},
		{
			MethodName: "CPStaticRouteGet",
			Handler:    _CPRouteSvc_CPStaticRouteGet_Handler,
		},
		{
			MethodName: "CPRouteGet",
			Handler:    _CPRouteSvc_CPRouteGet_Handler,
		},
		{
			MethodName: "CPRouteRedistGet",
			Handler:    _CPRouteSvc_CPRouteRedistGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp_route.proto",
}

func (m *CPRouteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdminDistance != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminDistance))
		i--
		dAtA[i] = 0x68
	}
	if m.LooseNextHop {
		i--
		if m.LooseNextHop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.Connected {
		i--
		if m.Connected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FibRoute {
		i--
		if m.FibRoute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Metric1 != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Metric1))
		i--
		dAtA[i] = 0x48
	}
	if m.Age != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x40
	}
	if m.Proto != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
		i--
		dAtA[i] = 0x38
	}
	if m.Type != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.IfIndex != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.NHAddr != nil {
		{
			size, err := m.NHAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DestPrefixLen != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
		i--
		dAtA[i] = 0x18
	}
	if m.DestAddr != nil {
		{
			size, err := m.DestAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RouteTableId != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Proto != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
		i--
		dAtA[i] = 0x30
	}
	if m.IfIndex != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.NHAddr != nil {
		{
			size, err := m.NHAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DestPrefixLen != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
		i--
		dAtA[i] = 0x18
	}
	if m.DestAddr != nil {
		{
			size, err := m.DestAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RouteTableId != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteKeyHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InterfaceId) > 0 {
		i -= len(m.InterfaceId)
		copy(dAtA[i:], m.InterfaceId)
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.InterfaceId)))
		i--
		dAtA[i] = 0x42
	}
	if m.AdminDist != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminDist))
		i--
		dAtA[i] = 0x38
	}
	if m.Override {
		i--
		if m.Override {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.NextHopAddr != nil {
		{
			size, err := m.NextHopAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.PrefixLen != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.PrefixLen))
		i--
		dAtA[i] = 0x18
	}
	if m.DestAddr != nil {
		{
			size, err := m.DestAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteTableId) > 0 {
		i -= len(m.RouteTableId)
		copy(dAtA[i:], m.RouteTableId)
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.RouteTableId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiStatus != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextHopAddr != nil {
		{
			size, err := m.NextHopAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PrefixLen != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.PrefixLen))
		i--
		dAtA[i] = 0x10
	}
	if m.DestAddr != nil {
		{
			size, err := m.DestAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteKeyHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IdOrKey != nil {
		{
			size := m.IdOrKey.Size()
			i -= size
			if _, err := m.IdOrKey.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteKeyHandle_Id) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *CPStaticRouteKeyHandle_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CPStaticRouteKeyHandle_Key) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *CPStaticRouteKeyHandle_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CPStaticRouteDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiStatus != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPStaticRouteGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPStaticRouteGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedistStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedistStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedistStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddrFilter != nil {
		{
			size, err := m.AddrFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RuleUsageCount != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RuleUsageCount))
		i--
		dAtA[i] = 0x18
	}
	if m.EntryId != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.EntryId))
		i--
		dAtA[i] = 0x10
	}
	if m.FteIndex != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.FteIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedistKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedistKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedistKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EntryId != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.EntryId))
		i--
		dAtA[i] = 0x10
	}
	if m.FteIndex != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.FteIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedistKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedistKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedistKeyHandle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedistGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedistGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedistGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPRouteRedistGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteRedistGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPRouteRedistGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCpRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovCpRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CPRouteStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Type != 0 {
		n += 1 + sovCpRoute(uint64(m.Type))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	if m.Age != 0 {
		n += 1 + sovCpRoute(uint64(m.Age))
	}
	if m.Metric1 != 0 {
		n += 1 + sovCpRoute(uint64(m.Metric1))
	}
	if m.FibRoute {
		n += 2
	}
	if m.Connected {
		n += 2
	}
	if m.LooseNextHop {
		n += 2
	}
	if m.AdminDistance != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminDistance))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteKeyHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteTableId)
	if l > 0 {
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		l = m.NextHopAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCpRoute(uint64(m.State))
	}
	if m.Override {
		n += 2
	}
	if m.AdminDist != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminDist))
	}
	l = len(m.InterfaceId)
	if l > 0 {
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		l = m.NextHopAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteKeyHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdOrKey != nil {
		n += m.IdOrKey.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteKeyHandle_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}
func (m *CPStaticRouteKeyHandle_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}
func (m *CPStaticRouteDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPStaticRouteGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedistStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FteIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.FteIndex))
	}
	if m.EntryId != 0 {
		n += 1 + sovCpRoute(uint64(m.EntryId))
	}
	if m.RuleUsageCount != 0 {
		n += 1 + sovCpRoute(uint64(m.RuleUsageCount))
	}
	if m.AddrFilter != nil {
		l = m.AddrFilter.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedistKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FteIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.FteIndex))
	}
	if m.EntryId != 0 {
		n += 1 + sovCpRoute(uint64(m.EntryId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedistKeyHandle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedistGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CPRouteRedistGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCpRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCpRoute(x uint64) (n int) {
	return sovCpRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPRouteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RouteType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= RouteProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric1", wireType)
			}
			m.Metric1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FibRoute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FibRoute = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Connected = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LooseNextHop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LooseNextHop = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminDistance", wireType)
			}
			m.AdminDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminDistance |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= RouteProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CPRouteKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPRouteStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPRoute{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableId = append(m.RouteTableId[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteTableId == nil {
				m.RouteTableId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextHopAddr == nil {
				m.NextHopAddr = &IPAddress{}
			}
			if err := m.NextHopAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= AdminState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Override = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminDist", wireType)
			}
			m.AdminDist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminDist |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceId = append(m.InterfaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.InterfaceId == nil {
				m.InterfaceId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CPStaticRouteSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPStaticRouteStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextHopAddr == nil {
				m.NextHopAddr = &IPAddress{}
			}
			if err := m.NextHopAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.IdOrKey = &CPStaticRouteKeyHandle_Id{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CPStaticRouteKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IdOrKey = &CPStaticRouteKeyHandle_Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPStaticRoute{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedistStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedistStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedistStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteIndex", wireType)
			}
			m.FteIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FteIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			m.EntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleUsageCount", wireType)
			}
			m.RuleUsageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleUsageCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddrFilter == nil {
				m.AddrFilter = &IPAddress{}
			}
			if err := m.AddrFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedistKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedistKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedistKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteIndex", wireType)
			}
			m.FteIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FteIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryId", wireType)
			}
			m.EntryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedistKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedistKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedistKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CPRouteRedistKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedistGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedistGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedistGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPRouteRedistKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPRouteRedistStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteRedistGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteRedistGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteRedistGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPRouteRedist{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCpRoute
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCpRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCpRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCpRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCpRoute
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCpRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpRoute   = fmt.Errorf("proto: integer overflow")
)
