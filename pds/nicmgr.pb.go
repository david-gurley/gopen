// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nicmgr.proto

package pds

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EthDeviceRdmaSpec struct {
	Enable               bool     `protobuf:"varint,1,opt,name=Enable,proto3" json:"Enable,omitempty"`
	PteCount             uint32   `protobuf:"varint,2,opt,name=PteCount,proto3" json:"PteCount,omitempty"`
	KeyCount             uint32   `protobuf:"varint,3,opt,name=KeyCount,proto3" json:"KeyCount,omitempty"`
	AHCount              uint32   `protobuf:"varint,4,opt,name=AHCount,proto3" json:"AHCount,omitempty"`
	SQCount              uint32   `protobuf:"varint,5,opt,name=SQCount,proto3" json:"SQCount,omitempty"`
	RQCount              uint32   `protobuf:"varint,6,opt,name=RQCount,proto3" json:"RQCount,omitempty"`
	CQCount              uint32   `protobuf:"varint,7,opt,name=CQCount,proto3" json:"CQCount,omitempty"`
	EQCount              uint32   `protobuf:"varint,8,opt,name=EQCount,proto3" json:"EQCount,omitempty"`
	AQCount              uint32   `protobuf:"varint,9,opt,name=AQCount,proto3" json:"AQCount,omitempty"`
	PidCount             uint32   `protobuf:"varint,10,opt,name=PidCount,proto3" json:"PidCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthDeviceRdmaSpec) Reset()         { *m = EthDeviceRdmaSpec{} }
func (m *EthDeviceRdmaSpec) String() string { return proto.CompactTextString(m) }
func (*EthDeviceRdmaSpec) ProtoMessage()    {}
func (*EthDeviceRdmaSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{0}
}
func (m *EthDeviceRdmaSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDeviceRdmaSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDeviceRdmaSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDeviceRdmaSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDeviceRdmaSpec.Merge(m, src)
}
func (m *EthDeviceRdmaSpec) XXX_Size() int {
	return m.Size()
}
func (m *EthDeviceRdmaSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDeviceRdmaSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EthDeviceRdmaSpec proto.InternalMessageInfo

func (m *EthDeviceRdmaSpec) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *EthDeviceRdmaSpec) GetPteCount() uint32 {
	if m != nil {
		return m.PteCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetKeyCount() uint32 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetAHCount() uint32 {
	if m != nil {
		return m.AHCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetSQCount() uint32 {
	if m != nil {
		return m.SQCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetRQCount() uint32 {
	if m != nil {
		return m.RQCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetCQCount() uint32 {
	if m != nil {
		return m.CQCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetEQCount() uint32 {
	if m != nil {
		return m.EQCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetAQCount() uint32 {
	if m != nil {
		return m.AQCount
	}
	return 0
}

func (m *EthDeviceRdmaSpec) GetPidCount() uint32 {
	if m != nil {
		return m.PidCount
	}
	return 0
}

type EthDevicePcieSpec struct {
	OpromType            string   `protobuf:"bytes,1,opt,name=OpromType,proto3" json:"OpromType,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
	TotalVfs             uint32   `protobuf:"varint,3,opt,name=TotalVfs,proto3" json:"TotalVfs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthDevicePcieSpec) Reset()         { *m = EthDevicePcieSpec{} }
func (m *EthDevicePcieSpec) String() string { return proto.CompactTextString(m) }
func (*EthDevicePcieSpec) ProtoMessage()    {}
func (*EthDevicePcieSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{1}
}
func (m *EthDevicePcieSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDevicePcieSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDevicePcieSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDevicePcieSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDevicePcieSpec.Merge(m, src)
}
func (m *EthDevicePcieSpec) XXX_Size() int {
	return m.Size()
}
func (m *EthDevicePcieSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDevicePcieSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EthDevicePcieSpec proto.InternalMessageInfo

func (m *EthDevicePcieSpec) GetOpromType() string {
	if m != nil {
		return m.OpromType
	}
	return ""
}

func (m *EthDevicePcieSpec) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EthDevicePcieSpec) GetTotalVfs() uint32 {
	if m != nil {
		return m.TotalVfs
	}
	return 0
}

type EthDeviceSpec struct {
	// device
	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	DevUuid    uint64 `protobuf:"varint,2,opt,name=DevUuid,proto3" json:"DevUuid,omitempty"`
	EthType    string `protobuf:"bytes,3,opt,name=EthType,proto3" json:"EthType,omitempty"`
	HostDev    bool   `protobuf:"varint,4,opt,name=HostDev,proto3" json:"HostDev,omitempty"`
	BarMapSize uint32 `protobuf:"varint,5,opt,name=BarMapSize,proto3" json:"BarMapSize,omitempty"`
	// network
	UplinkPortNumber uint32 `protobuf:"varint,6,opt,name=UplinkPortNumber,proto3" json:"UplinkPortNumber,omitempty"`
	QosGroup         string `protobuf:"bytes,7,opt,name=QosGroup,proto3" json:"QosGroup,omitempty"`
	// resource counts
	LifCount    uint32 `protobuf:"varint,8,opt,name=LifCount,proto3" json:"LifCount,omitempty"`
	RxQCount    uint32 `protobuf:"varint,9,opt,name=RxQCount,proto3" json:"RxQCount,omitempty"`
	TxQCount    uint32 `protobuf:"varint,10,opt,name=TxQCount,proto3" json:"TxQCount,omitempty"`
	EQCount     uint32 `protobuf:"varint,11,opt,name=EQCount,proto3" json:"EQCount,omitempty"`
	AdminQCount uint32 `protobuf:"varint,12,opt,name=AdminQCount,proto3" json:"AdminQCount,omitempty"`
	IntrCount   uint32 `protobuf:"varint,13,opt,name=IntrCount,proto3" json:"IntrCount,omitempty"`
	MacAddr     uint64 `protobuf:"varint,14,opt,name=MacAddr,proto3" json:"MacAddr,omitempty"`
	// pcie spec
	PcieSpec *EthDevicePcieSpec `protobuf:"bytes,15,opt,name=PcieSpec,proto3" json:"PcieSpec,omitempty"`
	// rdma spec
	RdmaSpec             *EthDeviceRdmaSpec `protobuf:"bytes,16,opt,name=RdmaSpec,proto3" json:"RdmaSpec,omitempty"`
	VfDev                bool               `protobuf:"varint,17,opt,name=VfDev,proto3" json:"VfDev,omitempty"`
	PeerName             string             `protobuf:"bytes,18,opt,name=PeerName,proto3" json:"PeerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EthDeviceSpec) Reset()         { *m = EthDeviceSpec{} }
func (m *EthDeviceSpec) String() string { return proto.CompactTextString(m) }
func (*EthDeviceSpec) ProtoMessage()    {}
func (*EthDeviceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{2}
}
func (m *EthDeviceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDeviceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDeviceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDeviceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDeviceSpec.Merge(m, src)
}
func (m *EthDeviceSpec) XXX_Size() int {
	return m.Size()
}
func (m *EthDeviceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDeviceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EthDeviceSpec proto.InternalMessageInfo

func (m *EthDeviceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EthDeviceSpec) GetDevUuid() uint64 {
	if m != nil {
		return m.DevUuid
	}
	return 0
}

func (m *EthDeviceSpec) GetEthType() string {
	if m != nil {
		return m.EthType
	}
	return ""
}

func (m *EthDeviceSpec) GetHostDev() bool {
	if m != nil {
		return m.HostDev
	}
	return false
}

func (m *EthDeviceSpec) GetBarMapSize() uint32 {
	if m != nil {
		return m.BarMapSize
	}
	return 0
}

func (m *EthDeviceSpec) GetUplinkPortNumber() uint32 {
	if m != nil {
		return m.UplinkPortNumber
	}
	return 0
}

func (m *EthDeviceSpec) GetQosGroup() string {
	if m != nil {
		return m.QosGroup
	}
	return ""
}

func (m *EthDeviceSpec) GetLifCount() uint32 {
	if m != nil {
		return m.LifCount
	}
	return 0
}

func (m *EthDeviceSpec) GetRxQCount() uint32 {
	if m != nil {
		return m.RxQCount
	}
	return 0
}

func (m *EthDeviceSpec) GetTxQCount() uint32 {
	if m != nil {
		return m.TxQCount
	}
	return 0
}

func (m *EthDeviceSpec) GetEQCount() uint32 {
	if m != nil {
		return m.EQCount
	}
	return 0
}

func (m *EthDeviceSpec) GetAdminQCount() uint32 {
	if m != nil {
		return m.AdminQCount
	}
	return 0
}

func (m *EthDeviceSpec) GetIntrCount() uint32 {
	if m != nil {
		return m.IntrCount
	}
	return 0
}

func (m *EthDeviceSpec) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *EthDeviceSpec) GetPcieSpec() *EthDevicePcieSpec {
	if m != nil {
		return m.PcieSpec
	}
	return nil
}

func (m *EthDeviceSpec) GetRdmaSpec() *EthDeviceRdmaSpec {
	if m != nil {
		return m.RdmaSpec
	}
	return nil
}

func (m *EthDeviceSpec) GetVfDev() bool {
	if m != nil {
		return m.VfDev
	}
	return false
}

func (m *EthDeviceSpec) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

type EthDeviceStatus struct {
	LifBase              uint32   `protobuf:"varint,1,opt,name=LifBase,proto3" json:"LifBase,omitempty"`
	IntrBase             uint32   `protobuf:"varint,2,opt,name=IntrBase,proto3" json:"IntrBase,omitempty"`
	RegsMemAddr          uint64   `protobuf:"varint,3,opt,name=RegsMemAddr,proto3" json:"RegsMemAddr,omitempty"`
	PortInfoAddr         uint64   `protobuf:"varint,4,opt,name=PortInfoAddr,proto3" json:"PortInfoAddr,omitempty"`
	CmbMemAddr           uint64   `protobuf:"varint,5,opt,name=CmbMemAddr,proto3" json:"CmbMemAddr,omitempty"`
	CmbMemSize           uint64   `protobuf:"varint,6,opt,name=CmbMemSize,proto3" json:"CmbMemSize,omitempty"`
	RomMemAddr           uint64   `protobuf:"varint,7,opt,name=RomMemAddr,proto3" json:"RomMemAddr,omitempty"`
	RomMemSize           uint64   `protobuf:"varint,8,opt,name=RomMemSize,proto3" json:"RomMemSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthDeviceStatus) Reset()         { *m = EthDeviceStatus{} }
func (m *EthDeviceStatus) String() string { return proto.CompactTextString(m) }
func (*EthDeviceStatus) ProtoMessage()    {}
func (*EthDeviceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{3}
}
func (m *EthDeviceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDeviceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDeviceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDeviceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDeviceStatus.Merge(m, src)
}
func (m *EthDeviceStatus) XXX_Size() int {
	return m.Size()
}
func (m *EthDeviceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDeviceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_EthDeviceStatus proto.InternalMessageInfo

func (m *EthDeviceStatus) GetLifBase() uint32 {
	if m != nil {
		return m.LifBase
	}
	return 0
}

func (m *EthDeviceStatus) GetIntrBase() uint32 {
	if m != nil {
		return m.IntrBase
	}
	return 0
}

func (m *EthDeviceStatus) GetRegsMemAddr() uint64 {
	if m != nil {
		return m.RegsMemAddr
	}
	return 0
}

func (m *EthDeviceStatus) GetPortInfoAddr() uint64 {
	if m != nil {
		return m.PortInfoAddr
	}
	return 0
}

func (m *EthDeviceStatus) GetCmbMemAddr() uint64 {
	if m != nil {
		return m.CmbMemAddr
	}
	return 0
}

func (m *EthDeviceStatus) GetCmbMemSize() uint64 {
	if m != nil {
		return m.CmbMemSize
	}
	return 0
}

func (m *EthDeviceStatus) GetRomMemAddr() uint64 {
	if m != nil {
		return m.RomMemAddr
	}
	return 0
}

func (m *EthDeviceStatus) GetRomMemSize() uint64 {
	if m != nil {
		return m.RomMemSize
	}
	return 0
}

type EthDeviceStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthDeviceStats) Reset()         { *m = EthDeviceStats{} }
func (m *EthDeviceStats) String() string { return proto.CompactTextString(m) }
func (*EthDeviceStats) ProtoMessage()    {}
func (*EthDeviceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{4}
}
func (m *EthDeviceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDeviceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDeviceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDeviceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDeviceStats.Merge(m, src)
}
func (m *EthDeviceStats) XXX_Size() int {
	return m.Size()
}
func (m *EthDeviceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDeviceStats.DiscardUnknown(m)
}

var xxx_messageInfo_EthDeviceStats proto.InternalMessageInfo

type EthVFAttrs struct {
	Mac                  uint64   `protobuf:"varint,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Vlanid               uint32   `protobuf:"varint,2,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	Maxrate              uint32   `protobuf:"varint,3,opt,name=maxrate,proto3" json:"maxrate,omitempty"`
	Spoofchk             bool     `protobuf:"varint,4,opt,name=spoofchk,proto3" json:"spoofchk,omitempty"`
	Trust                uint32   `protobuf:"varint,5,opt,name=trust,proto3" json:"trust,omitempty"`
	Linkstate            uint32   `protobuf:"varint,6,opt,name=linkstate,proto3" json:"linkstate,omitempty"`
	StatsPa              uint64   `protobuf:"varint,7,opt,name=stats_pa,json=statsPa,proto3" json:"stats_pa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthVFAttrs) Reset()         { *m = EthVFAttrs{} }
func (m *EthVFAttrs) String() string { return proto.CompactTextString(m) }
func (*EthVFAttrs) ProtoMessage()    {}
func (*EthVFAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{5}
}
func (m *EthVFAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthVFAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthVFAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthVFAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthVFAttrs.Merge(m, src)
}
func (m *EthVFAttrs) XXX_Size() int {
	return m.Size()
}
func (m *EthVFAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_EthVFAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_EthVFAttrs proto.InternalMessageInfo

func (m *EthVFAttrs) GetMac() uint64 {
	if m != nil {
		return m.Mac
	}
	return 0
}

func (m *EthVFAttrs) GetVlanid() uint32 {
	if m != nil {
		return m.Vlanid
	}
	return 0
}

func (m *EthVFAttrs) GetMaxrate() uint32 {
	if m != nil {
		return m.Maxrate
	}
	return 0
}

func (m *EthVFAttrs) GetSpoofchk() bool {
	if m != nil {
		return m.Spoofchk
	}
	return false
}

func (m *EthVFAttrs) GetTrust() uint32 {
	if m != nil {
		return m.Trust
	}
	return 0
}

func (m *EthVFAttrs) GetLinkstate() uint32 {
	if m != nil {
		return m.Linkstate
	}
	return 0
}

func (m *EthVFAttrs) GetStatsPa() uint64 {
	if m != nil {
		return m.StatsPa
	}
	return 0
}

type EthDevice struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *EthDeviceSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status               *EthDeviceStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Stats                *EthDeviceStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"Stats,omitempty"`
	VFAttrs              *EthVFAttrs      `protobuf:"bytes,6,opt,name=VFAttrs,proto3" json:"VFAttrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EthDevice) Reset()         { *m = EthDevice{} }
func (m *EthDevice) String() string { return proto.CompactTextString(m) }
func (*EthDevice) ProtoMessage()    {}
func (*EthDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{6}
}
func (m *EthDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EthDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthDevice.Merge(m, src)
}
func (m *EthDevice) XXX_Size() int {
	return m.Size()
}
func (m *EthDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_EthDevice.DiscardUnknown(m)
}

var xxx_messageInfo_EthDevice proto.InternalMessageInfo

func (m *EthDevice) GetSpec() *EthDeviceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *EthDevice) GetStatus() *EthDeviceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *EthDevice) GetStats() *EthDeviceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *EthDevice) GetVFAttrs() *EthVFAttrs {
	if m != nil {
		return m.VFAttrs
	}
	return nil
}

type FtlDeviceSpec struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// device resource info
	LifCount                  uint32   `protobuf:"varint,2,opt,name=LifCount,proto3" json:"LifCount,omitempty"`
	SessionHwScanners         uint32   `protobuf:"varint,3,opt,name=SessionHwScanners,proto3" json:"SessionHwScanners,omitempty"`
	SessionBurstSize          uint32   `protobuf:"varint,4,opt,name=SessionBurstSize,proto3" json:"SessionBurstSize,omitempty"`
	SessionBurstReschedTimeUs uint32   `protobuf:"varint,5,opt,name=SessionBurstReschedTimeUs,proto3" json:"SessionBurstReschedTimeUs,omitempty"`
	SwPollers                 uint32   `protobuf:"varint,6,opt,name=SwPollers,proto3" json:"SwPollers,omitempty"`
	SwPollerQDepth            uint32   `protobuf:"varint,7,opt,name=SwPollerQDepth,proto3" json:"SwPollerQDepth,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *FtlDeviceSpec) Reset()         { *m = FtlDeviceSpec{} }
func (m *FtlDeviceSpec) String() string { return proto.CompactTextString(m) }
func (*FtlDeviceSpec) ProtoMessage()    {}
func (*FtlDeviceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{7}
}
func (m *FtlDeviceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FtlDeviceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FtlDeviceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FtlDeviceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FtlDeviceSpec.Merge(m, src)
}
func (m *FtlDeviceSpec) XXX_Size() int {
	return m.Size()
}
func (m *FtlDeviceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FtlDeviceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FtlDeviceSpec proto.InternalMessageInfo

func (m *FtlDeviceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FtlDeviceSpec) GetLifCount() uint32 {
	if m != nil {
		return m.LifCount
	}
	return 0
}

func (m *FtlDeviceSpec) GetSessionHwScanners() uint32 {
	if m != nil {
		return m.SessionHwScanners
	}
	return 0
}

func (m *FtlDeviceSpec) GetSessionBurstSize() uint32 {
	if m != nil {
		return m.SessionBurstSize
	}
	return 0
}

func (m *FtlDeviceSpec) GetSessionBurstReschedTimeUs() uint32 {
	if m != nil {
		return m.SessionBurstReschedTimeUs
	}
	return 0
}

func (m *FtlDeviceSpec) GetSwPollers() uint32 {
	if m != nil {
		return m.SwPollers
	}
	return 0
}

func (m *FtlDeviceSpec) GetSwPollerQDepth() uint32 {
	if m != nil {
		return m.SwPollerQDepth
	}
	return 0
}

type FtlDeviceStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FtlDeviceStatus) Reset()         { *m = FtlDeviceStatus{} }
func (m *FtlDeviceStatus) String() string { return proto.CompactTextString(m) }
func (*FtlDeviceStatus) ProtoMessage()    {}
func (*FtlDeviceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{8}
}
func (m *FtlDeviceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FtlDeviceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FtlDeviceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FtlDeviceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FtlDeviceStatus.Merge(m, src)
}
func (m *FtlDeviceStatus) XXX_Size() int {
	return m.Size()
}
func (m *FtlDeviceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FtlDeviceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FtlDeviceStatus proto.InternalMessageInfo

type FtlDeviceStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FtlDeviceStats) Reset()         { *m = FtlDeviceStats{} }
func (m *FtlDeviceStats) String() string { return proto.CompactTextString(m) }
func (*FtlDeviceStats) ProtoMessage()    {}
func (*FtlDeviceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{9}
}
func (m *FtlDeviceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FtlDeviceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FtlDeviceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FtlDeviceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FtlDeviceStats.Merge(m, src)
}
func (m *FtlDeviceStats) XXX_Size() int {
	return m.Size()
}
func (m *FtlDeviceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FtlDeviceStats.DiscardUnknown(m)
}

var xxx_messageInfo_FtlDeviceStats proto.InternalMessageInfo

type FtlDevice struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *FtlDeviceSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Status               *FtlDeviceStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Stats                *FtlDeviceStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"Stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FtlDevice) Reset()         { *m = FtlDevice{} }
func (m *FtlDevice) String() string { return proto.CompactTextString(m) }
func (*FtlDevice) ProtoMessage()    {}
func (*FtlDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfc320c79e44d3f, []int{10}
}
func (m *FtlDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FtlDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FtlDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FtlDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FtlDevice.Merge(m, src)
}
func (m *FtlDevice) XXX_Size() int {
	return m.Size()
}
func (m *FtlDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_FtlDevice.DiscardUnknown(m)
}

var xxx_messageInfo_FtlDevice proto.InternalMessageInfo

func (m *FtlDevice) GetSpec() *FtlDeviceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *FtlDevice) GetStatus() *FtlDeviceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FtlDevice) GetStats() *FtlDeviceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*EthDeviceRdmaSpec)(nil), "pds.nicmgr.EthDeviceRdmaSpec")
	proto.RegisterType((*EthDevicePcieSpec)(nil), "pds.nicmgr.EthDevicePcieSpec")
	proto.RegisterType((*EthDeviceSpec)(nil), "pds.nicmgr.EthDeviceSpec")
	proto.RegisterType((*EthDeviceStatus)(nil), "pds.nicmgr.EthDeviceStatus")
	proto.RegisterType((*EthDeviceStats)(nil), "pds.nicmgr.EthDeviceStats")
	proto.RegisterType((*EthVFAttrs)(nil), "pds.nicmgr.EthVFAttrs")
	proto.RegisterType((*EthDevice)(nil), "pds.nicmgr.EthDevice")
	proto.RegisterType((*FtlDeviceSpec)(nil), "pds.nicmgr.FtlDeviceSpec")
	proto.RegisterType((*FtlDeviceStatus)(nil), "pds.nicmgr.FtlDeviceStatus")
	proto.RegisterType((*FtlDeviceStats)(nil), "pds.nicmgr.FtlDeviceStats")
	proto.RegisterType((*FtlDevice)(nil), "pds.nicmgr.FtlDevice")
}

func init() { proto.RegisterFile("nicmgr.proto", fileDescriptor_3cfc320c79e44d3f) }

var fileDescriptor_3cfc320c79e44d3f = []byte{
	// 979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0x96, 0x1d, 0xc7, 0x7f, 0x8e, 0x63, 0x3b, 0x19, 0xfd, 0x14, 0x39, 0xf9, 0x81, 0x1b, 0xed,
	0x05, 0x8a, 0x50, 0x30, 0x95, 0x7b, 0x85, 0x40, 0x42, 0x76, 0xe2, 0x92, 0x8a, 0xa6, 0x75, 0xc6,
	0x49, 0x6e, 0xd1, 0xd8, 0x1e, 0xd7, 0x4b, 0xbd, 0x7f, 0xb4, 0x33, 0x4e, 0x1b, 0xde, 0x81, 0x27,
	0x40, 0x88, 0x07, 0xe1, 0x05, 0xe0, 0xae, 0xbc, 0x40, 0x85, 0x72, 0xc9, 0x53, 0xa0, 0x73, 0x66,
	0x66, 0x77, 0x9d, 0xb4, 0xd0, 0x4b, 0x6e, 0xa2, 0xfd, 0xbe, 0xef, 0x9c, 0xf1, 0xce, 0x77, 0xbe,
	0x99, 0x0d, 0x6c, 0x85, 0xfe, 0x34, 0x78, 0x91, 0x74, 0xe3, 0x24, 0xd2, 0x11, 0x83, 0x78, 0xa6,
	0xba, 0x86, 0xd9, 0x6f, 0x05, 0x52, 0x8b, 0xcf, 0xf1, 0x8f, 0x11, 0xf7, 0xeb, 0xfa, 0x26, 0x96,
	0xca, 0x00, 0xef, 0xa7, 0x22, 0xec, 0x0c, 0xf5, 0xe2, 0x44, 0x5e, 0xfb, 0x53, 0xc9, 0x67, 0x81,
	0x18, 0xc7, 0x72, 0xca, 0x76, 0xa1, 0x3c, 0x0c, 0xc5, 0x64, 0x29, 0xdb, 0x85, 0x83, 0xc2, 0x61,
	0x95, 0x5b, 0xc4, 0xf6, 0xa1, 0x3a, 0xd2, 0xf2, 0x38, 0x5a, 0x85, 0xba, 0x5d, 0x3c, 0x28, 0x1c,
	0x36, 0x78, 0x8a, 0x51, 0xfb, 0x56, 0xde, 0x18, 0x6d, 0xc3, 0x68, 0x0e, 0xb3, 0x36, 0x54, 0xfa,
	0xa7, 0x46, 0x2a, 0x91, 0xe4, 0x20, 0x2a, 0xe3, 0x73, 0xa3, 0x6c, 0x1a, 0xc5, 0x42, 0x54, 0xb8,
	0x55, 0xca, 0x46, 0xe1, 0x99, 0x72, 0x6c, 0x95, 0x8a, 0x51, 0x8e, 0x33, 0x65, 0x68, 0x95, 0xaa,
	0x51, 0x86, 0x99, 0xd2, 0xb7, 0x4a, 0xcd, 0xbe, 0xc1, 0x79, 0xfa, 0xde, 0x23, 0x7f, 0x66, 0x24,
	0xb0, 0x7b, 0xb2, 0xd8, 0x13, 0x39, 0x73, 0x46, 0x53, 0x5f, 0x92, 0x39, 0x1f, 0x41, 0xed, 0x79,
	0x9c, 0x44, 0xc1, 0xc5, 0x4d, 0x6c, 0xfc, 0xa9, 0xf1, 0x8c, 0x60, 0x0c, 0x4a, 0xa3, 0x28, 0x71,
	0xf6, 0xd0, 0x33, 0xfe, 0xc4, 0x45, 0xa4, 0xc5, 0xf2, 0x6a, 0xae, 0x9c, 0x35, 0x0e, 0x7b, 0xbf,
	0x97, 0xa0, 0x91, 0xfe, 0x06, 0xad, 0xcf, 0xa0, 0xf4, 0x4c, 0x04, 0x6e, 0x69, 0x7a, 0xc6, 0xd7,
	0x3f, 0x91, 0xd7, 0x97, 0x2b, 0x7f, 0x46, 0x0b, 0x97, 0xb8, 0x83, 0xb4, 0x65, 0xbd, 0xa0, 0x77,
	0xd9, 0xa0, 0x06, 0x07, 0x51, 0x39, 0x8d, 0x94, 0x3e, 0x91, 0xd7, 0x64, 0x7a, 0x95, 0x3b, 0xc8,
	0x3a, 0x00, 0x03, 0x91, 0x9c, 0x89, 0x78, 0xec, 0xff, 0x20, 0xad, 0xef, 0x39, 0x86, 0x7d, 0x0a,
	0xdb, 0x97, 0xf1, 0xd2, 0x0f, 0x5f, 0xe2, 0xdb, 0x3f, 0x5b, 0x05, 0x13, 0x99, 0xd8, 0x19, 0xdc,
	0xe3, 0x71, 0x6f, 0xe7, 0x91, 0xfa, 0x26, 0x89, 0x56, 0x31, 0x4d, 0xa3, 0xc6, 0x53, 0x8c, 0xda,
	0x53, 0x7f, 0x9e, 0x9f, 0x47, 0x8a, 0x51, 0xe3, 0xaf, 0xd7, 0x26, 0x92, 0x62, 0xf2, 0xcb, 0x69,
	0x76, 0x24, 0x0e, 0xe7, 0x47, 0x5c, 0x5f, 0x1f, 0xf1, 0x01, 0xd4, 0xfb, 0xb3, 0xc0, 0x0f, 0xad,
	0xba, 0x45, 0x6a, 0x9e, 0xc2, 0xc9, 0x3d, 0x09, 0x75, 0x62, 0xf4, 0x06, 0xe9, 0x19, 0x81, 0x2b,
	0x9f, 0x89, 0x69, 0x7f, 0x36, 0x4b, 0xda, 0x4d, 0xe3, 0xb1, 0x85, 0xec, 0x0b, 0xa8, 0xba, 0xe9,
	0xb7, 0x5b, 0x07, 0x85, 0xc3, 0x7a, 0xef, 0xe3, 0x6e, 0x76, 0xc2, 0xba, 0xf7, 0x22, 0xc2, 0xd3,
	0x72, 0x6c, 0x75, 0xa7, 0xaa, 0xbd, 0xfd, 0x0f, 0xad, 0xae, 0x88, 0xa7, 0xe5, 0xec, 0x7f, 0xb0,
	0x79, 0x35, 0xc7, 0xe9, 0xed, 0xd0, 0xf4, 0x0c, 0xa0, 0xb8, 0x4a, 0x99, 0x50, 0x42, 0x98, 0xf1,
	0xdb, 0x61, 0xef, 0xc7, 0x22, 0xb4, 0xb2, 0x2c, 0x69, 0xa1, 0x57, 0x0a, 0x77, 0xf5, 0xd4, 0x9f,
	0x0f, 0x84, 0x32, 0x81, 0x6a, 0x70, 0x07, 0x71, 0x25, 0xdc, 0x3c, 0x49, 0xf6, 0x30, 0x3b, 0x8c,
	0x5e, 0x72, 0xf9, 0x42, 0x9d, 0xc9, 0x80, 0xfc, 0xd8, 0x20, 0x3f, 0xf2, 0x14, 0xf3, 0x60, 0x0b,
	0x53, 0xf0, 0x24, 0x9c, 0x47, 0x54, 0x52, 0xa2, 0x92, 0x35, 0x0e, 0x73, 0x76, 0x1c, 0x4c, 0xdc,
	0x22, 0x9b, 0x54, 0x91, 0x63, 0x32, 0x9d, 0x72, 0x58, 0xce, 0xeb, 0x94, 0xc3, 0x0e, 0x00, 0x8f,
	0x02, 0xd7, 0x5f, 0x31, 0x7a, 0xc6, 0x64, 0x3a, 0xf5, 0x57, 0xf3, 0x3a, 0x32, 0xde, 0x36, 0x34,
	0xd7, 0xec, 0x50, 0xde, 0xaf, 0x05, 0x80, 0xa1, 0x5e, 0x5c, 0x3d, 0xee, 0x6b, 0x9d, 0x28, 0xb6,
	0x0d, 0x1b, 0x81, 0x98, 0x92, 0x31, 0x25, 0x8e, 0x8f, 0x78, 0xf3, 0x5d, 0x2f, 0x45, 0x68, 0xcf,
	0x59, 0x83, 0x5b, 0x84, 0x36, 0x06, 0xe2, 0x75, 0x22, 0xb4, 0xb4, 0x27, 0xd8, 0x41, 0xb4, 0x51,
	0xc5, 0x51, 0x34, 0x9f, 0x2e, 0x5e, 0xda, 0x73, 0x96, 0x62, 0x1c, 0xa1, 0x4e, 0x56, 0xca, 0xdd,
	0x6d, 0x06, 0x60, 0x0c, 0xf1, 0x10, 0x29, 0x8d, 0xab, 0x99, 0x73, 0x95, 0x11, 0x6c, 0x0f, 0xaa,
	0xf8, 0xa0, 0xbe, 0x8b, 0x85, 0xdd, 0x72, 0x85, 0xf0, 0x48, 0x78, 0x7f, 0x14, 0xa1, 0x96, 0x6e,
	0x88, 0x7d, 0x09, 0x55, 0x3c, 0xe7, 0x67, 0x52, 0x0b, 0xda, 0x41, 0xbd, 0xd7, 0xec, 0xd2, 0x35,
	0xef, 0xd8, 0x41, 0xeb, 0xcd, 0xdb, 0x07, 0x85, 0xbf, 0xde, 0x3e, 0xa8, 0x1c, 0xf9, 0xe1, 0xd2,
	0x0f, 0x25, 0x4f, 0x1b, 0xd8, 0xd7, 0x50, 0x79, 0x3e, 0xf9, 0x9e, 0x7a, 0x8b, 0xd4, 0xdb, 0x30,
	0xbd, 0x96, 0x1c, 0xec, 0xda, 0xd6, 0x26, 0xb2, 0x47, 0x51, 0xe0, 0x6b, 0x19, 0xc4, 0xfa, 0x86,
	0xbb, 0x2e, 0xf6, 0x19, 0x94, 0x28, 0xd4, 0x1b, 0xd4, 0xbd, 0xf7, 0xce, 0x50, 0x53, 0xa0, 0xa9,
	0x8c, 0x3d, 0x82, 0xb2, 0x09, 0x24, 0x79, 0x54, 0xef, 0xfd, 0xff, 0xdd, 0x0d, 0x54, 0xc2, 0x6d,
	0x29, 0x7b, 0x08, 0x9b, 0x34, 0x36, 0xb2, 0xaf, 0xde, 0xdb, 0x7f, 0x6f, 0x8f, 0xe2, 0xa6, 0x90,
	0x3d, 0x84, 0x8a, 0x9d, 0x2d, 0x19, 0x5b, 0xef, 0xed, 0xde, 0xe9, 0xb1, 0x2a, 0x77, 0x65, 0xde,
	0xcf, 0x45, 0x68, 0x3c, 0xd6, 0xcb, 0x7f, 0xb9, 0x7f, 0xf3, 0x37, 0x59, 0xf1, 0xce, 0x4d, 0x76,
	0x04, 0x3b, 0x63, 0xa9, 0x94, 0x1f, 0x85, 0xa7, 0xaf, 0xc6, 0x53, 0x11, 0x86, 0x32, 0x71, 0xd7,
	0xfc, 0x7d, 0x01, 0xef, 0x56, 0x4b, 0x0e, 0x56, 0x89, 0xd2, 0x94, 0x5c, 0xf3, 0x4d, 0xbc, 0xc7,
	0xb3, 0xaf, 0x60, 0x2f, 0xcf, 0x71, 0xa9, 0xa6, 0x0b, 0x39, 0xbb, 0xf0, 0x03, 0x79, 0xa9, 0x6c,
	0xa4, 0xde, 0x5f, 0x80, 0x31, 0x1b, 0xbf, 0x1a, 0x45, 0xcb, 0xa5, 0xb4, 0x6e, 0x34, 0x78, 0x46,
	0xb0, 0x4f, 0xa0, 0xe9, 0xc0, 0xf9, 0x89, 0x8c, 0xf5, 0xc2, 0x7e, 0x4b, 0xef, 0xb0, 0xde, 0x0e,
	0xb4, 0x32, 0x7b, 0x68, 0x2c, 0x78, 0xac, 0xd6, 0x28, 0xe5, 0xfd, 0x52, 0x84, 0x5a, 0x4a, 0xfd,
	0x77, 0x83, 0xb9, 0x36, 0xe7, 0x0f, 0x09, 0xe6, 0x9d, 0x9d, 0x7f, 0x50, 0x30, 0xd7, 0xad, 0xb1,
	0xc1, 0x1c, 0x6c, 0xfd, 0x76, 0xdb, 0x29, 0xbc, 0xb9, 0xed, 0x14, 0xfe, 0xbc, 0xed, 0x14, 0x26,
	0x65, 0xfa, 0xe7, 0xeb, 0xd1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x77, 0x5c, 0x14, 0xb6,
	0x09, 0x00, 0x00,
}

func (m *EthDeviceRdmaSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDeviceRdmaSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDeviceRdmaSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PidCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.PidCount))
		i--
		dAtA[i] = 0x50
	}
	if m.AQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.AQCount))
		i--
		dAtA[i] = 0x48
	}
	if m.EQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.EQCount))
		i--
		dAtA[i] = 0x40
	}
	if m.CQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.CQCount))
		i--
		dAtA[i] = 0x38
	}
	if m.RQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.RQCount))
		i--
		dAtA[i] = 0x30
	}
	if m.SQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SQCount))
		i--
		dAtA[i] = 0x28
	}
	if m.AHCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.AHCount))
		i--
		dAtA[i] = 0x20
	}
	if m.KeyCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.KeyCount))
		i--
		dAtA[i] = 0x18
	}
	if m.PteCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.PteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthDevicePcieSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDevicePcieSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDevicePcieSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalVfs != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.TotalVfs))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OpromType) > 0 {
		i -= len(m.OpromType)
		copy(dAtA[i:], m.OpromType)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.OpromType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EthDeviceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDeviceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDeviceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeerName) > 0 {
		i -= len(m.PeerName)
		copy(dAtA[i:], m.PeerName)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.PeerName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.VfDev {
		i--
		if m.VfDev {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.RdmaSpec != nil {
		{
			size, err := m.RdmaSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.PcieSpec != nil {
		{
			size, err := m.PcieSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.MacAddr != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.MacAddr))
		i--
		dAtA[i] = 0x70
	}
	if m.IntrCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.IntrCount))
		i--
		dAtA[i] = 0x68
	}
	if m.AdminQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.AdminQCount))
		i--
		dAtA[i] = 0x60
	}
	if m.EQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.EQCount))
		i--
		dAtA[i] = 0x58
	}
	if m.TxQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.TxQCount))
		i--
		dAtA[i] = 0x50
	}
	if m.RxQCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.RxQCount))
		i--
		dAtA[i] = 0x48
	}
	if m.LifCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.LifCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.QosGroup) > 0 {
		i -= len(m.QosGroup)
		copy(dAtA[i:], m.QosGroup)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.QosGroup)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UplinkPortNumber != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.UplinkPortNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.BarMapSize != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.BarMapSize))
		i--
		dAtA[i] = 0x28
	}
	if m.HostDev {
		i--
		if m.HostDev {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.EthType) > 0 {
		i -= len(m.EthType)
		copy(dAtA[i:], m.EthType)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.EthType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DevUuid != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.DevUuid))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EthDeviceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDeviceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDeviceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RomMemSize != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.RomMemSize))
		i--
		dAtA[i] = 0x40
	}
	if m.RomMemAddr != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.RomMemAddr))
		i--
		dAtA[i] = 0x38
	}
	if m.CmbMemSize != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.CmbMemSize))
		i--
		dAtA[i] = 0x30
	}
	if m.CmbMemAddr != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.CmbMemAddr))
		i--
		dAtA[i] = 0x28
	}
	if m.PortInfoAddr != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.PortInfoAddr))
		i--
		dAtA[i] = 0x20
	}
	if m.RegsMemAddr != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.RegsMemAddr))
		i--
		dAtA[i] = 0x18
	}
	if m.IntrBase != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.IntrBase))
		i--
		dAtA[i] = 0x10
	}
	if m.LifBase != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.LifBase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthDeviceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDeviceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDeviceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *EthVFAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthVFAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthVFAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatsPa != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.StatsPa))
		i--
		dAtA[i] = 0x38
	}
	if m.Linkstate != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Linkstate))
		i--
		dAtA[i] = 0x30
	}
	if m.Trust != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Trust))
		i--
		dAtA[i] = 0x28
	}
	if m.Spoofchk {
		i--
		if m.Spoofchk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Maxrate != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Maxrate))
		i--
		dAtA[i] = 0x18
	}
	if m.Vlanid != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Vlanid))
		i--
		dAtA[i] = 0x10
	}
	if m.Mac != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.Mac))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EthDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EthDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.VFAttrs != nil {
		{
			size, err := m.VFAttrs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FtlDeviceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FtlDeviceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FtlDeviceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SwPollerQDepth != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SwPollerQDepth))
		i--
		dAtA[i] = 0x38
	}
	if m.SwPollers != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SwPollers))
		i--
		dAtA[i] = 0x30
	}
	if m.SessionBurstReschedTimeUs != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SessionBurstReschedTimeUs))
		i--
		dAtA[i] = 0x28
	}
	if m.SessionBurstSize != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SessionBurstSize))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionHwScanners != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.SessionHwScanners))
		i--
		dAtA[i] = 0x18
	}
	if m.LifCount != 0 {
		i = encodeVarintNicmgr(dAtA, i, uint64(m.LifCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNicmgr(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FtlDeviceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FtlDeviceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FtlDeviceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FtlDeviceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FtlDeviceStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FtlDeviceStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FtlDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FtlDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FtlDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNicmgr(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNicmgr(dAtA []byte, offset int, v uint64) int {
	offset -= sovNicmgr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EthDeviceRdmaSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.PteCount != 0 {
		n += 1 + sovNicmgr(uint64(m.PteCount))
	}
	if m.KeyCount != 0 {
		n += 1 + sovNicmgr(uint64(m.KeyCount))
	}
	if m.AHCount != 0 {
		n += 1 + sovNicmgr(uint64(m.AHCount))
	}
	if m.SQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.SQCount))
	}
	if m.RQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.RQCount))
	}
	if m.CQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.CQCount))
	}
	if m.EQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.EQCount))
	}
	if m.AQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.AQCount))
	}
	if m.PidCount != 0 {
		n += 1 + sovNicmgr(uint64(m.PidCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthDevicePcieSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OpromType)
	if l > 0 {
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovNicmgr(uint64(m.Port))
	}
	if m.TotalVfs != 0 {
		n += 1 + sovNicmgr(uint64(m.TotalVfs))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthDeviceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.DevUuid != 0 {
		n += 1 + sovNicmgr(uint64(m.DevUuid))
	}
	l = len(m.EthType)
	if l > 0 {
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.HostDev {
		n += 2
	}
	if m.BarMapSize != 0 {
		n += 1 + sovNicmgr(uint64(m.BarMapSize))
	}
	if m.UplinkPortNumber != 0 {
		n += 1 + sovNicmgr(uint64(m.UplinkPortNumber))
	}
	l = len(m.QosGroup)
	if l > 0 {
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.LifCount != 0 {
		n += 1 + sovNicmgr(uint64(m.LifCount))
	}
	if m.RxQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.RxQCount))
	}
	if m.TxQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.TxQCount))
	}
	if m.EQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.EQCount))
	}
	if m.AdminQCount != 0 {
		n += 1 + sovNicmgr(uint64(m.AdminQCount))
	}
	if m.IntrCount != 0 {
		n += 1 + sovNicmgr(uint64(m.IntrCount))
	}
	if m.MacAddr != 0 {
		n += 1 + sovNicmgr(uint64(m.MacAddr))
	}
	if m.PcieSpec != nil {
		l = m.PcieSpec.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.RdmaSpec != nil {
		l = m.RdmaSpec.Size()
		n += 2 + l + sovNicmgr(uint64(l))
	}
	if m.VfDev {
		n += 3
	}
	l = len(m.PeerName)
	if l > 0 {
		n += 2 + l + sovNicmgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthDeviceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LifBase != 0 {
		n += 1 + sovNicmgr(uint64(m.LifBase))
	}
	if m.IntrBase != 0 {
		n += 1 + sovNicmgr(uint64(m.IntrBase))
	}
	if m.RegsMemAddr != 0 {
		n += 1 + sovNicmgr(uint64(m.RegsMemAddr))
	}
	if m.PortInfoAddr != 0 {
		n += 1 + sovNicmgr(uint64(m.PortInfoAddr))
	}
	if m.CmbMemAddr != 0 {
		n += 1 + sovNicmgr(uint64(m.CmbMemAddr))
	}
	if m.CmbMemSize != 0 {
		n += 1 + sovNicmgr(uint64(m.CmbMemSize))
	}
	if m.RomMemAddr != 0 {
		n += 1 + sovNicmgr(uint64(m.RomMemAddr))
	}
	if m.RomMemSize != 0 {
		n += 1 + sovNicmgr(uint64(m.RomMemSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthDeviceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthVFAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mac != 0 {
		n += 1 + sovNicmgr(uint64(m.Mac))
	}
	if m.Vlanid != 0 {
		n += 1 + sovNicmgr(uint64(m.Vlanid))
	}
	if m.Maxrate != 0 {
		n += 1 + sovNicmgr(uint64(m.Maxrate))
	}
	if m.Spoofchk {
		n += 2
	}
	if m.Trust != 0 {
		n += 1 + sovNicmgr(uint64(m.Trust))
	}
	if m.Linkstate != 0 {
		n += 1 + sovNicmgr(uint64(m.Linkstate))
	}
	if m.StatsPa != 0 {
		n += 1 + sovNicmgr(uint64(m.StatsPa))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EthDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.VFAttrs != nil {
		l = m.VFAttrs.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FtlDeviceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.LifCount != 0 {
		n += 1 + sovNicmgr(uint64(m.LifCount))
	}
	if m.SessionHwScanners != 0 {
		n += 1 + sovNicmgr(uint64(m.SessionHwScanners))
	}
	if m.SessionBurstSize != 0 {
		n += 1 + sovNicmgr(uint64(m.SessionBurstSize))
	}
	if m.SessionBurstReschedTimeUs != 0 {
		n += 1 + sovNicmgr(uint64(m.SessionBurstReschedTimeUs))
	}
	if m.SwPollers != 0 {
		n += 1 + sovNicmgr(uint64(m.SwPollers))
	}
	if m.SwPollerQDepth != 0 {
		n += 1 + sovNicmgr(uint64(m.SwPollerQDepth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FtlDeviceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FtlDeviceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FtlDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovNicmgr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNicmgr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNicmgr(x uint64) (n int) {
	return sovNicmgr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EthDeviceRdmaSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDeviceRdmaSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDeviceRdmaSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PteCount", wireType)
			}
			m.PteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PteCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AHCount", wireType)
			}
			m.AHCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AHCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQCount", wireType)
			}
			m.SQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RQCount", wireType)
			}
			m.RQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CQCount", wireType)
			}
			m.CQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EQCount", wireType)
			}
			m.EQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AQCount", wireType)
			}
			m.AQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PidCount", wireType)
			}
			m.PidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PidCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthDevicePcieSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDevicePcieSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDevicePcieSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVfs", wireType)
			}
			m.TotalVfs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVfs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthDeviceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDeviceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDeviceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevUuid", wireType)
			}
			m.DevUuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevUuid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostDev", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HostDev = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarMapSize", wireType)
			}
			m.BarMapSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarMapSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkPortNumber", wireType)
			}
			m.UplinkPortNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkPortNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QosGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifCount", wireType)
			}
			m.LifCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQCount", wireType)
			}
			m.RxQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxQCount", wireType)
			}
			m.TxQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EQCount", wireType)
			}
			m.EQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminQCount", wireType)
			}
			m.AdminQCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminQCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrCount", wireType)
			}
			m.IntrCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntrCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			m.MacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcieSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PcieSpec == nil {
				m.PcieSpec = &EthDevicePcieSpec{}
			}
			if err := m.PcieSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RdmaSpec == nil {
				m.RdmaSpec = &EthDeviceRdmaSpec{}
			}
			if err := m.RdmaSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VfDev", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VfDev = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthDeviceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDeviceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDeviceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifBase", wireType)
			}
			m.LifBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifBase |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntrBase", wireType)
			}
			m.IntrBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntrBase |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegsMemAddr", wireType)
			}
			m.RegsMemAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegsMemAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortInfoAddr", wireType)
			}
			m.PortInfoAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortInfoAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmbMemAddr", wireType)
			}
			m.CmbMemAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmbMemAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmbMemSize", wireType)
			}
			m.CmbMemSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmbMemSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RomMemAddr", wireType)
			}
			m.RomMemAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RomMemAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RomMemSize", wireType)
			}
			m.RomMemSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RomMemSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthDeviceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDeviceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDeviceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthVFAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthVFAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthVFAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			m.Mac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mac |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlanid", wireType)
			}
			m.Vlanid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlanid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxrate", wireType)
			}
			m.Maxrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxrate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spoofchk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Spoofchk = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trust", wireType)
			}
			m.Trust = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Trust |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linkstate", wireType)
			}
			m.Linkstate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Linkstate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsPa", wireType)
			}
			m.StatsPa = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsPa |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EthDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &EthDeviceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &EthDeviceStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &EthDeviceStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VFAttrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VFAttrs == nil {
				m.VFAttrs = &EthVFAttrs{}
			}
			if err := m.VFAttrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FtlDeviceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FtlDeviceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FtlDeviceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifCount", wireType)
			}
			m.LifCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHwScanners", wireType)
			}
			m.SessionHwScanners = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionHwScanners |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionBurstSize", wireType)
			}
			m.SessionBurstSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionBurstSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionBurstReschedTimeUs", wireType)
			}
			m.SessionBurstReschedTimeUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionBurstReschedTimeUs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwPollers", wireType)
			}
			m.SwPollers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwPollers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwPollerQDepth", wireType)
			}
			m.SwPollerQDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwPollerQDepth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FtlDeviceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FtlDeviceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FtlDeviceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FtlDeviceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FtlDeviceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FtlDeviceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FtlDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FtlDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FtlDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &FtlDeviceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &FtlDeviceStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNicmgr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNicmgr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &FtlDeviceStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNicmgr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNicmgr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNicmgr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNicmgr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNicmgr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNicmgr
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNicmgr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNicmgr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNicmgr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNicmgr
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNicmgr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNicmgr   = fmt.Errorf("proto: integer overflow")
)
