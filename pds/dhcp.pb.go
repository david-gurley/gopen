// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dhcp.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DHCPRelaySpec captures DHCP relay configuration
type DHCPRelaySpec struct {
	// VPC where DHCP server is present in
	VPCId []byte `protobuf:"bytes,1,opt,name=VPCId,proto3" json:"VPCId,omitempty" meta:mandatory`
	// IP address of the DHCP server, agent is relaying requests to
	ServerIP *IPAddress `protobuf:"bytes,2,opt,name=ServerIP,proto3" json:"ServerIP,omitempty" meta:mandatory`
	// IP address of the relay agent, if no IP address is specified local TEP IP
	// (MyTEP IP from device object configuration) will be used
	AgentIP              *IPAddress `protobuf:"bytes,3,opt,name=AgentIP,proto3" json:"AgentIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DHCPRelaySpec) Reset()         { *m = DHCPRelaySpec{} }
func (m *DHCPRelaySpec) String() string { return proto.CompactTextString(m) }
func (*DHCPRelaySpec) ProtoMessage()    {}
func (*DHCPRelaySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{0}
}
func (m *DHCPRelaySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPRelaySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPRelaySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPRelaySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPRelaySpec.Merge(m, src)
}
func (m *DHCPRelaySpec) XXX_Size() int {
	return m.Size()
}
func (m *DHCPRelaySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPRelaySpec.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPRelaySpec proto.InternalMessageInfo

func (m *DHCPRelaySpec) GetVPCId() []byte {
	if m != nil {
		return m.VPCId
	}
	return nil
}

func (m *DHCPRelaySpec) GetServerIP() *IPAddress {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *DHCPRelaySpec) GetAgentIP() *IPAddress {
	if m != nil {
		return m.AgentIP
	}
	return nil
}

// operational status of a DHCP relay policy, if any
type DHCPRelayStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPRelayStatus) Reset()         { *m = DHCPRelayStatus{} }
func (m *DHCPRelayStatus) String() string { return proto.CompactTextString(m) }
func (*DHCPRelayStatus) ProtoMessage()    {}
func (*DHCPRelayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{1}
}
func (m *DHCPRelayStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPRelayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPRelayStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPRelayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPRelayStatus.Merge(m, src)
}
func (m *DHCPRelayStatus) XXX_Size() int {
	return m.Size()
}
func (m *DHCPRelayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPRelayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPRelayStatus proto.InternalMessageInfo

// stats for a DHCP relay policy, if any
type DHCPRelayStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPRelayStats) Reset()         { *m = DHCPRelayStats{} }
func (m *DHCPRelayStats) String() string { return proto.CompactTextString(m) }
func (*DHCPRelayStats) ProtoMessage()    {}
func (*DHCPRelayStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{2}
}
func (m *DHCPRelayStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPRelayStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPRelayStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPRelayStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPRelayStats.Merge(m, src)
}
func (m *DHCPRelayStats) XXX_Size() int {
	return m.Size()
}
func (m *DHCPRelayStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPRelayStats.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPRelayStats proto.InternalMessageInfo

// DHCPProxySpec captures the DHCP proxy/suppression configuration per subnet
type DHCPProxySpec struct {
	// IP address of the (local) DHCP server, this IP address will be
	// used to respond to the DHCP requests from the workloads and is used as
	// the DHCP server identifier
	ServerIP *IPAddress `protobuf:"bytes,1,opt,name=ServerIP,proto3" json:"ServerIP,omitempty" meta:mandatory`
	// MTU to be supplied by the DHCP server to its clients, if non-zero
	MTU uint32 `protobuf:"varint,2,opt,name=MTU,proto3" json:"MTU,omitempty"`
	// IP address of the subnet's gateway sent in DHCP offer
	GatewayIP *IPAddress `protobuf:"bytes,3,opt,name=GatewayIP,proto3" json:"GatewayIP,omitempty"`
	// IP addresses of up to 3 DNS servers sent in DHCP offer
	DNSServerIP []*IPAddress `protobuf:"bytes,4,rep,name=DNSServerIP,proto3" json:"DNSServerIP,omitempty"`
	// IP addresses of up to 3 NTP servers sent in DHCP offer
	NTPServerIP []*IPAddress `protobuf:"bytes,5,rep,name=NTPServerIP,proto3" json:"NTPServerIP,omitempty"`
	// client's Fully Qualified Domain Name (FQDN)
	DomainName string `protobuf:"bytes,6,opt,name=DomainName,proto3" json:"DomainName,omitempty"`
	// bootfile name for the client to use
	BootFileName string `protobuf:"bytes,7,opt,name=BootFileName,proto3" json:"BootFileName,omitempty"`
	// DHCP lease timoeout in seconds
	LeaseTimeout         uint32   `protobuf:"varint,8,opt,name=LeaseTimeout,proto3" json:"LeaseTimeout,omitempty" default=3600`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPProxySpec) Reset()         { *m = DHCPProxySpec{} }
func (m *DHCPProxySpec) String() string { return proto.CompactTextString(m) }
func (*DHCPProxySpec) ProtoMessage()    {}
func (*DHCPProxySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{3}
}
func (m *DHCPProxySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPProxySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPProxySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPProxySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPProxySpec.Merge(m, src)
}
func (m *DHCPProxySpec) XXX_Size() int {
	return m.Size()
}
func (m *DHCPProxySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPProxySpec.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPProxySpec proto.InternalMessageInfo

func (m *DHCPProxySpec) GetServerIP() *IPAddress {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *DHCPProxySpec) GetMTU() uint32 {
	if m != nil {
		return m.MTU
	}
	return 0
}

func (m *DHCPProxySpec) GetGatewayIP() *IPAddress {
	if m != nil {
		return m.GatewayIP
	}
	return nil
}

func (m *DHCPProxySpec) GetDNSServerIP() []*IPAddress {
	if m != nil {
		return m.DNSServerIP
	}
	return nil
}

func (m *DHCPProxySpec) GetNTPServerIP() []*IPAddress {
	if m != nil {
		return m.NTPServerIP
	}
	return nil
}

func (m *DHCPProxySpec) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *DHCPProxySpec) GetBootFileName() string {
	if m != nil {
		return m.BootFileName
	}
	return ""
}

func (m *DHCPProxySpec) GetLeaseTimeout() uint32 {
	if m != nil {
		return m.LeaseTimeout
	}
	return 0
}

// operational status of a DHCP proxy/suppression policy, if any
type DHCPProxyStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPProxyStatus) Reset()         { *m = DHCPProxyStatus{} }
func (m *DHCPProxyStatus) String() string { return proto.CompactTextString(m) }
func (*DHCPProxyStatus) ProtoMessage()    {}
func (*DHCPProxyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{4}
}
func (m *DHCPProxyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPProxyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPProxyStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPProxyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPProxyStatus.Merge(m, src)
}
func (m *DHCPProxyStatus) XXX_Size() int {
	return m.Size()
}
func (m *DHCPProxyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPProxyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPProxyStatus proto.InternalMessageInfo

// stats for a DHCP proxy/suppression policy, if any
type DHCPProxyStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPProxyStats) Reset()         { *m = DHCPProxyStats{} }
func (m *DHCPProxyStats) String() string { return proto.CompactTextString(m) }
func (*DHCPProxyStats) ProtoMessage()    {}
func (*DHCPProxyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{5}
}
func (m *DHCPProxyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPProxyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPProxyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPProxyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPProxyStats.Merge(m, src)
}
func (m *DHCPProxyStats) XXX_Size() int {
	return m.Size()
}
func (m *DHCPProxyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPProxyStats.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPProxyStats proto.InternalMessageInfo

type DHCPPolicySpec struct {
	// unique key/identifier of DHCP policy
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory`
	// DHCP policy is one of DHCP relay or DHCP proxy
	// NOTE: one of them is mandatory
	//
	// Types that are valid to be assigned to RelayOrProxy:
	//	*DHCPPolicySpec_RelaySpec
	//	*DHCPPolicySpec_ProxySpec
	RelayOrProxy         isDHCPPolicySpec_RelayOrProxy `protobuf_oneof:"relay_or_proxy"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *DHCPPolicySpec) Reset()         { *m = DHCPPolicySpec{} }
func (m *DHCPPolicySpec) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicySpec) ProtoMessage()    {}
func (*DHCPPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{6}
}
func (m *DHCPPolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicySpec.Merge(m, src)
}
func (m *DHCPPolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicySpec proto.InternalMessageInfo

type isDHCPPolicySpec_RelayOrProxy interface {
	isDHCPPolicySpec_RelayOrProxy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DHCPPolicySpec_RelaySpec struct {
	RelaySpec *DHCPRelaySpec `protobuf:"bytes,2,opt,name=RelaySpec,proto3,oneof"`
}
type DHCPPolicySpec_ProxySpec struct {
	ProxySpec *DHCPProxySpec `protobuf:"bytes,3,opt,name=ProxySpec,proto3,oneof"`
}

func (*DHCPPolicySpec_RelaySpec) isDHCPPolicySpec_RelayOrProxy() {}
func (*DHCPPolicySpec_ProxySpec) isDHCPPolicySpec_RelayOrProxy() {}

func (m *DHCPPolicySpec) GetRelayOrProxy() isDHCPPolicySpec_RelayOrProxy {
	if m != nil {
		return m.RelayOrProxy
	}
	return nil
}

func (m *DHCPPolicySpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DHCPPolicySpec) GetRelaySpec() *DHCPRelaySpec {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicySpec_RelaySpec); ok {
		return x.RelaySpec
	}
	return nil
}

func (m *DHCPPolicySpec) GetProxySpec() *DHCPProxySpec {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicySpec_ProxySpec); ok {
		return x.ProxySpec
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DHCPPolicySpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DHCPPolicySpec_RelaySpec)(nil),
		(*DHCPPolicySpec_ProxySpec)(nil),
	}
}

// operational status of DHCP policy, if any
type DHCPPolicyStatus struct {
	// Types that are valid to be assigned to RelayOrProxy:
	//	*DHCPPolicyStatus_RelayStatus
	//	*DHCPPolicyStatus_ProxyStatus
	RelayOrProxy         isDHCPPolicyStatus_RelayOrProxy `protobuf_oneof:"relay_or_proxy"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DHCPPolicyStatus) Reset()         { *m = DHCPPolicyStatus{} }
func (m *DHCPPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyStatus) ProtoMessage()    {}
func (*DHCPPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{7}
}
func (m *DHCPPolicyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyStatus.Merge(m, src)
}
func (m *DHCPPolicyStatus) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyStatus proto.InternalMessageInfo

type isDHCPPolicyStatus_RelayOrProxy interface {
	isDHCPPolicyStatus_RelayOrProxy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DHCPPolicyStatus_RelayStatus struct {
	RelayStatus *DHCPRelayStatus `protobuf:"bytes,1,opt,name=RelayStatus,proto3,oneof"`
}
type DHCPPolicyStatus_ProxyStatus struct {
	ProxyStatus *DHCPProxyStatus `protobuf:"bytes,2,opt,name=ProxyStatus,proto3,oneof"`
}

func (*DHCPPolicyStatus_RelayStatus) isDHCPPolicyStatus_RelayOrProxy() {}
func (*DHCPPolicyStatus_ProxyStatus) isDHCPPolicyStatus_RelayOrProxy() {}

func (m *DHCPPolicyStatus) GetRelayOrProxy() isDHCPPolicyStatus_RelayOrProxy {
	if m != nil {
		return m.RelayOrProxy
	}
	return nil
}

func (m *DHCPPolicyStatus) GetRelayStatus() *DHCPRelayStatus {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicyStatus_RelayStatus); ok {
		return x.RelayStatus
	}
	return nil
}

func (m *DHCPPolicyStatus) GetProxyStatus() *DHCPProxyStatus {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicyStatus_ProxyStatus); ok {
		return x.ProxyStatus
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DHCPPolicyStatus) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DHCPPolicyStatus_RelayStatus)(nil),
		(*DHCPPolicyStatus_ProxyStatus)(nil),
	}
}

// stats for DHCP policy, if any
type DHCPPolicyStats struct {
	// Types that are valid to be assigned to RelayOrProxy:
	//	*DHCPPolicyStats_RelayStats
	//	*DHCPPolicyStats_ProxyStats
	RelayOrProxy         isDHCPPolicyStats_RelayOrProxy `protobuf_oneof:"relay_or_proxy"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DHCPPolicyStats) Reset()         { *m = DHCPPolicyStats{} }
func (m *DHCPPolicyStats) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyStats) ProtoMessage()    {}
func (*DHCPPolicyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{8}
}
func (m *DHCPPolicyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyStats.Merge(m, src)
}
func (m *DHCPPolicyStats) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyStats.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyStats proto.InternalMessageInfo

type isDHCPPolicyStats_RelayOrProxy interface {
	isDHCPPolicyStats_RelayOrProxy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DHCPPolicyStats_RelayStats struct {
	RelayStats *DHCPRelayStats `protobuf:"bytes,1,opt,name=RelayStats,proto3,oneof"`
}
type DHCPPolicyStats_ProxyStats struct {
	ProxyStats *DHCPProxyStats `protobuf:"bytes,2,opt,name=ProxyStats,proto3,oneof"`
}

func (*DHCPPolicyStats_RelayStats) isDHCPPolicyStats_RelayOrProxy() {}
func (*DHCPPolicyStats_ProxyStats) isDHCPPolicyStats_RelayOrProxy() {}

func (m *DHCPPolicyStats) GetRelayOrProxy() isDHCPPolicyStats_RelayOrProxy {
	if m != nil {
		return m.RelayOrProxy
	}
	return nil
}

func (m *DHCPPolicyStats) GetRelayStats() *DHCPRelayStats {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicyStats_RelayStats); ok {
		return x.RelayStats
	}
	return nil
}

func (m *DHCPPolicyStats) GetProxyStats() *DHCPProxyStats {
	if x, ok := m.GetRelayOrProxy().(*DHCPPolicyStats_ProxyStats); ok {
		return x.ProxyStats
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DHCPPolicyStats) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DHCPPolicyStats_RelayStats)(nil),
		(*DHCPPolicyStats_ProxyStats)(nil),
	}
}

// DHCP policy object
type DHCPPolicy struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *DHCPPolicySpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *DHCPPolicyStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	Stats                *DHCPPolicyStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DHCPPolicy) Reset()         { *m = DHCPPolicy{} }
func (m *DHCPPolicy) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicy) ProtoMessage()    {}
func (*DHCPPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{9}
}
func (m *DHCPPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicy.Merge(m, src)
}
func (m *DHCPPolicy) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicy proto.InternalMessageInfo

func (m *DHCPPolicy) GetSpec() *DHCPPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DHCPPolicy) GetStatus() *DHCPPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DHCPPolicy) GetStats() *DHCPPolicyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// DHCP policy create and update request
type DHCPPolicyRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// batched requests
	Request              []*DHCPPolicySpec `protobuf:"bytes,2,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DHCPPolicyRequest) Reset()         { *m = DHCPPolicyRequest{} }
func (m *DHCPPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyRequest) ProtoMessage()    {}
func (*DHCPPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{10}
}
func (m *DHCPPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyRequest.Merge(m, src)
}
func (m *DHCPPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyRequest proto.InternalMessageInfo

func (m *DHCPPolicyRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *DHCPPolicyRequest) GetRequest() []*DHCPPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// DHCP policy create and update response
type DHCPPolicyResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response
	Response             []*DHCPPolicyStatus `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DHCPPolicyResponse) Reset()         { *m = DHCPPolicyResponse{} }
func (m *DHCPPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyResponse) ProtoMessage()    {}
func (*DHCPPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{11}
}
func (m *DHCPPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyResponse.Merge(m, src)
}
func (m *DHCPPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyResponse proto.InternalMessageInfo

func (m *DHCPPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DHCPPolicyResponse) GetResponse() []*DHCPPolicyStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// DHCP policy get request
type DHCPPolicyGetRequest struct {
	// id of the DHCP policy policy being queried
	Id                   [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPPolicyGetRequest) Reset()         { *m = DHCPPolicyGetRequest{} }
func (m *DHCPPolicyGetRequest) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyGetRequest) ProtoMessage()    {}
func (*DHCPPolicyGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{12}
}
func (m *DHCPPolicyGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyGetRequest.Merge(m, src)
}
func (m *DHCPPolicyGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyGetRequest proto.InternalMessageInfo

func (m *DHCPPolicyGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// DHCP policy get response
type DHCPPolicyGetResponse struct {
	// API status code
	ApiStatus            ApiStatus     `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*DHCPPolicy `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DHCPPolicyGetResponse) Reset()         { *m = DHCPPolicyGetResponse{} }
func (m *DHCPPolicyGetResponse) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyGetResponse) ProtoMessage()    {}
func (*DHCPPolicyGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{13}
}
func (m *DHCPPolicyGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyGetResponse.Merge(m, src)
}
func (m *DHCPPolicyGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyGetResponse proto.InternalMessageInfo

func (m *DHCPPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DHCPPolicyGetResponse) GetResponse() []*DHCPPolicy {
	if m != nil {
		return m.Response
	}
	return nil
}

// DHCP policy delete request
type DHCPPolicyDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// id of the DHCP policy policy being deleted
	Id                   [][]byte `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPPolicyDeleteRequest) Reset()         { *m = DHCPPolicyDeleteRequest{} }
func (m *DHCPPolicyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyDeleteRequest) ProtoMessage()    {}
func (*DHCPPolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{14}
}
func (m *DHCPPolicyDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyDeleteRequest.Merge(m, src)
}
func (m *DHCPPolicyDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyDeleteRequest proto.InternalMessageInfo

func (m *DHCPPolicyDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *DHCPPolicyDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// DHCP policy delete response
type DHCPPolicyDeleteResponse struct {
	// API status code
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DHCPPolicyDeleteResponse) Reset()         { *m = DHCPPolicyDeleteResponse{} }
func (m *DHCPPolicyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DHCPPolicyDeleteResponse) ProtoMessage()    {}
func (*DHCPPolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b4c6fed4d91e328, []int{15}
}
func (m *DHCPPolicyDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHCPPolicyDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHCPPolicyDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHCPPolicyDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPPolicyDeleteResponse.Merge(m, src)
}
func (m *DHCPPolicyDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DHCPPolicyDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPPolicyDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPPolicyDeleteResponse proto.InternalMessageInfo

func (m *DHCPPolicyDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*DHCPRelaySpec)(nil), "pds.DHCPRelaySpec")
	proto.RegisterType((*DHCPRelayStatus)(nil), "pds.DHCPRelayStatus")
	proto.RegisterType((*DHCPRelayStats)(nil), "pds.DHCPRelayStats")
	proto.RegisterType((*DHCPProxySpec)(nil), "pds.DHCPProxySpec")
	proto.RegisterType((*DHCPProxyStatus)(nil), "pds.DHCPProxyStatus")
	proto.RegisterType((*DHCPProxyStats)(nil), "pds.DHCPProxyStats")
	proto.RegisterType((*DHCPPolicySpec)(nil), "pds.DHCPPolicySpec")
	proto.RegisterType((*DHCPPolicyStatus)(nil), "pds.DHCPPolicyStatus")
	proto.RegisterType((*DHCPPolicyStats)(nil), "pds.DHCPPolicyStats")
	proto.RegisterType((*DHCPPolicy)(nil), "pds.DHCPPolicy")
	proto.RegisterType((*DHCPPolicyRequest)(nil), "pds.DHCPPolicyRequest")
	proto.RegisterType((*DHCPPolicyResponse)(nil), "pds.DHCPPolicyResponse")
	proto.RegisterType((*DHCPPolicyGetRequest)(nil), "pds.DHCPPolicyGetRequest")
	proto.RegisterType((*DHCPPolicyGetResponse)(nil), "pds.DHCPPolicyGetResponse")
	proto.RegisterType((*DHCPPolicyDeleteRequest)(nil), "pds.DHCPPolicyDeleteRequest")
	proto.RegisterType((*DHCPPolicyDeleteResponse)(nil), "pds.DHCPPolicyDeleteResponse")
}

func init() { proto.RegisterFile("dhcp.proto", fileDescriptor_0b4c6fed4d91e328) }

var fileDescriptor_0b4c6fed4d91e328 = []byte{
	// 873 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x6b, 0xa7, 0x69, 0xd2, 0x97, 0x34, 0xc9, 0x4e, 0xb3, 0xbb, 0x21, 0x82, 0x24, 0xf2,
	0x01, 0x45, 0xb0, 0x84, 0x25, 0x0b, 0x08, 0xb1, 0x42, 0x4b, 0x9d, 0x40, 0x13, 0x44, 0x4b, 0x70,
	0x52, 0x24, 0x4e, 0x95, 0x1b, 0x0f, 0xad, 0x51, 0x12, 0x1b, 0x7b, 0xd2, 0x36, 0x1f, 0x83, 0x1b,
	0xdf, 0x80, 0x1b, 0x27, 0x3e, 0x04, 0x17, 0xa4, 0x7e, 0x82, 0x08, 0xf5, 0xd8, 0x63, 0x25, 0xee,
	0x68, 0x3c, 0xe3, 0xf1, 0xc4, 0x71, 0x8b, 0x94, 0x4b, 0xe5, 0x79, 0xf3, 0xff, 0xbd, 0xf9, 0xbf,
	0x79, 0xaf, 0xd3, 0x02, 0x58, 0x17, 0x63, 0xb7, 0xe5, 0x7a, 0x0e, 0x71, 0x50, 0xca, 0xb5, 0xfc,
	0x2a, 0x9c, 0x3b, 0xe7, 0x0e, 0x0b, 0x54, 0x8b, 0x53, 0x4c, 0xcc, 0x0f, 0xe9, 0x0f, 0x1e, 0xc8,
	0x91, 0x85, 0x8b, 0x7d, 0xb6, 0xd0, 0x7e, 0x57, 0x60, 0xaf, 0xdb, 0xeb, 0x0c, 0x0c, 0x3c, 0x31,
	0x17, 0x43, 0x17, 0x8f, 0x51, 0x13, 0xd2, 0x3f, 0x0c, 0x3a, 0x7d, 0xab, 0xa2, 0x34, 0x94, 0x66,
	0x5e, 0x47, 0xf7, 0xcb, 0x7a, 0x81, 0xd2, 0x9f, 0x4f, 0xcd, 0x99, 0x65, 0x12, 0xc7, 0x5b, 0x18,
	0x4c, 0x80, 0xbe, 0x84, 0xec, 0x10, 0x7b, 0x97, 0xd8, 0xeb, 0x0f, 0x2a, 0x6a, 0x43, 0x69, 0xe6,
	0xda, 0xa5, 0x16, 0xcb, 0xdd, 0x1f, 0x1c, 0x58, 0x96, 0x87, 0x7d, 0x3f, 0x11, 0x17, 0x14, 0x7a,
	0x0f, 0x32, 0x07, 0xe7, 0x78, 0x46, 0xfa, 0x83, 0x4a, 0x2a, 0x39, 0x81, 0x11, 0x0a, 0xb4, 0x27,
	0x50, 0x8c, 0x8c, 0x12, 0x93, 0xcc, 0x7d, 0xad, 0x04, 0x85, 0x95, 0x90, 0xaf, 0xfd, 0xab, 0xb2,
	0x72, 0x06, 0x9e, 0x73, 0xcd, 0xca, 0x91, 0x4d, 0x2a, 0x1b, 0x99, 0x2c, 0x41, 0xea, 0x68, 0x74,
	0x12, 0x54, 0xb8, 0x67, 0xd0, 0x4f, 0xd4, 0x82, 0xdd, 0x43, 0x93, 0xe0, 0x2b, 0x73, 0xf1, 0x88,
	0xf1, 0x48, 0x82, 0xda, 0x90, 0xeb, 0x1e, 0x0f, 0x85, 0x8d, 0xed, 0x46, 0x2a, 0x91, 0x90, 0x45,
	0x94, 0x39, 0x1e, 0x0d, 0x04, 0x93, 0x7e, 0x88, 0x91, 0x44, 0xa8, 0x06, 0xd0, 0x75, 0xa6, 0xa6,
	0x3d, 0x3b, 0x36, 0xa7, 0xb8, 0xb2, 0xd3, 0x50, 0x9a, 0xbb, 0x86, 0x14, 0x41, 0x1a, 0xe4, 0x75,
	0xc7, 0x21, 0x5f, 0xdb, 0x13, 0x1c, 0x28, 0x32, 0x81, 0x62, 0x25, 0x86, 0x3e, 0x86, 0xfc, 0xb7,
	0xd8, 0xf4, 0xf1, 0xc8, 0x9e, 0x62, 0x67, 0x4e, 0x2a, 0x59, 0x5a, 0xb6, 0x5e, 0xba, 0x5f, 0xd6,
	0xf3, 0x16, 0xfe, 0xc9, 0x9c, 0x4f, 0xc8, 0x17, 0xaf, 0x3e, 0x7d, 0xf9, 0xd2, 0x58, 0x51, 0x85,
	0xcd, 0x61, 0xd7, 0xbe, 0xd2, 0x1c, 0x11, 0xf2, 0xb5, 0x3f, 0x14, 0x1e, 0x72, 0x26, 0xf6, 0x98,
	0x75, 0x47, 0x03, 0xf5, 0xd1, 0x49, 0x53, 0xfb, 0x16, 0x6a, 0xc3, 0xae, 0x98, 0x4e, 0x3e, 0x67,
	0xa8, 0xe5, 0x5a, 0x7e, 0x6b, 0x65, 0x6e, 0x7b, 0x5b, 0x46, 0x24, 0xa3, 0x8c, 0x18, 0x01, 0xde,
	0xa1, 0x88, 0x11, 0x3b, 0x94, 0x11, 0x0b, 0xbd, 0x04, 0x05, 0x8f, 0x26, 0x38, 0x75, 0xbc, 0x53,
	0x97, 0x46, 0xb5, 0xdf, 0x14, 0x28, 0x49, 0x86, 0x83, 0xba, 0xd0, 0x67, 0x90, 0x93, 0x66, 0x90,
	0xcf, 0x54, 0x39, 0x66, 0x28, 0xd8, 0xeb, 0x6d, 0x19, 0xb2, 0x94, 0x92, 0xd2, 0x05, 0xf1, 0x52,
	0xca, 0x31, 0x5b, 0x82, 0x94, 0x96, 0x09, 0xd6, 0x7e, 0x55, 0xf8, 0x8d, 0x0b, 0x6b, 0x3e, 0xfa,
	0x04, 0x20, 0xfa, 0x55, 0xe0, 0xc6, 0xf6, 0xd7, 0x8d, 0xd1, 0xec, 0x92, 0x90, 0x62, 0x51, 0x93,
	0xb8, 0xab, 0xfd, 0x75, 0x57, 0x01, 0x16, 0xad, 0x12, 0x3c, 0xfd, 0xad, 0x02, 0x44, 0x9e, 0xd0,
	0x6b, 0xc8, 0x8e, 0x16, 0x2e, 0x3e, 0xc2, 0xc4, 0xe4, 0x66, 0x0a, 0xad, 0xe0, 0x19, 0x0a, 0xa3,
	0x7a, 0xf1, 0x66, 0x59, 0x57, 0xee, 0x96, 0xf5, 0xcc, 0x0b, 0x7b, 0x36, 0xb1, 0x67, 0xd8, 0x10,
	0x00, 0x7a, 0x03, 0x99, 0xef, 0xce, 0x7e, 0x0e, 0x58, 0xe6, 0x68, 0x8f, 0xb1, 0x3c, 0xa8, 0x3f,
	0xe3, 0x68, 0x30, 0x30, 0x2f, 0x9c, 0xa9, 0x4d, 0xf0, 0xd4, 0x25, 0x0b, 0x23, 0xa4, 0xd0, 0x6b,
	0xd8, 0x96, 0x9a, 0x2f, 0xd5, 0x23, 0x86, 0x4f, 0x47, 0x94, 0xf7, 0x5d, 0x3c, 0x96, 0xf8, 0x00,
	0x42, 0x1d, 0xd8, 0xe1, 0x4d, 0xda, 0x0e, 0xf0, 0xa7, 0x71, 0x9c, 0xb5, 0xa5, 0x7c, 0xb7, 0xac,
	0x97, 0xfc, 0xe0, 0x5b, 0x4a, 0xc1, 0x51, 0xf4, 0x06, 0xd2, 0xec, 0x4a, 0xd3, 0xf1, 0x46, 0x47,
	0x3d, 0xd3, 0xf7, 0xef, 0x96, 0xf5, 0x22, 0x4d, 0x21, 0x67, 0x60, 0x9c, 0xe6, 0xc1, 0x93, 0x48,
	0x6e, 0xe0, 0x5f, 0xe6, 0xd8, 0x27, 0xf4, 0xed, 0xd1, 0x4d, 0x32, 0xbe, 0xe8, 0x90, 0x6b, 0x12,
	0x7b, 0xd0, 0x44, 0xdc, 0x88, 0x24, 0xe8, 0x03, 0xc8, 0x70, 0xb4, 0xa2, 0x06, 0x6f, 0x48, 0xd2,
	0x55, 0x18, 0xa1, 0x46, 0xbb, 0x02, 0x24, 0x9f, 0xe9, 0xbb, 0xce, 0xcc, 0xc7, 0xf4, 0xd0, 0x03,
	0xd7, 0x96, 0x26, 0xbe, 0x20, 0x0e, 0x15, 0x71, 0x23, 0x92, 0xa0, 0x8f, 0x20, 0x1b, 0xb2, 0xfc,
	0xd4, 0xe4, 0x1b, 0x34, 0x84, 0x4c, 0x7b, 0x17, 0xca, 0xd1, 0xee, 0x21, 0x26, 0x61, 0xbd, 0x05,
	0xfe, 0x42, 0xa4, 0x9a, 0x79, 0xfa, 0x1a, 0x68, 0x04, 0x9e, 0xc6, 0x74, 0x1b, 0x7a, 0x7c, 0x7f,
	0xcd, 0x63, 0x31, 0xe6, 0x51, 0x72, 0xf7, 0x23, 0x3c, 0x8f, 0xe2, 0x5d, 0x3c, 0xc1, 0x04, 0x6f,
	0xda, 0x10, 0x56, 0x90, 0x2a, 0x0a, 0xfa, 0x06, 0x2a, 0xeb, 0xa9, 0x93, 0x6b, 0x4a, 0xfd, 0x4f,
	0x4d, 0xed, 0x3f, 0x55, 0xc8, 0xd0, 0x64, 0xc3, 0xcb, 0x31, 0xfa, 0x4a, 0x7e, 0xbb, 0x3a, 0x1e,
	0x36, 0x09, 0x46, 0xcf, 0xe2, 0x15, 0xb2, 0x1a, 0xaa, 0xcf, 0xd7, 0xe2, 0xbc, 0xee, 0xad, 0xd5,
	0x34, 0x27, 0xae, 0xb5, 0x61, 0x9a, 0x1e, 0xff, 0xbb, 0x1c, 0xb6, 0x0d, 0xbd, 0x15, 0xd3, 0x46,
	0x2d, 0xaf, 0x56, 0x93, 0xb6, 0x44, 0xa6, 0xef, 0x65, 0x43, 0xec, 0xbe, 0xd0, 0xdb, 0x31, 0x62,
	0xa5, 0x43, 0xd5, 0x77, 0x1e, 0xd8, 0x0d, 0x53, 0xea, 0xf9, 0xbf, 0x6e, 0x6b, 0xca, 0xcd, 0x6d,
	0x4d, 0xf9, 0xe7, 0xb6, 0xa6, 0x9c, 0xed, 0x04, 0xff, 0x19, 0xbd, 0xfa, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x97, 0x1e, 0x6e, 0xca, 0x56, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DHCPSvcClient is the client API for DHCPSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPSvcClient interface {
	DHCPPolicyCreate(ctx context.Context, in *DHCPPolicyRequest, opts ...grpc.CallOption) (*DHCPPolicyResponse, error)
	DHCPPolicyUpdate(ctx context.Context, in *DHCPPolicyRequest, opts ...grpc.CallOption) (*DHCPPolicyResponse, error)
	DHCPPolicyGet(ctx context.Context, in *DHCPPolicyGetRequest, opts ...grpc.CallOption) (*DHCPPolicyGetResponse, error)
	DHCPPolicyDelete(ctx context.Context, in *DHCPPolicyDeleteRequest, opts ...grpc.CallOption) (*DHCPPolicyDeleteResponse, error)
}

type dHCPSvcClient struct {
	cc *grpc.ClientConn
}

func NewDHCPSvcClient(cc *grpc.ClientConn) DHCPSvcClient {
	return &dHCPSvcClient{cc}
}

func (c *dHCPSvcClient) DHCPPolicyCreate(ctx context.Context, in *DHCPPolicyRequest, opts ...grpc.CallOption) (*DHCPPolicyResponse, error) {
	out := new(DHCPPolicyResponse)
	err := c.cc.Invoke(ctx, "/pds.DHCPSvc/DHCPPolicyCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPSvcClient) DHCPPolicyUpdate(ctx context.Context, in *DHCPPolicyRequest, opts ...grpc.CallOption) (*DHCPPolicyResponse, error) {
	out := new(DHCPPolicyResponse)
	err := c.cc.Invoke(ctx, "/pds.DHCPSvc/DHCPPolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPSvcClient) DHCPPolicyGet(ctx context.Context, in *DHCPPolicyGetRequest, opts ...grpc.CallOption) (*DHCPPolicyGetResponse, error) {
	out := new(DHCPPolicyGetResponse)
	err := c.cc.Invoke(ctx, "/pds.DHCPSvc/DHCPPolicyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPSvcClient) DHCPPolicyDelete(ctx context.Context, in *DHCPPolicyDeleteRequest, opts ...grpc.CallOption) (*DHCPPolicyDeleteResponse, error) {
	out := new(DHCPPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.DHCPSvc/DHCPPolicyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPSvcServer is the server API for DHCPSvc service.
type DHCPSvcServer interface {
	DHCPPolicyCreate(context.Context, *DHCPPolicyRequest) (*DHCPPolicyResponse, error)
	DHCPPolicyUpdate(context.Context, *DHCPPolicyRequest) (*DHCPPolicyResponse, error)
	DHCPPolicyGet(context.Context, *DHCPPolicyGetRequest) (*DHCPPolicyGetResponse, error)
	DHCPPolicyDelete(context.Context, *DHCPPolicyDeleteRequest) (*DHCPPolicyDeleteResponse, error)
}

// UnimplementedDHCPSvcServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPSvcServer struct {
}

func (*UnimplementedDHCPSvcServer) DHCPPolicyCreate(ctx context.Context, req *DHCPPolicyRequest) (*DHCPPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHCPPolicyCreate not implemented")
}
func (*UnimplementedDHCPSvcServer) DHCPPolicyUpdate(ctx context.Context, req *DHCPPolicyRequest) (*DHCPPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHCPPolicyUpdate not implemented")
}
func (*UnimplementedDHCPSvcServer) DHCPPolicyGet(ctx context.Context, req *DHCPPolicyGetRequest) (*DHCPPolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHCPPolicyGet not implemented")
}
func (*UnimplementedDHCPSvcServer) DHCPPolicyDelete(ctx context.Context, req *DHCPPolicyDeleteRequest) (*DHCPPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHCPPolicyDelete not implemented")
}

func RegisterDHCPSvcServer(s *grpc.Server, srv DHCPSvcServer) {
	s.RegisterService(&_DHCPSvc_serviceDesc, srv)
}

func _DHCPSvc_DHCPPolicyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPSvcServer).DHCPPolicyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.DHCPSvc/DHCPPolicyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPSvcServer).DHCPPolicyCreate(ctx, req.(*DHCPPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPSvc_DHCPPolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPSvcServer).DHCPPolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.DHCPSvc/DHCPPolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPSvcServer).DHCPPolicyUpdate(ctx, req.(*DHCPPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPSvc_DHCPPolicyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPPolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPSvcServer).DHCPPolicyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.DHCPSvc/DHCPPolicyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPSvcServer).DHCPPolicyGet(ctx, req.(*DHCPPolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPSvc_DHCPPolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHCPPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPSvcServer).DHCPPolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.DHCPSvc/DHCPPolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPSvcServer).DHCPPolicyDelete(ctx, req.(*DHCPPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.DHCPSvc",
	HandlerType: (*DHCPSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DHCPPolicyCreate",
			Handler:    _DHCPSvc_DHCPPolicyCreate_Handler,
		},
		{
			MethodName: "DHCPPolicyUpdate",
			Handler:    _DHCPSvc_DHCPPolicyUpdate_Handler,
		},
		{
			MethodName: "DHCPPolicyGet",
			Handler:    _DHCPSvc_DHCPPolicyGet_Handler,
		},
		{
			MethodName: "DHCPPolicyDelete",
			Handler:    _DHCPSvc_DHCPPolicyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}

func (m *DHCPRelaySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPRelaySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPRelaySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AgentIP != nil {
		{
			size, err := m.AgentIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerIP != nil {
		{
			size, err := m.ServerIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VPCId) > 0 {
		i -= len(m.VPCId)
		copy(dAtA[i:], m.VPCId)
		i = encodeVarintDhcp(dAtA, i, uint64(len(m.VPCId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPRelayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPRelayStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPRelayStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DHCPRelayStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPRelayStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPRelayStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DHCPProxySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPProxySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPProxySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaseTimeout != 0 {
		i = encodeVarintDhcp(dAtA, i, uint64(m.LeaseTimeout))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BootFileName) > 0 {
		i -= len(m.BootFileName)
		copy(dAtA[i:], m.BootFileName)
		i = encodeVarintDhcp(dAtA, i, uint64(len(m.BootFileName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DomainName) > 0 {
		i -= len(m.DomainName)
		copy(dAtA[i:], m.DomainName)
		i = encodeVarintDhcp(dAtA, i, uint64(len(m.DomainName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NTPServerIP) > 0 {
		for iNdEx := len(m.NTPServerIP) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NTPServerIP[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDhcp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.DNSServerIP) > 0 {
		for iNdEx := len(m.DNSServerIP) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DNSServerIP[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDhcp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GatewayIP != nil {
		{
			size, err := m.GatewayIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MTU != 0 {
		i = encodeVarintDhcp(dAtA, i, uint64(m.MTU))
		i--
		dAtA[i] = 0x10
	}
	if m.ServerIP != nil {
		{
			size, err := m.ServerIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPProxyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPProxyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPProxyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DHCPProxyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPProxyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPProxyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelayOrProxy != nil {
		{
			size := m.RelayOrProxy.Size()
			i -= size
			if _, err := m.RelayOrProxy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDhcp(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicySpec_RelaySpec) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicySpec_RelaySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RelaySpec != nil {
		{
			size, err := m.RelaySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicySpec_ProxySpec) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicySpec_ProxySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxySpec != nil {
		{
			size, err := m.ProxySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelayOrProxy != nil {
		{
			size := m.RelayOrProxy.Size()
			i -= size
			if _, err := m.RelayOrProxy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyStatus_RelayStatus) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicyStatus_RelayStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RelayStatus != nil {
		{
			size, err := m.RelayStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicyStatus_ProxyStatus) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicyStatus_ProxyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyStatus != nil {
		{
			size, err := m.ProxyStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelayOrProxy != nil {
		{
			size := m.RelayOrProxy.Size()
			i -= size
			if _, err := m.RelayOrProxy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyStats_RelayStats) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicyStats_RelayStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RelayStats != nil {
		{
			size, err := m.RelayStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicyStats_ProxyStats) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *DHCPPolicyStats_ProxyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyStats != nil {
		{
			size, err := m.ProxyStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DHCPPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDhcp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDhcp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintDhcp(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintDhcp(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDhcp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintDhcp(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintDhcp(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDhcp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHCPPolicyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHCPPolicyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHCPPolicyDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA19 := make([]byte, len(m.ApiStatus)*10)
		var j18 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintDhcp(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDhcp(dAtA []byte, offset int, v uint64) int {
	offset -= sovDhcp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DHCPRelaySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VPCId)
	if l > 0 {
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.ServerIP != nil {
		l = m.ServerIP.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.AgentIP != nil {
		l = m.AgentIP.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPRelayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPRelayStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPProxySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerIP != nil {
		l = m.ServerIP.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.MTU != 0 {
		n += 1 + sovDhcp(uint64(m.MTU))
	}
	if m.GatewayIP != nil {
		l = m.GatewayIP.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if len(m.DNSServerIP) > 0 {
		for _, e := range m.DNSServerIP {
			l = e.Size()
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if len(m.NTPServerIP) > 0 {
		for _, e := range m.NTPServerIP {
			l = e.Size()
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovDhcp(uint64(l))
	}
	l = len(m.BootFileName)
	if l > 0 {
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.LeaseTimeout != 0 {
		n += 1 + sovDhcp(uint64(m.LeaseTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPProxyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPProxyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.RelayOrProxy != nil {
		n += m.RelayOrProxy.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicySpec_RelaySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelaySpec != nil {
		l = m.RelaySpec.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicySpec_ProxySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxySpec != nil {
		l = m.ProxySpec.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayOrProxy != nil {
		n += m.RelayOrProxy.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyStatus_RelayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayStatus != nil {
		l = m.RelayStatus.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicyStatus_ProxyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyStatus != nil {
		l = m.ProxyStatus.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayOrProxy != nil {
		n += m.RelayOrProxy.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyStats_RelayStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelayStats != nil {
		l = m.RelayStats.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicyStats_ProxyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyStats != nil {
		l = m.ProxyStats.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	return n
}
func (m *DHCPPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDhcp(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDhcp(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovDhcp(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovDhcp(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHCPPolicyDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovDhcp(uint64(e))
		}
		n += 1 + sovDhcp(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDhcp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDhcp(x uint64) (n int) {
	return sovDhcp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DHCPRelaySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPRelaySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPRelaySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPCId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPCId = append(m.VPCId[:0], dAtA[iNdEx:postIndex]...)
			if m.VPCId == nil {
				m.VPCId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIP == nil {
				m.ServerIP = &IPAddress{}
			}
			if err := m.ServerIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AgentIP == nil {
				m.AgentIP = &IPAddress{}
			}
			if err := m.AgentIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPRelayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPRelayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPRelayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPRelayStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPRelayStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPRelayStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPProxySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPProxySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPProxySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIP == nil {
				m.ServerIP = &IPAddress{}
			}
			if err := m.ServerIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTU", wireType)
			}
			m.MTU = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTU |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayIP == nil {
				m.GatewayIP = &IPAddress{}
			}
			if err := m.GatewayIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSServerIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSServerIP = append(m.DNSServerIP, &IPAddress{})
			if err := m.DNSServerIP[len(m.DNSServerIP)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTPServerIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTPServerIP = append(m.NTPServerIP, &IPAddress{})
			if err := m.NTPServerIP[len(m.NTPServerIP)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootFileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BootFileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseTimeout", wireType)
			}
			m.LeaseTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPProxyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPProxyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPProxyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPProxyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPProxyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPProxyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelaySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPRelaySpec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicySpec_RelaySpec{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPProxySpec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicySpec_ProxySpec{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPRelayStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicyStatus_RelayStatus{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPProxyStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicyStatus_ProxyStatus{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPRelayStats{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicyStats_RelayStats{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DHCPProxyStats{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RelayOrProxy = &DHCPPolicyStats_ProxyStats{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &DHCPPolicySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &DHCPPolicyStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &DHCPPolicyStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &DHCPPolicySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &DHCPPolicyStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &DHCPPolicy{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDhcp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDhcp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHCPPolicyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHCPPolicyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHCPPolicyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDhcp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDhcp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDhcp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDhcp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDhcp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDhcp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDhcp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDhcp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDhcp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDhcp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDhcp
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDhcp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDhcp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDhcp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDhcp
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDhcp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDhcp   = fmt.Errorf("proto: integer overflow")
)
