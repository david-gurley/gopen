// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vmotion.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VmotionType int32

const (
	VmotionType_VMOTION_TYPE_NONE VmotionType = 0
	// vmotion type on new DSC where the VM moved in
	VmotionType_VMOTION_TYPE_MOVE_IN VmotionType = 1
	// vmotion type on old DSC from which the VM moved out
	VmotionType_VMOTION_TYPE_MOVE_OUT VmotionType = 2
)

var VmotionType_name = map[int32]string{
	0: "VMOTION_TYPE_NONE",
	1: "VMOTION_TYPE_MOVE_IN",
	2: "VMOTION_TYPE_MOVE_OUT",
}

var VmotionType_value = map[string]int32{
	"VMOTION_TYPE_NONE":     0,
	"VMOTION_TYPE_MOVE_IN":  1,
	"VMOTION_TYPE_MOVE_OUT": 2,
}

func (x VmotionType) String() string {
	return proto.EnumName(VmotionType_name, int32(x))
}

func (VmotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{0}
}

type VmotionState int32

const (
	VmotionState_VMOTION_STATE_NONE VmotionState = 0
	// vmotion processing is in progress
	VmotionState_VMOTION_STATE_IN_PROGRESS VmotionState = 1
	// vmotion processing completed successfully
	VmotionState_VMOTION_STATE_COMPLETED VmotionState = 2
	// vmotion processing failed
	VmotionState_VMOTION_STATE_FAILED VmotionState = 3
	// vmotion processing was aborted
	VmotionState_VMOTION_STATE_ABORTED VmotionState = 4
)

var VmotionState_name = map[int32]string{
	0: "VMOTION_STATE_NONE",
	1: "VMOTION_STATE_IN_PROGRESS",
	2: "VMOTION_STATE_COMPLETED",
	3: "VMOTION_STATE_FAILED",
	4: "VMOTION_STATE_ABORTED",
}

var VmotionState_value = map[string]int32{
	"VMOTION_STATE_NONE":        0,
	"VMOTION_STATE_IN_PROGRESS": 1,
	"VMOTION_STATE_COMPLETED":   2,
	"VMOTION_STATE_FAILED":      3,
	"VMOTION_STATE_ABORTED":     4,
}

func (x VmotionState) String() string {
	return proto.EnumName(VmotionState_name, int32(x))
}

func (VmotionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{1}
}

// VmotionEpCreateSpec is required when VmotionType is VMOTION_TYPE_MOVE_IN
type VmotionEpCreateSpec struct {
	Vnic                 *VnicSpec      `protobuf:"bytes,1,opt,name=Vnic,proto3" json:"Vnic,omitempty" meta:mandatory`
	MappingsToDelete     [][]byte       `protobuf:"bytes,2,rep,name=MappingsToDelete,proto3" json:"MappingsToDelete,omitempty"`
	MappingsToCreate     []*MappingSpec `protobuf:"bytes,3,rep,name=MappingsToCreate,proto3" json:"MappingsToCreate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VmotionEpCreateSpec) Reset()         { *m = VmotionEpCreateSpec{} }
func (m *VmotionEpCreateSpec) String() string { return proto.CompactTextString(m) }
func (*VmotionEpCreateSpec) ProtoMessage()    {}
func (*VmotionEpCreateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{0}
}
func (m *VmotionEpCreateSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionEpCreateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionEpCreateSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionEpCreateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionEpCreateSpec.Merge(m, src)
}
func (m *VmotionEpCreateSpec) XXX_Size() int {
	return m.Size()
}
func (m *VmotionEpCreateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionEpCreateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionEpCreateSpec proto.InternalMessageInfo

func (m *VmotionEpCreateSpec) GetVnic() *VnicSpec {
	if m != nil {
		return m.Vnic
	}
	return nil
}

func (m *VmotionEpCreateSpec) GetMappingsToDelete() [][]byte {
	if m != nil {
		return m.MappingsToDelete
	}
	return nil
}

func (m *VmotionEpCreateSpec) GetMappingsToCreate() []*MappingSpec {
	if m != nil {
		return m.MappingsToCreate
	}
	return nil
}

// VmotionEpDeleteSpec is required when VmotionType is VMOTION_TYPE_MOVE_OUT
type VmotionEpDeleteSpec struct {
	Vnic                 []byte         `protobuf:"bytes,1,opt,name=Vnic,proto3" json:"Vnic,omitempty" meta:mandatory`
	MappingsToDelete     [][]byte       `protobuf:"bytes,2,rep,name=MappingsToDelete,proto3" json:"MappingsToDelete,omitempty"`
	MappingsToCreate     []*MappingSpec `protobuf:"bytes,3,rep,name=MappingsToCreate,proto3" json:"MappingsToCreate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VmotionEpDeleteSpec) Reset()         { *m = VmotionEpDeleteSpec{} }
func (m *VmotionEpDeleteSpec) String() string { return proto.CompactTextString(m) }
func (*VmotionEpDeleteSpec) ProtoMessage()    {}
func (*VmotionEpDeleteSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{1}
}
func (m *VmotionEpDeleteSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionEpDeleteSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionEpDeleteSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionEpDeleteSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionEpDeleteSpec.Merge(m, src)
}
func (m *VmotionEpDeleteSpec) XXX_Size() int {
	return m.Size()
}
func (m *VmotionEpDeleteSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionEpDeleteSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionEpDeleteSpec proto.InternalMessageInfo

func (m *VmotionEpDeleteSpec) GetVnic() []byte {
	if m != nil {
		return m.Vnic
	}
	return nil
}

func (m *VmotionEpDeleteSpec) GetMappingsToDelete() [][]byte {
	if m != nil {
		return m.MappingsToDelete
	}
	return nil
}

func (m *VmotionEpDeleteSpec) GetMappingsToCreate() []*MappingSpec {
	if m != nil {
		return m.MappingsToCreate
	}
	return nil
}

// VmotionSpec captures details of vmotion event
type VmotionSpec struct {
	// unique identifier that is valid while vmotion processing is in progress
	// this is not valid after VMOTION_STATE_COMPLETED or VMOTION_STATE_FAILED is
	// returned as response to VmotionGet API
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory`
	// vmotion type, whether VM is moved in or moved out
	Type VmotionType `protobuf:"varint,2,opt,name=Type,proto3,enum=pds.VmotionType" json:"Type,omitempty" meta:mandatory`
	// tunnel id of the remote TEP where the VM moved from or is moving to
	// or the IP address of peer DSC, if tunnel id is provided, remote IP from
	// the tunnel spec is used to connect to peer DSC, else the specified IP address
	// is used
	//
	// Types that are valid to be assigned to PeerInfo:
	//	*VmotionSpec_Tunnel
	//	*VmotionSpec_PeerIP
	PeerInfo isVmotionSpec_PeerInfo `protobuf_oneof:"peer_info"`
	// Types that are valid to be assigned to CreateOrDelete:
	//	*VmotionSpec_CreateSpec
	//	*VmotionSpec_DeleteSpec
	CreateOrDelete       isVmotionSpec_CreateOrDelete `protobuf_oneof:"create_or_delete"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *VmotionSpec) Reset()         { *m = VmotionSpec{} }
func (m *VmotionSpec) String() string { return proto.CompactTextString(m) }
func (*VmotionSpec) ProtoMessage()    {}
func (*VmotionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{2}
}
func (m *VmotionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionSpec.Merge(m, src)
}
func (m *VmotionSpec) XXX_Size() int {
	return m.Size()
}
func (m *VmotionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionSpec proto.InternalMessageInfo

type isVmotionSpec_PeerInfo interface {
	isVmotionSpec_PeerInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isVmotionSpec_CreateOrDelete interface {
	isVmotionSpec_CreateOrDelete()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VmotionSpec_Tunnel struct {
	Tunnel []byte `protobuf:"bytes,3,opt,name=Tunnel,proto3,oneof"`
}
type VmotionSpec_PeerIP struct {
	PeerIP *IPAddress `protobuf:"bytes,4,opt,name=PeerIP,proto3,oneof"`
}
type VmotionSpec_CreateSpec struct {
	CreateSpec *VmotionEpCreateSpec `protobuf:"bytes,5,opt,name=CreateSpec,proto3,oneof"`
}
type VmotionSpec_DeleteSpec struct {
	DeleteSpec *VmotionEpDeleteSpec `protobuf:"bytes,6,opt,name=DeleteSpec,proto3,oneof"`
}

func (*VmotionSpec_Tunnel) isVmotionSpec_PeerInfo()           {}
func (*VmotionSpec_PeerIP) isVmotionSpec_PeerInfo()           {}
func (*VmotionSpec_CreateSpec) isVmotionSpec_CreateOrDelete() {}
func (*VmotionSpec_DeleteSpec) isVmotionSpec_CreateOrDelete() {}

func (m *VmotionSpec) GetPeerInfo() isVmotionSpec_PeerInfo {
	if m != nil {
		return m.PeerInfo
	}
	return nil
}
func (m *VmotionSpec) GetCreateOrDelete() isVmotionSpec_CreateOrDelete {
	if m != nil {
		return m.CreateOrDelete
	}
	return nil
}

func (m *VmotionSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VmotionSpec) GetType() VmotionType {
	if m != nil {
		return m.Type
	}
	return VmotionType_VMOTION_TYPE_NONE
}

func (m *VmotionSpec) GetTunnel() []byte {
	if x, ok := m.GetPeerInfo().(*VmotionSpec_Tunnel); ok {
		return x.Tunnel
	}
	return nil
}

func (m *VmotionSpec) GetPeerIP() *IPAddress {
	if x, ok := m.GetPeerInfo().(*VmotionSpec_PeerIP); ok {
		return x.PeerIP
	}
	return nil
}

func (m *VmotionSpec) GetCreateSpec() *VmotionEpCreateSpec {
	if x, ok := m.GetCreateOrDelete().(*VmotionSpec_CreateSpec); ok {
		return x.CreateSpec
	}
	return nil
}

func (m *VmotionSpec) GetDeleteSpec() *VmotionEpDeleteSpec {
	if x, ok := m.GetCreateOrDelete().(*VmotionSpec_DeleteSpec); ok {
		return x.DeleteSpec
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VmotionSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VmotionSpec_Tunnel)(nil),
		(*VmotionSpec_PeerIP)(nil),
		(*VmotionSpec_CreateSpec)(nil),
		(*VmotionSpec_DeleteSpec)(nil),
	}
}

type VmotionStatus struct {
	State                VmotionState `protobuf:"varint,1,opt,name=State,proto3,enum=pds.VmotionState" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VmotionStatus) Reset()         { *m = VmotionStatus{} }
func (m *VmotionStatus) String() string { return proto.CompactTextString(m) }
func (*VmotionStatus) ProtoMessage()    {}
func (*VmotionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{3}
}
func (m *VmotionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionStatus.Merge(m, src)
}
func (m *VmotionStatus) XXX_Size() int {
	return m.Size()
}
func (m *VmotionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionStatus proto.InternalMessageInfo

func (m *VmotionStatus) GetState() VmotionState {
	if m != nil {
		return m.State
	}
	return VmotionState_VMOTION_STATE_NONE
}

type VmotionStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmotionStats) Reset()         { *m = VmotionStats{} }
func (m *VmotionStats) String() string { return proto.CompactTextString(m) }
func (*VmotionStats) ProtoMessage()    {}
func (*VmotionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{4}
}
func (m *VmotionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionStats.Merge(m, src)
}
func (m *VmotionStats) XXX_Size() int {
	return m.Size()
}
func (m *VmotionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionStats.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionStats proto.InternalMessageInfo

type Vmotion struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *VmotionSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *VmotionStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	Stats                *VmotionStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Vmotion) Reset()         { *m = Vmotion{} }
func (m *Vmotion) String() string { return proto.CompactTextString(m) }
func (*Vmotion) ProtoMessage()    {}
func (*Vmotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{5}
}
func (m *Vmotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vmotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vmotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vmotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vmotion.Merge(m, src)
}
func (m *Vmotion) XXX_Size() int {
	return m.Size()
}
func (m *Vmotion) XXX_DiscardUnknown() {
	xxx_messageInfo_Vmotion.DiscardUnknown(m)
}

var xxx_messageInfo_Vmotion proto.InternalMessageInfo

func (m *Vmotion) GetSpec() *VmotionSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Vmotion) GetStatus() *VmotionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Vmotion) GetStats() *VmotionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// vmotion create request
type VmotionRequest struct {
	// optional batch context, if this request is part of a batch of API calls
	BatchCtxt            *BatchCtxt     `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	Request              []*VmotionSpec `protobuf:"bytes,2,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VmotionRequest) Reset()         { *m = VmotionRequest{} }
func (m *VmotionRequest) String() string { return proto.CompactTextString(m) }
func (*VmotionRequest) ProtoMessage()    {}
func (*VmotionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{6}
}
func (m *VmotionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionRequest.Merge(m, src)
}
func (m *VmotionRequest) XXX_Size() int {
	return m.Size()
}
func (m *VmotionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionRequest proto.InternalMessageInfo

func (m *VmotionRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VmotionRequest) GetRequest() []*VmotionSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// vmotion create response
type VmotionResponse struct {
	ApiStatus            ApiStatus        `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*VmotionStatus `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VmotionResponse) Reset()         { *m = VmotionResponse{} }
func (m *VmotionResponse) String() string { return proto.CompactTextString(m) }
func (*VmotionResponse) ProtoMessage()    {}
func (*VmotionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{7}
}
func (m *VmotionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionResponse.Merge(m, src)
}
func (m *VmotionResponse) XXX_Size() int {
	return m.Size()
}
func (m *VmotionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionResponse proto.InternalMessageInfo

func (m *VmotionResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VmotionResponse) GetResponse() []*VmotionStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// vmotion get request
type VmotionGetRequest struct {
	Id                   [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VmotionGetRequest) Reset()         { *m = VmotionGetRequest{} }
func (m *VmotionGetRequest) String() string { return proto.CompactTextString(m) }
func (*VmotionGetRequest) ProtoMessage()    {}
func (*VmotionGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{8}
}
func (m *VmotionGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionGetRequest.Merge(m, src)
}
func (m *VmotionGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *VmotionGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionGetRequest proto.InternalMessageInfo

func (m *VmotionGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// vmotion get response
type VmotionGetResponse struct {
	ApiStatus            ApiStatus  `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*Vmotion `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VmotionGetResponse) Reset()         { *m = VmotionGetResponse{} }
func (m *VmotionGetResponse) String() string { return proto.CompactTextString(m) }
func (*VmotionGetResponse) ProtoMessage()    {}
func (*VmotionGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{9}
}
func (m *VmotionGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionGetResponse.Merge(m, src)
}
func (m *VmotionGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *VmotionGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionGetResponse proto.InternalMessageInfo

func (m *VmotionGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VmotionGetResponse) GetResponse() []*Vmotion {
	if m != nil {
		return m.Response
	}
	return nil
}

// vmotion delete request
type VmotionDeleteRequest struct {
	// optional batch context, if this request is part of a batch of API calls
	BatchCtxt            *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	Id                   [][]byte   `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VmotionDeleteRequest) Reset()         { *m = VmotionDeleteRequest{} }
func (m *VmotionDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*VmotionDeleteRequest) ProtoMessage()    {}
func (*VmotionDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{10}
}
func (m *VmotionDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionDeleteRequest.Merge(m, src)
}
func (m *VmotionDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *VmotionDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionDeleteRequest proto.InternalMessageInfo

func (m *VmotionDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VmotionDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// vmotion delete response
type VmotionDeleteResponse struct {
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VmotionDeleteResponse) Reset()         { *m = VmotionDeleteResponse{} }
func (m *VmotionDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*VmotionDeleteResponse) ProtoMessage()    {}
func (*VmotionDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{11}
}
func (m *VmotionDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionDeleteResponse.Merge(m, src)
}
func (m *VmotionDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *VmotionDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionDeleteResponse proto.InternalMessageInfo

func (m *VmotionDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// vmotion abort request
type VmotionAbortRequest struct {
	// optional batch context, if this request is part of a batch of API calls
	BatchCtxt            *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	Id                   [][]byte   `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VmotionAbortRequest) Reset()         { *m = VmotionAbortRequest{} }
func (m *VmotionAbortRequest) String() string { return proto.CompactTextString(m) }
func (*VmotionAbortRequest) ProtoMessage()    {}
func (*VmotionAbortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{12}
}
func (m *VmotionAbortRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionAbortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionAbortRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionAbortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionAbortRequest.Merge(m, src)
}
func (m *VmotionAbortRequest) XXX_Size() int {
	return m.Size()
}
func (m *VmotionAbortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionAbortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionAbortRequest proto.InternalMessageInfo

func (m *VmotionAbortRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VmotionAbortRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// vmotion abort response
type VmotionAbortResponse struct {
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VmotionAbortResponse) Reset()         { *m = VmotionAbortResponse{} }
func (m *VmotionAbortResponse) String() string { return proto.CompactTextString(m) }
func (*VmotionAbortResponse) ProtoMessage()    {}
func (*VmotionAbortResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8db9343b44a4f1, []int{13}
}
func (m *VmotionAbortResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VmotionAbortResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VmotionAbortResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VmotionAbortResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VmotionAbortResponse.Merge(m, src)
}
func (m *VmotionAbortResponse) XXX_Size() int {
	return m.Size()
}
func (m *VmotionAbortResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VmotionAbortResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VmotionAbortResponse proto.InternalMessageInfo

func (m *VmotionAbortResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("pds.VmotionType", VmotionType_name, VmotionType_value)
	proto.RegisterEnum("pds.VmotionState", VmotionState_name, VmotionState_value)
	proto.RegisterType((*VmotionEpCreateSpec)(nil), "pds.VmotionEpCreateSpec")
	proto.RegisterType((*VmotionEpDeleteSpec)(nil), "pds.VmotionEpDeleteSpec")
	proto.RegisterType((*VmotionSpec)(nil), "pds.VmotionSpec")
	proto.RegisterType((*VmotionStatus)(nil), "pds.VmotionStatus")
	proto.RegisterType((*VmotionStats)(nil), "pds.VmotionStats")
	proto.RegisterType((*Vmotion)(nil), "pds.Vmotion")
	proto.RegisterType((*VmotionRequest)(nil), "pds.VmotionRequest")
	proto.RegisterType((*VmotionResponse)(nil), "pds.VmotionResponse")
	proto.RegisterType((*VmotionGetRequest)(nil), "pds.VmotionGetRequest")
	proto.RegisterType((*VmotionGetResponse)(nil), "pds.VmotionGetResponse")
	proto.RegisterType((*VmotionDeleteRequest)(nil), "pds.VmotionDeleteRequest")
	proto.RegisterType((*VmotionDeleteResponse)(nil), "pds.VmotionDeleteResponse")
	proto.RegisterType((*VmotionAbortRequest)(nil), "pds.VmotionAbortRequest")
	proto.RegisterType((*VmotionAbortResponse)(nil), "pds.VmotionAbortResponse")
}

func init() { proto.RegisterFile("vmotion.proto", fileDescriptor_ac8db9343b44a4f1) }

var fileDescriptor_ac8db9343b44a4f1 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0xae, 0x9d, 0x4e, 0x3a, 0x73, 0x92, 0xa6, 0xee, 0xed, 0xcf, 0xa4, 0x41, 0x34, 0x95, 0x91,
	0x20, 0xaa, 0x4a, 0x10, 0x45, 0x48, 0xa3, 0xa1, 0x65, 0x88, 0xdb, 0x4c, 0x6b, 0x69, 0x12, 0x47,
	0xae, 0x27, 0xd2, 0xac, 0x22, 0x37, 0xbe, 0x14, 0xa3, 0xc6, 0xf6, 0xf8, 0xde, 0x56, 0x54, 0x88,
	0xe7, 0x60, 0xc3, 0x16, 0xf1, 0x06, 0xec, 0xd9, 0xb1, 0x9c, 0x27, 0x88, 0x50, 0x97, 0x5d, 0xce,
	0x13, 0xa0, 0xfb, 0x63, 0xe7, 0x66, 0x92, 0x01, 0xa9, 0x62, 0xc1, 0x26, 0xb2, 0xcf, 0x39, 0xdf,
	0x39, 0xdf, 0xf9, 0x75, 0x60, 0xf9, 0x7a, 0x14, 0xd3, 0x30, 0x8e, 0x9a, 0x49, 0x1a, 0xd3, 0x18,
	0x15, 0x92, 0x80, 0xd4, 0xe0, 0x22, 0xbe, 0x88, 0x85, 0xa0, 0xb6, 0x32, 0xc2, 0xd4, 0xff, 0x8c,
	0xfd, 0x48, 0x41, 0x89, 0xde, 0x24, 0x98, 0xc8, 0x17, 0xb8, 0x8e, 0xc2, 0xa1, 0x7c, 0x5e, 0x1e,
	0xf9, 0x49, 0x12, 0x46, 0x17, 0xe2, 0xd5, 0xfc, 0x5d, 0x83, 0xb5, 0xbe, 0xf0, 0xdd, 0x4e, 0x8e,
	0x52, 0xec, 0x53, 0x7c, 0x96, 0xe0, 0x21, 0xfa, 0x12, 0x16, 0xfb, 0x51, 0x38, 0xac, 0x6a, 0x3b,
	0x5a, 0xa3, 0xb4, 0xbf, 0xdc, 0x4c, 0x02, 0xd2, 0x64, 0x02, 0xa6, 0xb4, 0xd0, 0xdb, 0x71, 0xbd,
	0xc2, 0x82, 0x3d, 0x1d, 0xf9, 0x51, 0xe0, 0xd3, 0x38, 0xbd, 0x71, 0xb9, 0x39, 0xda, 0x05, 0xa3,
	0x23, 0xfc, 0x13, 0x2f, 0x3e, 0xc6, 0x97, 0x98, 0xe2, 0xaa, 0xbe, 0x53, 0x68, 0x94, 0xdd, 0x19,
	0x39, 0x3a, 0x50, 0x6d, 0x45, 0xe8, 0x6a, 0x61, 0xa7, 0xd0, 0x28, 0xed, 0x1b, 0x3c, 0x9c, 0x54,
	0xb2, 0x88, 0xee, 0x8c, 0xa5, 0xf9, 0x9b, 0x4a, 0x5c, 0x78, 0xe4, 0xc4, 0x3f, 0x56, 0x88, 0x97,
	0xff, 0x17, 0x4c, 0x7f, 0x2d, 0x40, 0x49, 0x32, 0xe5, 0x0c, 0x4d, 0xd0, 0xed, 0xe0, 0x1f, 0xf8,
	0xe9, 0x76, 0x80, 0x9e, 0xc0, 0xa2, 0x77, 0x93, 0x30, 0x46, 0x5a, 0xa3, 0x22, 0xa3, 0x48, 0x1f,
	0x4c, 0x3e, 0x3f, 0x2f, 0xa6, 0x41, 0x7b, 0x50, 0xf4, 0xae, 0xa2, 0x08, 0x5f, 0x56, 0x0b, 0xef,
	0x8b, 0x70, 0xba, 0xe0, 0x4a, 0x1b, 0xf4, 0x35, 0x14, 0x7b, 0x18, 0xa7, 0x76, 0xaf, 0xba, 0xc8,
	0x1b, 0x6d, 0x34, 0xc5, 0xdc, 0xd8, 0xbd, 0x56, 0x10, 0xa4, 0x98, 0x90, 0xf7, 0xe1, 0x05, 0x0a,
	0x8d, 0x00, 0x26, 0x43, 0x53, 0x7d, 0xc0, 0x7d, 0x54, 0x55, 0xb6, 0xea, 0x50, 0x59, 0x9f, 0xbf,
	0x1d, 0xd7, 0x3f, 0xe5, 0xbe, 0x86, 0x71, 0x44, 0x68, 0xea, 0x87, 0x11, 0x25, 0x87, 0x3f, 0x32,
	0xde, 0x87, 0x87, 0xfd, 0x8e, 0xe3, 0xd9, 0x4e, 0x77, 0xe0, 0xbd, 0xea, 0xb5, 0x07, 0x1d, 0xa7,
	0xdf, 0x1e, 0xd8, 0xdd, 0x9f, 0x4e, 0x35, 0x57, 0x09, 0x80, 0x9e, 0x02, 0x4c, 0x5a, 0x5d, 0x2d,
	0xce, 0x0b, 0x37, 0xd1, 0x33, 0xec, 0xe4, 0xcd, 0x2a, 0xc1, 0xa3, 0x04, 0xe3, 0x74, 0x10, 0x46,
	0xdf, 0xc6, 0x16, 0x02, 0x63, 0xc8, 0xdd, 0x0e, 0xe2, 0x74, 0x10, 0x70, 0x23, 0xf3, 0x09, 0x2c,
	0x67, 0x6d, 0xa2, 0x3e, 0xbd, 0x22, 0xe8, 0x13, 0x78, 0xc0, 0x9e, 0x30, 0xef, 0x55, 0x65, 0x7f,
	0x55, 0x0d, 0xc4, 0x15, 0xae, 0xd0, 0x9b, 0x15, 0x28, 0x2b, 0x62, 0x62, 0xfe, 0xa1, 0xc3, 0x92,
	0x14, 0xa0, 0xaf, 0xe0, 0x21, 0xcb, 0xaf, 0x83, 0xa9, 0x2f, 0x97, 0xa9, 0xd2, 0xe4, 0x7b, 0x9a,
	0x49, 0xad, 0x95, 0x37, 0xe3, 0xba, 0x76, 0x37, 0xae, 0x2f, 0xed, 0x85, 0xd1, 0x65, 0x18, 0x61,
	0x37, 0x07, 0xa0, 0x67, 0xb0, 0xe4, 0x9c, 0x7f, 0xcf, 0xb1, 0xba, 0x5c, 0x44, 0x8e, 0x95, 0x42,
	0x6b, 0x53, 0x42, 0x79, 0x83, 0xf6, 0xe2, 0x51, 0x48, 0xf1, 0x28, 0xa1, 0x37, 0x6e, 0x86, 0x62,
	0x73, 0xc4, 0x4b, 0x55, 0x90, 0xdd, 0x55, 0x33, 0xe0, 0x9b, 0xcc, 0xc0, 0x24, 0xc1, 0x43, 0x05,
	0xcc, 0x11, 0xe8, 0x1b, 0x28, 0x8a, 0x32, 0xc8, 0xc9, 0x40, 0xef, 0x66, 0x7f, 0x45, 0xac, 0xf5,
	0xbb, 0x71, 0xdd, 0x20, 0xfc, 0x59, 0xc1, 0x4b, 0x1c, 0x3a, 0x10, 0xe5, 0x23, 0x72, 0x2c, 0x66,
	0xca, 0x47, 0xac, 0xb5, 0xbb, 0x71, 0x7d, 0x85, 0xe1, 0x55, 0xb8, 0x00, 0x99, 0x97, 0x50, 0x91,
	0xb6, 0x2e, 0x7e, 0x7d, 0x85, 0x09, 0x45, 0x4d, 0x78, 0x64, 0xf9, 0x74, 0xf8, 0xdd, 0x11, 0xfd,
	0x81, 0xca, 0x52, 0x66, 0xe3, 0x9a, 0xcb, 0xdd, 0x89, 0x09, 0xda, 0x85, 0x25, 0x09, 0xe5, 0x8b,
	0x3d, 0x27, 0x7d, 0x37, 0x33, 0x30, 0x5f, 0xc3, 0x4a, 0x1e, 0x8d, 0x24, 0x71, 0x44, 0x30, 0x0b,
	0xd7, 0x4a, 0x42, 0x59, 0x03, 0x4d, 0xee, 0xa1, 0x08, 0x97, 0xcb, 0xdd, 0x89, 0x09, 0x6a, 0xc2,
	0xc3, 0x0c, 0x2b, 0xe3, 0xcd, 0x29, 0x99, 0x9b, 0xdb, 0x98, 0x1f, 0xc1, 0xaa, 0x54, 0x9d, 0x60,
	0x9a, 0xe5, 0x58, 0x91, 0xb7, 0x81, 0xdd, 0x21, 0xdd, 0x0e, 0xcc, 0x08, 0x90, 0x6a, 0x74, 0x4f,
	0x6a, 0x8d, 0x19, 0x6a, 0x65, 0x95, 0x9a, 0x42, 0xaa, 0x0f, 0xeb, 0x52, 0x28, 0x36, 0xe7, 0xbe,
	0xb5, 0x17, 0x79, 0xe8, 0x79, 0x1e, 0x27, 0xb0, 0xf1, 0x8e, 0xdf, 0xf9, 0xa9, 0x14, 0xfe, 0x25,
	0x15, 0xf3, 0x65, 0x7e, 0xf5, 0x5b, 0xe7, 0x71, 0x4a, 0xff, 0x2b, 0x7e, 0xcf, 0xf3, 0xbc, 0xa5,
	0xdb, 0xfb, 0xd1, 0xdb, 0x7d, 0x95, 0x9f, 0x7a, 0x7e, 0x8c, 0x37, 0x60, 0x75, 0xea, 0xac, 0x75,
	0x9d, 0x6e, 0xdb, 0x58, 0x40, 0x55, 0x58, 0x9f, 0x77, 0xed, 0x0c, 0x0d, 0x6d, 0xc1, 0xc6, 0xac,
	0xc6, 0x79, 0xe9, 0x19, 0xfa, 0xee, 0xcf, 0xda, 0xd4, 0x95, 0xc1, 0x68, 0x13, 0x50, 0x66, 0x7b,
	0xe6, 0xb5, 0xbc, 0xdc, 0xfb, 0x87, 0xb0, 0x35, 0x2d, 0xb7, 0xbb, 0x83, 0x9e, 0xeb, 0x9c, 0xb8,
	0xed, 0xb3, 0x33, 0x43, 0x43, 0x1f, 0xc0, 0xe3, 0x69, 0xf5, 0x91, 0xd3, 0xe9, 0xbd, 0x68, 0x7b,
	0xed, 0x63, 0x43, 0x57, 0x99, 0x09, 0xe5, 0xf3, 0x96, 0xfd, 0xa2, 0x7d, 0x6c, 0x14, 0x54, 0x66,
	0x42, 0xd3, 0xb2, 0x1c, 0x97, 0x81, 0x16, 0xf7, 0x7f, 0xd1, 0x01, 0x32, 0x66, 0xd7, 0x43, 0x74,
	0x90, 0xdf, 0x51, 0x71, 0xb9, 0xd1, 0xda, 0xd4, 0xb0, 0x89, 0x8e, 0xd5, 0xd6, 0xa7, 0x85, 0x72,
	0xfe, 0x16, 0xd0, 0x69, 0x8e, 0x96, 0x1f, 0xdf, 0x2d, 0xd5, 0x70, 0x6a, 0x2a, 0x6b, 0xb5, 0x79,
	0xaa, 0xdc, 0x53, 0x3b, 0xaf, 0x17, 0xef, 0x29, 0x9a, 0xfa, 0x50, 0xa8, 0xd3, 0x53, 0xdb, 0x9a,
	0xa3, 0xc9, 0xdd, 0x3c, 0xcb, 0x93, 0x3b, 0xc1, 0x14, 0x6d, 0xaa, 0xa6, 0x93, 0xc5, 0xad, 0x3d,
	0x9e, 0x91, 0x67, 0x0e, 0xac, 0xf2, 0x9f, 0xb7, 0xdb, 0xda, 0x9b, 0xdb, 0x6d, 0xed, 0xaf, 0xdb,
	0x6d, 0xed, 0xbc, 0xc8, 0xff, 0x77, 0x7d, 0xf1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x55,
	0xc7, 0x3d, 0xd2, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VmotionSvcClient is the client API for VmotionSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VmotionSvcClient interface {
	// VmotionCreate API is used to initiate vmotion, the correct sequence is
	// to call this API on DSC attached to VM's new host and upon successful
	// completion, call this API on DSC attached to VM's old host
	VmotionCreate(ctx context.Context, in *VmotionRequest, opts ...grpc.CallOption) (*VmotionResponse, error)
	// VmotionDelete API is used to delete Vmotion object
	VmotionDelete(ctx context.Context, in *VmotionDeleteRequest, opts ...grpc.CallOption) (*VmotionDeleteResponse, error)
	// VmotionAbort API is used to abort vmotion and clean up associated state
	VmotionAbort(ctx context.Context, in *VmotionAbortRequest, opts ...grpc.CallOption) (*VmotionAbortResponse, error)
	// VmotionGet API is used to query the status of ongoing vmotion
	VmotionGet(ctx context.Context, in *VmotionGetRequest, opts ...grpc.CallOption) (*VmotionGetResponse, error)
}

type vmotionSvcClient struct {
	cc *grpc.ClientConn
}

func NewVmotionSvcClient(cc *grpc.ClientConn) VmotionSvcClient {
	return &vmotionSvcClient{cc}
}

func (c *vmotionSvcClient) VmotionCreate(ctx context.Context, in *VmotionRequest, opts ...grpc.CallOption) (*VmotionResponse, error) {
	out := new(VmotionResponse)
	err := c.cc.Invoke(ctx, "/pds.VmotionSvc/VmotionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmotionSvcClient) VmotionDelete(ctx context.Context, in *VmotionDeleteRequest, opts ...grpc.CallOption) (*VmotionDeleteResponse, error) {
	out := new(VmotionDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.VmotionSvc/VmotionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmotionSvcClient) VmotionAbort(ctx context.Context, in *VmotionAbortRequest, opts ...grpc.CallOption) (*VmotionAbortResponse, error) {
	out := new(VmotionAbortResponse)
	err := c.cc.Invoke(ctx, "/pds.VmotionSvc/VmotionAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmotionSvcClient) VmotionGet(ctx context.Context, in *VmotionGetRequest, opts ...grpc.CallOption) (*VmotionGetResponse, error) {
	out := new(VmotionGetResponse)
	err := c.cc.Invoke(ctx, "/pds.VmotionSvc/VmotionGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmotionSvcServer is the server API for VmotionSvc service.
type VmotionSvcServer interface {
	// VmotionCreate API is used to initiate vmotion, the correct sequence is
	// to call this API on DSC attached to VM's new host and upon successful
	// completion, call this API on DSC attached to VM's old host
	VmotionCreate(context.Context, *VmotionRequest) (*VmotionResponse, error)
	// VmotionDelete API is used to delete Vmotion object
	VmotionDelete(context.Context, *VmotionDeleteRequest) (*VmotionDeleteResponse, error)
	// VmotionAbort API is used to abort vmotion and clean up associated state
	VmotionAbort(context.Context, *VmotionAbortRequest) (*VmotionAbortResponse, error)
	// VmotionGet API is used to query the status of ongoing vmotion
	VmotionGet(context.Context, *VmotionGetRequest) (*VmotionGetResponse, error)
}

// UnimplementedVmotionSvcServer can be embedded to have forward compatible implementations.
type UnimplementedVmotionSvcServer struct {
}

func (*UnimplementedVmotionSvcServer) VmotionCreate(ctx context.Context, req *VmotionRequest) (*VmotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmotionCreate not implemented")
}
func (*UnimplementedVmotionSvcServer) VmotionDelete(ctx context.Context, req *VmotionDeleteRequest) (*VmotionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmotionDelete not implemented")
}
func (*UnimplementedVmotionSvcServer) VmotionAbort(ctx context.Context, req *VmotionAbortRequest) (*VmotionAbortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmotionAbort not implemented")
}
func (*UnimplementedVmotionSvcServer) VmotionGet(ctx context.Context, req *VmotionGetRequest) (*VmotionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VmotionGet not implemented")
}

func RegisterVmotionSvcServer(s *grpc.Server, srv VmotionSvcServer) {
	s.RegisterService(&_VmotionSvc_serviceDesc, srv)
}

func _VmotionSvc_VmotionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmotionSvcServer).VmotionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VmotionSvc/VmotionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmotionSvcServer).VmotionCreate(ctx, req.(*VmotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmotionSvc_VmotionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmotionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmotionSvcServer).VmotionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VmotionSvc/VmotionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmotionSvcServer).VmotionDelete(ctx, req.(*VmotionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmotionSvc_VmotionAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmotionAbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmotionSvcServer).VmotionAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VmotionSvc/VmotionAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmotionSvcServer).VmotionAbort(ctx, req.(*VmotionAbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmotionSvc_VmotionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmotionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmotionSvcServer).VmotionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VmotionSvc/VmotionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmotionSvcServer).VmotionGet(ctx, req.(*VmotionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VmotionSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.VmotionSvc",
	HandlerType: (*VmotionSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VmotionCreate",
			Handler:    _VmotionSvc_VmotionCreate_Handler,
		},
		{
			MethodName: "VmotionDelete",
			Handler:    _VmotionSvc_VmotionDelete_Handler,
		},
		{
			MethodName: "VmotionAbort",
			Handler:    _VmotionSvc_VmotionAbort_Handler,
		},
		{
			MethodName: "VmotionGet",
			Handler:    _VmotionSvc_VmotionGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vmotion.proto",
}

func (m *VmotionEpCreateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionEpCreateSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionEpCreateSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MappingsToCreate) > 0 {
		for iNdEx := len(m.MappingsToCreate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappingsToCreate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MappingsToDelete) > 0 {
		for iNdEx := len(m.MappingsToDelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MappingsToDelete[iNdEx])
			copy(dAtA[i:], m.MappingsToDelete[iNdEx])
			i = encodeVarintVmotion(dAtA, i, uint64(len(m.MappingsToDelete[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Vnic != nil {
		{
			size, err := m.Vnic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionEpDeleteSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionEpDeleteSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionEpDeleteSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MappingsToCreate) > 0 {
		for iNdEx := len(m.MappingsToCreate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MappingsToCreate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MappingsToDelete) > 0 {
		for iNdEx := len(m.MappingsToDelete) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MappingsToDelete[iNdEx])
			copy(dAtA[i:], m.MappingsToDelete[iNdEx])
			i = encodeVarintVmotion(dAtA, i, uint64(len(m.MappingsToDelete[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Vnic) > 0 {
		i -= len(m.Vnic)
		copy(dAtA[i:], m.Vnic)
		i = encodeVarintVmotion(dAtA, i, uint64(len(m.Vnic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateOrDelete != nil {
		{
			size := m.CreateOrDelete.Size()
			i -= size
			if _, err := m.CreateOrDelete.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PeerInfo != nil {
		{
			size := m.PeerInfo.Size()
			i -= size
			if _, err := m.PeerInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintVmotion(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVmotion(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionSpec_Tunnel) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *VmotionSpec_Tunnel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tunnel != nil {
		i -= len(m.Tunnel)
		copy(dAtA[i:], m.Tunnel)
		i = encodeVarintVmotion(dAtA, i, uint64(len(m.Tunnel)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *VmotionSpec_PeerIP) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *VmotionSpec_PeerIP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PeerIP != nil {
		{
			size, err := m.PeerIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *VmotionSpec_CreateSpec) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *VmotionSpec_CreateSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateSpec != nil {
		{
			size, err := m.CreateSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *VmotionSpec_DeleteSpec) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *VmotionSpec_DeleteSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeleteSpec != nil {
		{
			size, err := m.DeleteSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VmotionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintVmotion(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VmotionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Vmotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vmotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vmotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintVmotion(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VmotionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintVmotion(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VmotionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVmotion(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintVmotion(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VmotionDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintVmotion(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA13 := make([]byte, len(m.ApiStatus)*10)
		var j12 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintVmotion(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionAbortRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionAbortRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionAbortRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintVmotion(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVmotion(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VmotionAbortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionAbortResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VmotionAbortResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA16 := make([]byte, len(m.ApiStatus)*10)
		var j15 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		i -= j15
		copy(dAtA[i:], dAtA16[:j15])
		i = encodeVarintVmotion(dAtA, i, uint64(j15))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVmotion(dAtA []byte, offset int, v uint64) int {
	offset -= sovVmotion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VmotionEpCreateSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vnic != nil {
		l = m.Vnic.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if len(m.MappingsToDelete) > 0 {
		for _, b := range m.MappingsToDelete {
			l = len(b)
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if len(m.MappingsToCreate) > 0 {
		for _, e := range m.MappingsToCreate {
			l = e.Size()
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionEpDeleteSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vnic)
	if l > 0 {
		n += 1 + l + sovVmotion(uint64(l))
	}
	if len(m.MappingsToDelete) > 0 {
		for _, b := range m.MappingsToDelete {
			l = len(b)
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if len(m.MappingsToCreate) > 0 {
		for _, e := range m.MappingsToCreate {
			l = e.Size()
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVmotion(uint64(m.Type))
	}
	if m.PeerInfo != nil {
		n += m.PeerInfo.Size()
	}
	if m.CreateOrDelete != nil {
		n += m.CreateOrDelete.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionSpec_Tunnel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tunnel != nil {
		l = len(m.Tunnel)
		n += 1 + l + sovVmotion(uint64(l))
	}
	return n
}
func (m *VmotionSpec_PeerIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerIP != nil {
		l = m.PeerIP.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	return n
}
func (m *VmotionSpec_CreateSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateSpec != nil {
		l = m.CreateSpec.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	return n
}
func (m *VmotionSpec_DeleteSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteSpec != nil {
		l = m.DeleteSpec.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	return n
}
func (m *VmotionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovVmotion(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vmotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVmotion(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVmotion(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovVmotion(uint64(e))
		}
		n += 1 + sovVmotion(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionAbortRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVmotion(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVmotion(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VmotionAbortResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovVmotion(uint64(e))
		}
		n += 1 + sovVmotion(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVmotion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVmotion(x uint64) (n int) {
	return sovVmotion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VmotionEpCreateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionEpCreateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionEpCreateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vnic == nil {
				m.Vnic = &VnicSpec{}
			}
			if err := m.Vnic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingsToDelete", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingsToDelete = append(m.MappingsToDelete, make([]byte, postIndex-iNdEx))
			copy(m.MappingsToDelete[len(m.MappingsToDelete)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingsToCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingsToCreate = append(m.MappingsToCreate, &MappingSpec{})
			if err := m.MappingsToCreate[len(m.MappingsToCreate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionEpDeleteSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionEpDeleteSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionEpDeleteSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vnic = append(m.Vnic[:0], dAtA[iNdEx:postIndex]...)
			if m.Vnic == nil {
				m.Vnic = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingsToDelete", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingsToDelete = append(m.MappingsToDelete, make([]byte, postIndex-iNdEx))
			copy(m.MappingsToDelete[len(m.MappingsToDelete)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappingsToCreate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappingsToCreate = append(m.MappingsToCreate, &MappingSpec{})
			if err := m.MappingsToCreate[len(m.MappingsToCreate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VmotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.PeerInfo = &VmotionSpec_Tunnel{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPAddress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PeerInfo = &VmotionSpec_PeerIP{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VmotionEpCreateSpec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CreateOrDelete = &VmotionSpec_CreateSpec{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VmotionEpDeleteSpec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CreateOrDelete = &VmotionSpec_DeleteSpec{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= VmotionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vmotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vmotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vmotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &VmotionSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VmotionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &VmotionStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VmotionSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VmotionStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &Vmotion{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVmotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVmotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVmotion
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVmotion
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVmotion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionAbortRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionAbortRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionAbortRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVmotion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVmotion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionAbortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionAbortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionAbortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVmotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVmotion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVmotion
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVmotion
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVmotion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVmotion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVmotion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVmotion
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVmotion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVmotion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVmotion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVmotion
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVmotion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVmotion   = fmt.Errorf("proto: integer overflow")
)
