// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// type of the service mapping
type SvcMappingType int32

const (
	SvcMappingType_SVC_MAPPING_TYPE_NONE SvcMappingType = 0
	// service mapping is for DSR
	SvcMappingType_SVC_MAPPING_TYPE_DSR SvcMappingType = 1
)

var SvcMappingType_name = map[int32]string{
	0: "SVC_MAPPING_TYPE_NONE",
	1: "SVC_MAPPING_TYPE_DSR",
}

var SvcMappingType_value = map[string]int32{
	"SVC_MAPPING_TYPE_NONE": 0,
	"SVC_MAPPING_TYPE_DSR":  1,
}

func (x SvcMappingType) String() string {
	return proto.EnumName(SvcMappingType_name, int32(x))
}

func (SvcMappingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

// SvcKey uniquely identifies a service
// NOTE: as all the fields in SvcKey are key fields, all fields
//       are mandatory and immutable
type SvcKey struct {
	// virtual private cloud where the backend is running
	VPCId []byte `protobuf:"bytes,1,opt,name=VPCId,proto3" json:"VPCId,omitempty"`
	// vnic of the backend
	VnicId []byte `protobuf:"bytes,2,opt,name=VnicId,proto3" json:"VnicId,omitempty"`
	// overlay/private IP of the backend serving the (VIP, port), i.e., DIP
	// NOTE: this must be one of the local IP mappings that belongs to the
	//       vnic of the backend
	BackendIP *IPAddress `protobuf:"bytes,3,opt,name=BackendIP,proto3" json:"BackendIP,omitempty"`
	// IP protocol
	// NOTE: this is currently unused, service mapping applies to all protocols
	IPProtocol uint32 `protobuf:"varint,4,opt,name=IPProtocol,proto3" json:"IPProtocol,omitempty"`
	// L4 port on the DIP, in case port rewrite needs to be performed,
	// if the backend port is set to 0, no port rewrite is performed
	BackendPort uint32 `protobuf:"varint,5,opt,name=BackendPort,proto3" json:"BackendPort,omitempty" meta:range:0-65535`
	// encap received from the service
	FabricEncap          *Encap   `protobuf:"bytes,6,opt,name=FabricEncap,proto3" json:"FabricEncap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcKey) Reset()         { *m = SvcKey{} }
func (m *SvcKey) String() string { return proto.CompactTextString(m) }
func (*SvcKey) ProtoMessage()    {}
func (*SvcKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}
func (m *SvcKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcKey.Merge(m, src)
}
func (m *SvcKey) XXX_Size() int {
	return m.Size()
}
func (m *SvcKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcKey.DiscardUnknown(m)
}

var xxx_messageInfo_SvcKey proto.InternalMessageInfo

func (m *SvcKey) GetVPCId() []byte {
	if m != nil {
		return m.VPCId
	}
	return nil
}

func (m *SvcKey) GetVnicId() []byte {
	if m != nil {
		return m.VnicId
	}
	return nil
}

func (m *SvcKey) GetBackendIP() *IPAddress {
	if m != nil {
		return m.BackendIP
	}
	return nil
}

func (m *SvcKey) GetIPProtocol() uint32 {
	if m != nil {
		return m.IPProtocol
	}
	return 0
}

func (m *SvcKey) GetBackendPort() uint32 {
	if m != nil {
		return m.BackendPort
	}
	return 0
}

func (m *SvcKey) GetFabricEncap() *Encap {
	if m != nil {
		return m.FabricEncap
	}
	return nil
}

// service mapping specification
// NOTE: update operation is not supported as all the fields in the
//       SvcMappingSpec are immutable
type SvcMappingSpec struct {
	// unique service mapping id
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// key to identify the service
	Key *SvcKey `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty" meta:mandatory,immutable`
	// service IP (aka. VIP)
	IPAddr *IPAddress `protobuf:"bytes,3,opt,name=IPAddr,proto3" json:"IPAddr,omitempty" meta:mandatory,immutable`
	// L4 port where service is hosted, if this port is not provided no port
	// rewrite will be done and the incoming port will be carried as-is
	SvcPort uint32 `protobuf:"varint,4,opt,name=SvcPort,proto3" json:"SvcPort,omitempty" meta:range:1-65535,immutable`
	// type of the service mapping
	Type                 SvcMappingType `protobuf:"varint,5,opt,name=Type,proto3,enum=pds.SvcMappingType" json:"Type,omitempty" meta:mandatory, immutable`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SvcMappingSpec) Reset()         { *m = SvcMappingSpec{} }
func (m *SvcMappingSpec) String() string { return proto.CompactTextString(m) }
func (*SvcMappingSpec) ProtoMessage()    {}
func (*SvcMappingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}
func (m *SvcMappingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingSpec.Merge(m, src)
}
func (m *SvcMappingSpec) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingSpec proto.InternalMessageInfo

func (m *SvcMappingSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SvcMappingSpec) GetKey() *SvcKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SvcMappingSpec) GetIPAddr() *IPAddress {
	if m != nil {
		return m.IPAddr
	}
	return nil
}

func (m *SvcMappingSpec) GetSvcPort() uint32 {
	if m != nil {
		return m.SvcPort
	}
	return 0
}

func (m *SvcMappingSpec) GetType() SvcMappingType {
	if m != nil {
		return m.Type
	}
	return SvcMappingType_SVC_MAPPING_TYPE_NONE
}

// operational status of service mapping, if any
type SvcMappingStatus struct {
	// NAT table index
	NatIdx               uint32   `protobuf:"varint,1,opt,name=NatIdx,proto3" json:"NatIdx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcMappingStatus) Reset()         { *m = SvcMappingStatus{} }
func (m *SvcMappingStatus) String() string { return proto.CompactTextString(m) }
func (*SvcMappingStatus) ProtoMessage()    {}
func (*SvcMappingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}
func (m *SvcMappingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingStatus.Merge(m, src)
}
func (m *SvcMappingStatus) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingStatus proto.InternalMessageInfo

func (m *SvcMappingStatus) GetNatIdx() uint32 {
	if m != nil {
		return m.NatIdx
	}
	return 0
}

// stats of service mapping, if any
type SvcMappingStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcMappingStats) Reset()         { *m = SvcMappingStats{} }
func (m *SvcMappingStats) String() string { return proto.CompactTextString(m) }
func (*SvcMappingStats) ProtoMessage()    {}
func (*SvcMappingStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}
func (m *SvcMappingStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingStats.Merge(m, src)
}
func (m *SvcMappingStats) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingStats.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingStats proto.InternalMessageInfo

// service mapping object
type SvcMapping struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *SvcMappingSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *SvcMappingStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	Stats                *SvcMappingStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SvcMapping) Reset()         { *m = SvcMapping{} }
func (m *SvcMapping) String() string { return proto.CompactTextString(m) }
func (*SvcMapping) ProtoMessage()    {}
func (*SvcMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}
func (m *SvcMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMapping.Merge(m, src)
}
func (m *SvcMapping) XXX_Size() int {
	return m.Size()
}
func (m *SvcMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMapping.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMapping proto.InternalMessageInfo

func (m *SvcMapping) GetSpec() *SvcMappingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SvcMapping) GetStatus() *SvcMappingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SvcMapping) GetStats() *SvcMappingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// service mapping create and update request
type SvcMappingRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// batched request
	Request              []*SvcMappingSpec `protobuf:"bytes,2,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SvcMappingRequest) Reset()         { *m = SvcMappingRequest{} }
func (m *SvcMappingRequest) String() string { return proto.CompactTextString(m) }
func (*SvcMappingRequest) ProtoMessage()    {}
func (*SvcMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}
func (m *SvcMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingRequest.Merge(m, src)
}
func (m *SvcMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingRequest proto.InternalMessageInfo

func (m *SvcMappingRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *SvcMappingRequest) GetRequest() []*SvcMappingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// service mapping create and update response
type SvcMappingResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response
	Response             []*SvcMappingStatus `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SvcMappingResponse) Reset()         { *m = SvcMappingResponse{} }
func (m *SvcMappingResponse) String() string { return proto.CompactTextString(m) }
func (*SvcMappingResponse) ProtoMessage()    {}
func (*SvcMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{6}
}
func (m *SvcMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingResponse.Merge(m, src)
}
func (m *SvcMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingResponse proto.InternalMessageInfo

func (m *SvcMappingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SvcMappingResponse) GetResponse() []*SvcMappingStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// service mapping get request
type SvcMappingGetRequest struct {
	// batched request
	Id                   [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcMappingGetRequest) Reset()         { *m = SvcMappingGetRequest{} }
func (m *SvcMappingGetRequest) String() string { return proto.CompactTextString(m) }
func (*SvcMappingGetRequest) ProtoMessage()    {}
func (*SvcMappingGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{7}
}
func (m *SvcMappingGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingGetRequest.Merge(m, src)
}
func (m *SvcMappingGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingGetRequest proto.InternalMessageInfo

func (m *SvcMappingGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// service mapping get response
type SvcMappingGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response
	Response             []*SvcMapping `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SvcMappingGetResponse) Reset()         { *m = SvcMappingGetResponse{} }
func (m *SvcMappingGetResponse) String() string { return proto.CompactTextString(m) }
func (*SvcMappingGetResponse) ProtoMessage()    {}
func (*SvcMappingGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{8}
}
func (m *SvcMappingGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingGetResponse.Merge(m, src)
}
func (m *SvcMappingGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingGetResponse proto.InternalMessageInfo

func (m *SvcMappingGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SvcMappingGetResponse) GetResponse() []*SvcMapping {
	if m != nil {
		return m.Response
	}
	return nil
}

// service mapping delete request
type SvcMappingDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// batched request
	Id                   [][]byte `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcMappingDeleteRequest) Reset()         { *m = SvcMappingDeleteRequest{} }
func (m *SvcMappingDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*SvcMappingDeleteRequest) ProtoMessage()    {}
func (*SvcMappingDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{9}
}
func (m *SvcMappingDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingDeleteRequest.Merge(m, src)
}
func (m *SvcMappingDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingDeleteRequest proto.InternalMessageInfo

func (m *SvcMappingDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *SvcMappingDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// service mapping delete response
type SvcMappingDeleteResponse struct {
	// batched response
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SvcMappingDeleteResponse) Reset()         { *m = SvcMappingDeleteResponse{} }
func (m *SvcMappingDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*SvcMappingDeleteResponse) ProtoMessage()    {}
func (*SvcMappingDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{10}
}
func (m *SvcMappingDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SvcMappingDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SvcMappingDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SvcMappingDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcMappingDeleteResponse.Merge(m, src)
}
func (m *SvcMappingDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SvcMappingDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcMappingDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SvcMappingDeleteResponse proto.InternalMessageInfo

func (m *SvcMappingDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterEnum("pds.SvcMappingType", SvcMappingType_name, SvcMappingType_value)
	proto.RegisterType((*SvcKey)(nil), "pds.SvcKey")
	proto.RegisterType((*SvcMappingSpec)(nil), "pds.SvcMappingSpec")
	proto.RegisterType((*SvcMappingStatus)(nil), "pds.SvcMappingStatus")
	proto.RegisterType((*SvcMappingStats)(nil), "pds.SvcMappingStats")
	proto.RegisterType((*SvcMapping)(nil), "pds.SvcMapping")
	proto.RegisterType((*SvcMappingRequest)(nil), "pds.SvcMappingRequest")
	proto.RegisterType((*SvcMappingResponse)(nil), "pds.SvcMappingResponse")
	proto.RegisterType((*SvcMappingGetRequest)(nil), "pds.SvcMappingGetRequest")
	proto.RegisterType((*SvcMappingGetResponse)(nil), "pds.SvcMappingGetResponse")
	proto.RegisterType((*SvcMappingDeleteRequest)(nil), "pds.SvcMappingDeleteRequest")
	proto.RegisterType((*SvcMappingDeleteResponse)(nil), "pds.SvcMappingDeleteResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x18, 0x0c, 0x29, 0x5b, 0x4e, 0x3f, 0x5a, 0x3f, 0xd9, 0xc8, 0x0e, 0x2d, 0x38, 0xa6, 0xc0, 0x43,
	0x61, 0xa4, 0x8e, 0xda, 0x28, 0x70, 0x51, 0xd8, 0x87, 0xc0, 0x54, 0xe4, 0x94, 0x0d, 0xec, 0xb0,
	0x54, 0x6a, 0x20, 0x27, 0x83, 0x22, 0x17, 0x2a, 0x5b, 0x89, 0x64, 0xc9, 0xb5, 0x1a, 0xbd, 0x55,
	0xdf, 0xa2, 0xbd, 0x14, 0xf0, 0x13, 0x10, 0x85, 0x8f, 0x3e, 0x15, 0x7a, 0x82, 0x60, 0x97, 0x4b,
	0x91, 0xa2, 0x64, 0x18, 0xf0, 0xc5, 0xf0, 0xce, 0xce, 0xcc, 0x7e, 0xdf, 0x7c, 0xbb, 0x14, 0x54,
	0x22, 0x1c, 0x4e, 0x5c, 0x1b, 0xb7, 0x83, 0xd0, 0x27, 0x3e, 0x2a, 0x05, 0x4e, 0xd4, 0x84, 0xa1,
	0x3f, 0xf4, 0x13, 0xa0, 0x59, 0x1b, 0x63, 0x62, 0x7d, 0x4b, 0xff, 0x70, 0x40, 0x22, 0xd3, 0x00,
	0x47, 0xc9, 0x42, 0xfd, 0x5f, 0x80, 0x72, 0x7f, 0x62, 0xbf, 0xc7, 0x53, 0xd4, 0x80, 0xf5, 0x0b,
	0xa3, 0xab, 0x3b, 0xb2, 0xd0, 0x12, 0xf6, 0x37, 0xcd, 0x64, 0x81, 0xb6, 0xa1, 0x7c, 0xe1, 0xb9,
	0xb6, 0xee, 0xc8, 0x22, 0x83, 0xf9, 0x0a, 0xb5, 0xe1, 0x2b, 0xcd, 0xb2, 0x7f, 0xc7, 0x9e, 0xa3,
	0x1b, 0x72, 0xa9, 0x25, 0xec, 0x4b, 0x9d, 0x7a, 0x3b, 0x71, 0xd6, 0x8d, 0x13, 0xc7, 0x09, 0x71,
	0x14, 0x99, 0x19, 0x05, 0xed, 0x01, 0xe8, 0x86, 0x41, 0xcf, 0xb4, 0xfd, 0x91, 0xbc, 0xd6, 0x12,
	0xf6, 0x2b, 0x66, 0x0e, 0x41, 0x3f, 0x80, 0xc4, 0xc9, 0x86, 0x1f, 0x12, 0x79, 0x9d, 0x12, 0xb4,
	0xed, 0x59, 0xac, 0x20, 0x5a, 0xfa, 0x51, 0x68, 0x79, 0x43, 0x7c, 0xf4, 0xdd, 0xcb, 0xef, 0x0f,
	0x0f, 0x5f, 0x1f, 0x9a, 0x79, 0x2a, 0x6a, 0x83, 0x74, 0x6a, 0x0d, 0x42, 0xd7, 0xee, 0x79, 0xb6,
	0x15, 0xc8, 0x65, 0x56, 0xcb, 0x26, 0xaf, 0x85, 0x61, 0x66, 0x9e, 0xa0, 0xfe, 0x2d, 0x42, 0xb5,
	0x3f, 0xb1, 0xcf, 0xac, 0x20, 0x70, 0xbd, 0x61, 0x3f, 0xc0, 0x36, 0x3a, 0x00, 0x31, 0xed, 0x5b,
	0xdb, 0x9d, 0xc5, 0x8a, 0xcc, 0xce, 0x1c, 0x5b, 0x9e, 0x63, 0x11, 0x3f, 0x9c, 0x1e, 0xb8, 0xe3,
	0xf1, 0x15, 0xb1, 0x06, 0x23, 0x6c, 0x8a, 0xba, 0x83, 0x8e, 0xa1, 0xf4, 0x1e, 0x4f, 0x59, 0x1e,
	0x52, 0x47, 0x6a, 0x07, 0x4e, 0xd4, 0x4e, 0x22, 0xbc, 0x47, 0x4b, 0x55, 0xe8, 0x14, 0xca, 0x49,
	0x3e, 0x77, 0x85, 0x76, 0x8f, 0x09, 0x57, 0xa3, 0x23, 0xd8, 0xe8, 0x4f, 0x6c, 0x96, 0x15, 0x0b,
	0x53, 0x6b, 0xcd, 0x62, 0x65, 0x37, 0x97, 0xd5, 0xab, 0x24, 0xab, 0x9c, 0x34, 0x15, 0xa0, 0x53,
	0x58, 0xfb, 0x38, 0x0d, 0x30, 0x0b, 0xb9, 0xda, 0x79, 0x9a, 0x76, 0xc0, 0x13, 0xa1, 0x5b, 0xda,
	0xf3, 0x59, 0xac, 0xec, 0x14, 0x8a, 0x68, 0x65, 0x56, 0x4c, 0xaf, 0xbe, 0x80, 0x7a, 0x2e, 0x48,
	0x62, 0x91, 0xab, 0x88, 0xde, 0x97, 0x73, 0x8b, 0xe8, 0xce, 0x67, 0x16, 0x67, 0xc5, 0xe4, 0x2b,
	0xf5, 0x09, 0xd4, 0x16, 0xb9, 0x91, 0xfa, 0xaf, 0x08, 0x90, 0x61, 0xe8, 0x18, 0x1e, 0x53, 0xd7,
	0x33, 0x4c, 0x2c, 0xa6, 0x95, 0x3a, 0xd5, 0x36, 0xbb, 0xb6, 0x29, 0xaa, 0xd5, 0xae, 0x63, 0x45,
	0xb8, 0x8d, 0x95, 0x8d, 0x03, 0xd7, 0x1b, 0xb9, 0x1e, 0x36, 0xe7, 0x02, 0xf4, 0x06, 0x36, 0x3e,
	0x0c, 0x7e, 0x63, 0xda, 0x64, 0x2e, 0x95, 0x44, 0xcb, 0x41, 0x6d, 0x9b, 0x4b, 0xab, 0x14, 0x3d,
	0xf0, 0xc7, 0x2e, 0xc1, 0xe3, 0x80, 0x4c, 0xcd, 0x54, 0x85, 0x8e, 0x61, 0x8d, 0x5e, 0x05, 0x3e,
	0x95, 0x62, 0x26, 0x74, 0x4b, 0x43, 0x54, 0x1f, 0x05, 0xd8, 0xce, 0xe9, 0x99, 0x08, 0x75, 0xa1,
	0x9c, 0xb4, 0xcf, 0x66, 0x21, 0x75, 0xb6, 0x8a, 0x72, 0xb6, 0xa9, 0x35, 0x6e, 0x63, 0xa5, 0x1e,
	0xb1, 0xff, 0x73, 0x16, 0x5c, 0x8a, 0xde, 0xc0, 0x3a, 0xcb, 0x85, 0x8d, 0x45, 0xea, 0x34, 0x56,
	0x78, 0x44, 0xda, 0xd3, 0xdb, 0x58, 0xa9, 0x51, 0x8b, 0xbc, 0x43, 0xa2, 0x53, 0x43, 0x78, 0x92,
	0xd1, 0x4d, 0xfc, 0xc7, 0x15, 0x8e, 0x48, 0xf2, 0x4e, 0x89, 0xfd, 0x6b, 0x97, 0x7c, 0x26, 0x3c,
	0xd6, 0xf4, 0xca, 0xcd, 0x71, 0x33, 0xa3, 0xa0, 0x97, 0xb0, 0xc1, 0xa5, 0xb2, 0xd8, 0x2a, 0xdd,
	0x11, 0x85, 0x99, 0x72, 0xd4, 0x3f, 0x01, 0xe5, 0xcf, 0x8c, 0x02, 0xdf, 0x8b, 0x30, 0x3d, 0xf4,
	0x24, 0x70, 0x79, 0x24, 0x02, 0xbb, 0x65, 0xe9, 0xa1, 0x73, 0xdc, 0xcc, 0x28, 0xe8, 0x15, 0x3c,
	0x4e, 0xb5, 0xfc, 0xd4, 0xd5, 0x09, 0x9a, 0x73, 0x9a, 0xfa, 0x35, 0x34, 0xb2, 0xdd, 0x77, 0x98,
	0xa4, 0xfd, 0x56, 0xf9, 0x53, 0x2e, 0xed, 0x6f, 0xd2, 0xc7, 0xaa, 0x12, 0xd8, 0x2a, 0xf0, 0x1e,
	0x58, 0xe3, 0x37, 0x4b, 0x35, 0xd6, 0x0a, 0x35, 0xe6, 0xaa, 0xfb, 0x04, 0xcf, 0x32, 0xfc, 0x2d,
	0x1e, 0x61, 0x82, 0x1f, 0x3a, 0x90, 0xa4, 0x21, 0x71, 0xde, 0xd0, 0x4f, 0x20, 0x2f, 0x5b, 0xaf,
	0xee, 0xa9, 0x74, 0x4f, 0x4f, 0x2f, 0x7a, 0xf9, 0x2f, 0x21, 0x7d, 0x4b, 0x68, 0x07, 0xb6, 0xfa,
	0x17, 0xdd, 0xcb, 0xb3, 0x13, 0xc3, 0xd0, 0xcf, 0xdf, 0x5d, 0x7e, 0xfc, 0x64, 0xf4, 0x2e, 0xcf,
	0x3f, 0x9c, 0xf7, 0xea, 0x8f, 0x90, 0x0c, 0x8d, 0xa5, 0xad, 0xb7, 0x7d, 0xb3, 0x2e, 0x74, 0xfe,
	0x12, 0xa1, 0xd4, 0x9f, 0xd8, 0xa8, 0x97, 0xff, 0x1e, 0x74, 0x43, 0x6c, 0x11, 0x8c, 0xb6, 0x8b,
	0x21, 0x25, 0x31, 0x34, 0x9f, 0x2d, 0xe1, 0x3c, 0xba, 0x47, 0x8b, 0x36, 0xbf, 0x04, 0xce, 0x03,
	0x6d, 0x7e, 0x84, 0xca, 0xc2, 0xe4, 0xd1, 0x4e, 0x81, 0x9b, 0xdd, 0x9a, 0x66, 0x73, 0xd5, 0xd6,
	0xdc, 0xe9, 0xe7, 0x7c, 0x41, 0x49, 0xe4, 0x68, 0xb7, 0xa0, 0x58, 0x18, 0x72, 0xf3, 0xf9, 0x1d,
	0xbb, 0xa9, 0xa5, 0xb6, 0xf9, 0xcf, 0xcd, 0x9e, 0x70, 0x7d, 0xb3, 0x27, 0xfc, 0x77, 0xb3, 0x27,
	0x0c, 0xca, 0xec, 0xc7, 0xf8, 0xf5, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x31, 0x4b, 0x2d,
	0xcc, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SvcClient is the client API for Svc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SvcClient interface {
	SvcMappingCreate(ctx context.Context, in *SvcMappingRequest, opts ...grpc.CallOption) (*SvcMappingResponse, error)
	SvcMappingUpdate(ctx context.Context, in *SvcMappingRequest, opts ...grpc.CallOption) (*SvcMappingResponse, error)
	SvcMappingGet(ctx context.Context, in *SvcMappingGetRequest, opts ...grpc.CallOption) (*SvcMappingGetResponse, error)
	SvcMappingDelete(ctx context.Context, in *SvcMappingDeleteRequest, opts ...grpc.CallOption) (*SvcMappingDeleteResponse, error)
}

type svcClient struct {
	cc *grpc.ClientConn
}

func NewSvcClient(cc *grpc.ClientConn) SvcClient {
	return &svcClient{cc}
}

func (c *svcClient) SvcMappingCreate(ctx context.Context, in *SvcMappingRequest, opts ...grpc.CallOption) (*SvcMappingResponse, error) {
	out := new(SvcMappingResponse)
	err := c.cc.Invoke(ctx, "/pds.Svc/SvcMappingCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) SvcMappingUpdate(ctx context.Context, in *SvcMappingRequest, opts ...grpc.CallOption) (*SvcMappingResponse, error) {
	out := new(SvcMappingResponse)
	err := c.cc.Invoke(ctx, "/pds.Svc/SvcMappingUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) SvcMappingGet(ctx context.Context, in *SvcMappingGetRequest, opts ...grpc.CallOption) (*SvcMappingGetResponse, error) {
	out := new(SvcMappingGetResponse)
	err := c.cc.Invoke(ctx, "/pds.Svc/SvcMappingGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcClient) SvcMappingDelete(ctx context.Context, in *SvcMappingDeleteRequest, opts ...grpc.CallOption) (*SvcMappingDeleteResponse, error) {
	out := new(SvcMappingDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.Svc/SvcMappingDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcServer is the server API for Svc service.
type SvcServer interface {
	SvcMappingCreate(context.Context, *SvcMappingRequest) (*SvcMappingResponse, error)
	SvcMappingUpdate(context.Context, *SvcMappingRequest) (*SvcMappingResponse, error)
	SvcMappingGet(context.Context, *SvcMappingGetRequest) (*SvcMappingGetResponse, error)
	SvcMappingDelete(context.Context, *SvcMappingDeleteRequest) (*SvcMappingDeleteResponse, error)
}

// UnimplementedSvcServer can be embedded to have forward compatible implementations.
type UnimplementedSvcServer struct {
}

func (*UnimplementedSvcServer) SvcMappingCreate(ctx context.Context, req *SvcMappingRequest) (*SvcMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcMappingCreate not implemented")
}
func (*UnimplementedSvcServer) SvcMappingUpdate(ctx context.Context, req *SvcMappingRequest) (*SvcMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcMappingUpdate not implemented")
}
func (*UnimplementedSvcServer) SvcMappingGet(ctx context.Context, req *SvcMappingGetRequest) (*SvcMappingGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcMappingGet not implemented")
}
func (*UnimplementedSvcServer) SvcMappingDelete(ctx context.Context, req *SvcMappingDeleteRequest) (*SvcMappingDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SvcMappingDelete not implemented")
}

func RegisterSvcServer(s *grpc.Server, srv SvcServer) {
	s.RegisterService(&_Svc_serviceDesc, srv)
}

func _Svc_SvcMappingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).SvcMappingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.Svc/SvcMappingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).SvcMappingCreate(ctx, req.(*SvcMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_SvcMappingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).SvcMappingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.Svc/SvcMappingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).SvcMappingUpdate(ctx, req.(*SvcMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_SvcMappingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcMappingGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).SvcMappingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.Svc/SvcMappingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).SvcMappingGet(ctx, req.(*SvcMappingGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Svc_SvcMappingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcMappingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcServer).SvcMappingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.Svc/SvcMappingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcServer).SvcMappingDelete(ctx, req.(*SvcMappingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Svc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.Svc",
	HandlerType: (*SvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SvcMappingCreate",
			Handler:    _Svc_SvcMappingCreate_Handler,
		},
		{
			MethodName: "SvcMappingUpdate",
			Handler:    _Svc_SvcMappingUpdate_Handler,
		},
		{
			MethodName: "SvcMappingGet",
			Handler:    _Svc_SvcMappingGet_Handler,
		},
		{
			MethodName: "SvcMappingDelete",
			Handler:    _Svc_SvcMappingDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *SvcKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FabricEncap != nil {
		{
			size, err := m.FabricEncap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BackendPort != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.BackendPort))
		i--
		dAtA[i] = 0x28
	}
	if m.IPProtocol != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.IPProtocol))
		i--
		dAtA[i] = 0x20
	}
	if m.BackendIP != nil {
		{
			size, err := m.BackendIP.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VnicId) > 0 {
		i -= len(m.VnicId)
		copy(dAtA[i:], m.VnicId)
		i = encodeVarintService(dAtA, i, uint64(len(m.VnicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VPCId) > 0 {
		i -= len(m.VPCId)
		copy(dAtA[i:], m.VPCId)
		i = encodeVarintService(dAtA, i, uint64(len(m.VPCId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.SvcPort != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.SvcPort))
		i--
		dAtA[i] = 0x20
	}
	if m.IPAddr != nil {
		{
			size, err := m.IPAddr.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NatIdx != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NatIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SvcMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SvcMappingDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SvcMappingDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SvcMappingDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA13 := make([]byte, len(m.ApiStatus)*10)
		var j12 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintService(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SvcKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VPCId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.VnicId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.BackendIP != nil {
		l = m.BackendIP.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.IPProtocol != 0 {
		n += 1 + sovService(uint64(m.IPProtocol))
	}
	if m.BackendPort != 0 {
		n += 1 + sovService(uint64(m.BackendPort))
	}
	if m.FabricEncap != nil {
		l = m.FabricEncap.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.IPAddr != nil {
		l = m.IPAddr.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.SvcPort != 0 {
		n += 1 + sovService(uint64(m.SvcPort))
	}
	if m.Type != 0 {
		n += 1 + sovService(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NatIdx != 0 {
		n += 1 + sovService(uint64(m.NatIdx))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovService(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovService(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SvcMappingDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SvcKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VPCId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VPCId = append(m.VPCId[:0], dAtA[iNdEx:postIndex]...)
			if m.VPCId == nil {
				m.VPCId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnicId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnicId = append(m.VnicId[:0], dAtA[iNdEx:postIndex]...)
			if m.VnicId == nil {
				m.VnicId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackendIP", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackendIP == nil {
				m.BackendIP = &IPAddress{}
			}
			if err := m.BackendIP.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPProtocol", wireType)
			}
			m.IPProtocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IPProtocol |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackendPort", wireType)
			}
			m.BackendPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackendPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FabricEncap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FabricEncap == nil {
				m.FabricEncap = &Encap{}
			}
			if err := m.FabricEncap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &SvcKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IPAddr == nil {
				m.IPAddr = &IPAddress{}
			}
			if err := m.IPAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcPort", wireType)
			}
			m.SvcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvcPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SvcMappingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatIdx", wireType)
			}
			m.NatIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SvcMappingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SvcMappingStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SvcMappingStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SvcMappingSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SvcMappingStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SvcMapping{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SvcMappingDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SvcMappingDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SvcMappingDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
