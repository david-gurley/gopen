// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: batch.proto

package pds

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	pds "github.com/david-gurley/gopen/pds/meta/pds"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// batch configuration
type BatchSpec struct {
	// epoch number for this batched API transaction
	// NOTE: epoch value 0 is reserved and invalid
	Epoch                uint32   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty" meta:mandatory, meta:range:1-0xFFFFFFFF`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchSpec) Reset()         { *m = BatchSpec{} }
func (m *BatchSpec) String() string { return proto.CompactTextString(m) }
func (*BatchSpec) ProtoMessage()    {}
func (*BatchSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{0}
}
func (m *BatchSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchSpec.Merge(m, src)
}
func (m *BatchSpec) XXX_Size() int {
	return m.Size()
}
func (m *BatchSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BatchSpec proto.InternalMessageInfo

func (m *BatchSpec) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// operational status of the batch
type BatchStatus struct {
	// status of the BatchStart() request
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batch context to be used in all API calls in this batch
	BatchContext         *BatchCtxt `protobuf:"bytes,2,opt,name=BatchContext,proto3" json:"BatchContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchStatus) Reset()         { *m = BatchStatus{} }
func (m *BatchStatus) String() string { return proto.CompactTextString(m) }
func (*BatchStatus) ProtoMessage()    {}
func (*BatchStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{1}
}
func (m *BatchStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchStatus.Merge(m, src)
}
func (m *BatchStatus) XXX_Size() int {
	return m.Size()
}
func (m *BatchStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BatchStatus proto.InternalMessageInfo

func (m *BatchStatus) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BatchStatus) GetBatchContext() *BatchCtxt {
	if m != nil {
		return m.BatchContext
	}
	return nil
}

// Batch object
type Batch struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *BatchSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *BatchStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{2}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetSpec() *BatchSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Batch) GetStatus() *BatchStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchSpec)(nil), "pds.BatchSpec")
	proto.RegisterType((*BatchStatus)(nil), "pds.BatchStatus")
	proto.RegisterType((*Batch)(nil), "pds.Batch")
}

func init() { proto.RegisterFile("batch.proto", fileDescriptor_905061dbf2994c5e) }

var fileDescriptor_905061dbf2994c5e = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0x86, 0x3b, 0xf5, 0x7d, 0xe4, 0x1b, 0x43, 0x29, 0xc6, 0x0b, 0xcb, 0x68, 0x53, 0x43, 0x5d,
	0xd5, 0x95, 0x4b, 0x17, 0x2e, 0xb4, 0x58, 0x86, 0xec, 0x92, 0x80, 0x92, 0x17, 0x90, 0xe4, 0x21,
	0x56, 0x88, 0x34, 0x83, 0x74, 0x12, 0xac, 0x07, 0xca, 0xbb, 0x64, 0xe9, 0x27, 0x10, 0xc1, 0x4b,
	0x2f, 0xb3, 0x0f, 0x04, 0xcd, 0x8c, 0x2f, 0x89, 0xb3, 0x88, 0x16, 0x42, 0xe7, 0xd7, 0xff, 0x9d,
	0x7f, 0xce, 0x91, 0xb0, 0xe6, 0xb9, 0xe0, 0x2f, 0x4c, 0x1e, 0x33, 0x60, 0xa4, 0xc0, 0xe7, 0x49,
	0xb7, 0x15, 0x52, 0x70, 0x7f, 0xe6, 0x37, 0xa9, 0x76, 0x35, 0x48, 0x39, 0x4d, 0x64, 0x61, 0x9c,
	0xe1, 0x9a, 0x9d, 0x13, 0x17, 0x9c, 0xfa, 0x64, 0x8a, 0x4b, 0x94, 0x33, 0x7f, 0xd1, 0x41, 0x7d,
	0x34, 0x68, 0xd8, 0xdf, 0x9f, 0x32, 0xfd, 0x5b, 0x0e, 0x4e, 0x42, 0x37, 0x9a, 0xbb, 0xc0, 0xe2,
	0x74, 0xd8, 0x17, 0x75, 0xec, 0x46, 0x57, 0x74, 0xf2, 0xeb, 0xc7, 0x68, 0x79, 0xa2, 0x2e, 0x47,
	0x92, 0x46, 0x82, 0x35, 0xd9, 0x0f, 0x5c, 0xb8, 0x4d, 0x88, 0x89, 0x6b, 0x53, 0x1e, 0xc8, 0x42,
	0x74, 0x6d, 0x5a, 0x6d, 0x53, 0xe6, 0xef, 0x74, 0x67, 0x6f, 0x21, 0xbf, 0x71, 0x5d, 0xe0, 0x33,
	0x16, 0x01, 0x5d, 0x42, 0xe7, 0x73, 0x1f, 0x0d, 0xb4, 0x1d, 0x22, 0x5f, 0xc1, 0x12, 0x9c, 0x57,
	0x2e, 0xe3, 0x19, 0xe1, 0x92, 0x10, 0xc8, 0x5f, 0x5c, 0xbd, 0x4c, 0x39, 0x3d, 0xa5, 0xe0, 0x8a,
	0x38, 0xcd, 0x6a, 0x9a, 0x62, 0xf4, 0xad, 0x6a, 0xb7, 0x56, 0x99, 0x8e, 0x36, 0x99, 0x5e, 0x19,
	0x06, 0xd1, 0x4d, 0x10, 0x51, 0x67, 0x07, 0x90, 0xff, 0xb8, 0x72, 0xee, 0x5d, 0x0b, 0x56, 0xe6,
	0x36, 0x24, 0xab, 0x44, 0xfb, 0xab, 0x42, 0x9b, 0xb9, 0x3a, 0x64, 0x61, 0x00, 0x34, 0xe4, 0x90,
	0x3a, 0x5b, 0x8a, 0xfc, 0xc1, 0xc5, 0x7c, 0x8f, 0x9d, 0x82, 0x4a, 0xe6, 0x73, 0x75, 0xe6, 0x5c,
	0xb5, 0x49, 0x8e, 0x26, 0x9c, 0xfa, 0x07, 0xa8, 0xf0, 0x93, 0x7f, 0xb8, 0xac, 0x56, 0x54, 0x54,
	0xf3, 0xee, 0x49, 0xa1, 0xdb, 0x5f, 0x36, 0x99, 0xde, 0x4e, 0xc4, 0xf3, 0x01, 0xad, 0x28, 0xeb,
	0x1e, 0xe1, 0xaa, 0x74, 0xdf, 0xf9, 0x64, 0x84, 0xf1, 0x96, 0x8c, 0x81, 0xbc, 0x39, 0x44, 0xf7,
	0xa8, 0xb5, 0xf1, 0x89, 0x8c, 0xd5, 0x37, 0x9b, 0xb1, 0x30, 0x0c, 0x80, 0x1c, 0x6d, 0xfb, 0x5d,
	0xc8, 0x52, 0x31, 0x53, 0x8f, 0xc5, 0x1f, 0x64, 0xec, 0xfa, 0xc3, 0xba, 0x87, 0x56, 0xeb, 0x1e,
	0x7a, 0x5c, 0xf7, 0x90, 0x57, 0x16, 0x7f, 0xe0, 0xf8, 0x25, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xfe,
	0x93, 0x7b, 0xb3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BatchSvcClient is the client API for BatchSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BatchSvcClient interface {
	BatchStart(ctx context.Context, in *BatchSpec, opts ...grpc.CallOption) (*BatchStatus, error)
	BatchCommit(ctx context.Context, in *BatchCtxt, opts ...grpc.CallOption) (*BatchStatus, error)
	BatchAbort(ctx context.Context, in *BatchCtxt, opts ...grpc.CallOption) (*BatchStatus, error)
}

type batchSvcClient struct {
	cc *grpc.ClientConn
}

func NewBatchSvcClient(cc *grpc.ClientConn) BatchSvcClient {
	return &batchSvcClient{cc}
}

func (c *batchSvcClient) BatchStart(ctx context.Context, in *BatchSpec, opts ...grpc.CallOption) (*BatchStatus, error) {
	out := new(BatchStatus)
	err := c.cc.Invoke(ctx, "/pds.BatchSvc/BatchStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchSvcClient) BatchCommit(ctx context.Context, in *BatchCtxt, opts ...grpc.CallOption) (*BatchStatus, error) {
	out := new(BatchStatus)
	err := c.cc.Invoke(ctx, "/pds.BatchSvc/BatchCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchSvcClient) BatchAbort(ctx context.Context, in *BatchCtxt, opts ...grpc.CallOption) (*BatchStatus, error) {
	out := new(BatchStatus)
	err := c.cc.Invoke(ctx, "/pds.BatchSvc/BatchAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchSvcServer is the server API for BatchSvc service.
type BatchSvcServer interface {
	BatchStart(context.Context, *BatchSpec) (*BatchStatus, error)
	BatchCommit(context.Context, *BatchCtxt) (*BatchStatus, error)
	BatchAbort(context.Context, *BatchCtxt) (*BatchStatus, error)
}

// UnimplementedBatchSvcServer can be embedded to have forward compatible implementations.
type UnimplementedBatchSvcServer struct {
}

func (*UnimplementedBatchSvcServer) BatchStart(ctx context.Context, req *BatchSpec) (*BatchStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStart not implemented")
}
func (*UnimplementedBatchSvcServer) BatchCommit(ctx context.Context, req *BatchCtxt) (*BatchStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCommit not implemented")
}
func (*UnimplementedBatchSvcServer) BatchAbort(ctx context.Context, req *BatchCtxt) (*BatchStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAbort not implemented")
}

func RegisterBatchSvcServer(s *grpc.Server, srv BatchSvcServer) {
	s.RegisterService(&_BatchSvc_serviceDesc, srv)
}

func _BatchSvc_BatchStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchSvcServer).BatchStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.BatchSvc/BatchStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchSvcServer).BatchStart(ctx, req.(*BatchSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchSvc_BatchCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCtxt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchSvcServer).BatchCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.BatchSvc/BatchCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchSvcServer).BatchCommit(ctx, req.(*BatchCtxt))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchSvc_BatchAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCtxt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchSvcServer).BatchAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.BatchSvc/BatchAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchSvcServer).BatchAbort(ctx, req.(*BatchCtxt))
	}
	return interceptor(ctx, in, info, handler)
}

var _BatchSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.BatchSvc",
	HandlerType: (*BatchSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchStart",
			Handler:    _BatchSvc_BatchStart_Handler,
		},
		{
			MethodName: "BatchCommit",
			Handler:    _BatchSvc_BatchCommit_Handler,
		},
		{
			MethodName: "BatchAbort",
			Handler:    _BatchSvc_BatchAbort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch.proto",
}

func (m *BatchSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Epoch != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BatchContext != nil {
		{
			size, err := m.BatchContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ApiStatus != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BatchSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovBatch(uint64(m.Epoch))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovBatch(uint64(m.ApiStatus))
	}
	if m.BatchContext != nil {
		l = m.BatchContext.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BatchSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchContext == nil {
				m.BatchContext = &BatchCtxt{}
			}
			if err := m.BatchContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &BatchSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BatchStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBatch
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch   = fmt.Errorf("proto: integer overflow")
)
