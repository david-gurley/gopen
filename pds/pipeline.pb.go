// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pipeline.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MeterStatsGetRequest struct {
	StatsIndexLow        uint32   `protobuf:"varint,1,opt,name=StatsIndexLow,proto3" json:"StatsIndexLow,omitempty"`
	StatsIndexHigh       uint32   `protobuf:"varint,2,opt,name=StatsIndexHigh,proto3" json:"StatsIndexHigh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterStatsGetRequest) Reset()         { *m = MeterStatsGetRequest{} }
func (m *MeterStatsGetRequest) String() string { return proto.CompactTextString(m) }
func (*MeterStatsGetRequest) ProtoMessage()    {}
func (*MeterStatsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{0}
}
func (m *MeterStatsGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterStatsGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterStatsGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterStatsGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterStatsGetRequest.Merge(m, src)
}
func (m *MeterStatsGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterStatsGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterStatsGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterStatsGetRequest proto.InternalMessageInfo

func (m *MeterStatsGetRequest) GetStatsIndexLow() uint32 {
	if m != nil {
		return m.StatsIndexLow
	}
	return 0
}

func (m *MeterStatsGetRequest) GetStatsIndexHigh() uint32 {
	if m != nil {
		return m.StatsIndexHigh
	}
	return 0
}

type MeterStatistics struct {
	StatsIndex           uint32   `protobuf:"varint,1,opt,name=StatsIndex,proto3" json:"StatsIndex,omitempty"`
	TxBytes              uint64   `protobuf:"varint,2,opt,name=TxBytes,proto3" json:"TxBytes,omitempty"`
	RxBytes              uint64   `protobuf:"varint,3,opt,name=RxBytes,proto3" json:"RxBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterStatistics) Reset()         { *m = MeterStatistics{} }
func (m *MeterStatistics) String() string { return proto.CompactTextString(m) }
func (*MeterStatistics) ProtoMessage()    {}
func (*MeterStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{1}
}
func (m *MeterStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterStatistics.Merge(m, src)
}
func (m *MeterStatistics) XXX_Size() int {
	return m.Size()
}
func (m *MeterStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_MeterStatistics proto.InternalMessageInfo

func (m *MeterStatistics) GetStatsIndex() uint32 {
	if m != nil {
		return m.StatsIndex
	}
	return 0
}

func (m *MeterStatistics) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *MeterStatistics) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

type MeterStatsGetResponse struct {
	ApiStatus            ApiStatus          `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Stats                []*MeterStatistics `protobuf:"bytes,2,rep,name=Stats,proto3" json:"Stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeterStatsGetResponse) Reset()         { *m = MeterStatsGetResponse{} }
func (m *MeterStatsGetResponse) String() string { return proto.CompactTextString(m) }
func (*MeterStatsGetResponse) ProtoMessage()    {}
func (*MeterStatsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{2}
}
func (m *MeterStatsGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterStatsGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterStatsGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterStatsGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterStatsGetResponse.Merge(m, src)
}
func (m *MeterStatsGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterStatsGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterStatsGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterStatsGetResponse proto.InternalMessageInfo

func (m *MeterStatsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MeterStatsGetResponse) GetStats() []*MeterStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SessionStats struct {
	StatsIndex           uint32   `protobuf:"varint,1,opt,name=StatsIndex,proto3" json:"StatsIndex,omitempty"`
	InitiatorFlowPkts    uint64   `protobuf:"varint,2,opt,name=InitiatorFlowPkts,proto3" json:"InitiatorFlowPkts,omitempty"`
	InitiatorFlowBytes   uint64   `protobuf:"varint,3,opt,name=InitiatorFlowBytes,proto3" json:"InitiatorFlowBytes,omitempty"`
	ResponderFlowPkts    uint64   `protobuf:"varint,4,opt,name=ResponderFlowPkts,proto3" json:"ResponderFlowPkts,omitempty"`
	ResponderFlowBytes   uint64   `protobuf:"varint,5,opt,name=ResponderFlowBytes,proto3" json:"ResponderFlowBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStats) Reset()         { *m = SessionStats{} }
func (m *SessionStats) String() string { return proto.CompactTextString(m) }
func (*SessionStats) ProtoMessage()    {}
func (*SessionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{3}
}
func (m *SessionStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStats.Merge(m, src)
}
func (m *SessionStats) XXX_Size() int {
	return m.Size()
}
func (m *SessionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStats.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStats proto.InternalMessageInfo

func (m *SessionStats) GetStatsIndex() uint32 {
	if m != nil {
		return m.StatsIndex
	}
	return 0
}

func (m *SessionStats) GetInitiatorFlowPkts() uint64 {
	if m != nil {
		return m.InitiatorFlowPkts
	}
	return 0
}

func (m *SessionStats) GetInitiatorFlowBytes() uint64 {
	if m != nil {
		return m.InitiatorFlowBytes
	}
	return 0
}

func (m *SessionStats) GetResponderFlowPkts() uint64 {
	if m != nil {
		return m.ResponderFlowPkts
	}
	return 0
}

func (m *SessionStats) GetResponderFlowBytes() uint64 {
	if m != nil {
		return m.ResponderFlowBytes
	}
	return 0
}

type SessionStatsGetRequest struct {
	StatsIndexLow        uint32   `protobuf:"varint,1,opt,name=StatsIndexLow,proto3" json:"StatsIndexLow,omitempty"`
	StatsIndexHigh       uint32   `protobuf:"varint,2,opt,name=StatsIndexHigh,proto3" json:"StatsIndexHigh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStatsGetRequest) Reset()         { *m = SessionStatsGetRequest{} }
func (m *SessionStatsGetRequest) String() string { return proto.CompactTextString(m) }
func (*SessionStatsGetRequest) ProtoMessage()    {}
func (*SessionStatsGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{4}
}
func (m *SessionStatsGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStatsGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStatsGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionStatsGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStatsGetRequest.Merge(m, src)
}
func (m *SessionStatsGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *SessionStatsGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStatsGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStatsGetRequest proto.InternalMessageInfo

func (m *SessionStatsGetRequest) GetStatsIndexLow() uint32 {
	if m != nil {
		return m.StatsIndexLow
	}
	return 0
}

func (m *SessionStatsGetRequest) GetStatsIndexHigh() uint32 {
	if m != nil {
		return m.StatsIndexHigh
	}
	return 0
}

type SessionStatsGetResponse struct {
	ApiStatus            ApiStatus       `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Stats                []*SessionStats `protobuf:"bytes,2,rep,name=Stats,proto3" json:"Stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SessionStatsGetResponse) Reset()         { *m = SessionStatsGetResponse{} }
func (m *SessionStatsGetResponse) String() string { return proto.CompactTextString(m) }
func (*SessionStatsGetResponse) ProtoMessage()    {}
func (*SessionStatsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{5}
}
func (m *SessionStatsGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStatsGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStatsGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionStatsGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStatsGetResponse.Merge(m, src)
}
func (m *SessionStatsGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *SessionStatsGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStatsGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStatsGetResponse proto.InternalMessageInfo

func (m *SessionStatsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionStatsGetResponse) GetStats() []*SessionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type FlowStatsSummaryResponse struct {
	ApiStatus            ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	NumTCPv4Sessions     uint64    `protobuf:"varint,2,opt,name=NumTCPv4Sessions,proto3" json:"NumTCPv4Sessions,omitempty"`
	NumUDPv4Sessions     uint64    `protobuf:"varint,3,opt,name=NumUDPv4Sessions,proto3" json:"NumUDPv4Sessions,omitempty"`
	NumICMPv4Sessions    uint64    `protobuf:"varint,4,opt,name=NumICMPv4Sessions,proto3" json:"NumICMPv4Sessions,omitempty"`
	NumOtherIPv4Sessions uint64    `protobuf:"varint,5,opt,name=NumOtherIPv4Sessions,proto3" json:"NumOtherIPv4Sessions,omitempty"`
	NumTCPv6Sessions     uint64    `protobuf:"varint,6,opt,name=NumTCPv6Sessions,proto3" json:"NumTCPv6Sessions,omitempty"`
	NumUDPv6Sessions     uint64    `protobuf:"varint,7,opt,name=NumUDPv6Sessions,proto3" json:"NumUDPv6Sessions,omitempty"`
	NumICMPv6Sessions    uint64    `protobuf:"varint,8,opt,name=NumICMPv6Sessions,proto3" json:"NumICMPv6Sessions,omitempty"`
	NumOtherIPv6Sessions uint64    `protobuf:"varint,9,opt,name=NumOtherIPv6Sessions,proto3" json:"NumOtherIPv6Sessions,omitempty"`
	NumL2Sessions        uint64    `protobuf:"varint,10,opt,name=NumL2Sessions,proto3" json:"NumL2Sessions,omitempty"`
	NumSessionErrors     uint64    `protobuf:"varint,11,opt,name=NumSessionErrors,proto3" json:"NumSessionErrors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FlowStatsSummaryResponse) Reset()         { *m = FlowStatsSummaryResponse{} }
func (m *FlowStatsSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*FlowStatsSummaryResponse) ProtoMessage()    {}
func (*FlowStatsSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{6}
}
func (m *FlowStatsSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlowStatsSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlowStatsSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FlowStatsSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowStatsSummaryResponse.Merge(m, src)
}
func (m *FlowStatsSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *FlowStatsSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowStatsSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FlowStatsSummaryResponse proto.InternalMessageInfo

func (m *FlowStatsSummaryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowStatsSummaryResponse) GetNumTCPv4Sessions() uint64 {
	if m != nil {
		return m.NumTCPv4Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumUDPv4Sessions() uint64 {
	if m != nil {
		return m.NumUDPv4Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumICMPv4Sessions() uint64 {
	if m != nil {
		return m.NumICMPv4Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumOtherIPv4Sessions() uint64 {
	if m != nil {
		return m.NumOtherIPv4Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumTCPv6Sessions() uint64 {
	if m != nil {
		return m.NumTCPv6Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumUDPv6Sessions() uint64 {
	if m != nil {
		return m.NumUDPv6Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumICMPv6Sessions() uint64 {
	if m != nil {
		return m.NumICMPv6Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumOtherIPv6Sessions() uint64 {
	if m != nil {
		return m.NumOtherIPv6Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumL2Sessions() uint64 {
	if m != nil {
		return m.NumL2Sessions
	}
	return 0
}

func (m *FlowStatsSummaryResponse) GetNumSessionErrors() uint64 {
	if m != nil {
		return m.NumSessionErrors
	}
	return 0
}

type DataPathAssistStatsResponse struct {
	ApiStatus                  ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	NumPktsRx                  uint64    `protobuf:"varint,2,opt,name=NumPktsRx,proto3" json:"NumPktsRx,omitempty"`
	NumDrops                   uint64    `protobuf:"varint,3,opt,name=NumDrops,proto3" json:"NumDrops,omitempty"`
	NumDHCPPktsRx              uint64    `protobuf:"varint,4,opt,name=NumDHCPPktsRx,proto3" json:"NumDHCPPktsRx,omitempty"`
	NumDHCPPktsTxtoProxyServer uint64    `protobuf:"varint,5,opt,name=NumDHCPPktsTxtoProxyServer,proto3" json:"NumDHCPPktsTxtoProxyServer,omitempty"`
	NumDHCPPktsTxtoRelayServer uint64    `protobuf:"varint,6,opt,name=NumDHCPPktsTxtoRelayServer,proto3" json:"NumDHCPPktsTxtoRelayServer,omitempty"`
	NumDHCPPktsTxtoRelayClient uint64    `protobuf:"varint,7,opt,name=NumDHCPPktsTxtoRelayClient,proto3" json:"NumDHCPPktsTxtoRelayClient,omitempty"`
	NumDHCPDrops               uint64    `protobuf:"varint,8,opt,name=NumDHCPDrops,proto3" json:"NumDHCPDrops,omitempty"`
	NumARPPktsRx               uint64    `protobuf:"varint,9,opt,name=NumARPPktsRx,proto3" json:"NumARPPktsRx,omitempty"`
	NumARPRepliesSent          uint64    `protobuf:"varint,10,opt,name=NumARPRepliesSent,proto3" json:"NumARPRepliesSent,omitempty"`
	NumARPDrops                uint64    `protobuf:"varint,11,opt,name=NumARPDrops,proto3" json:"NumARPDrops,omitempty"`
	NumSessionsLearned         uint64    `protobuf:"varint,12,opt,name=NumSessionsLearned,proto3" json:"NumSessionsLearned,omitempty"`
	NumSessionsAged            uint64    `protobuf:"varint,13,opt,name=NumSessionsAged,proto3" json:"NumSessionsAged,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}  `json:"-"`
	XXX_unrecognized           []byte    `json:"-"`
	XXX_sizecache              int32     `json:"-"`
}

func (m *DataPathAssistStatsResponse) Reset()         { *m = DataPathAssistStatsResponse{} }
func (m *DataPathAssistStatsResponse) String() string { return proto.CompactTextString(m) }
func (*DataPathAssistStatsResponse) ProtoMessage()    {}
func (*DataPathAssistStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ac67a7adf3df9c7, []int{7}
}
func (m *DataPathAssistStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPathAssistStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPathAssistStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPathAssistStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPathAssistStatsResponse.Merge(m, src)
}
func (m *DataPathAssistStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *DataPathAssistStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPathAssistStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataPathAssistStatsResponse proto.InternalMessageInfo

func (m *DataPathAssistStatsResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DataPathAssistStatsResponse) GetNumPktsRx() uint64 {
	if m != nil {
		return m.NumPktsRx
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDrops() uint64 {
	if m != nil {
		return m.NumDrops
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDHCPPktsRx() uint64 {
	if m != nil {
		return m.NumDHCPPktsRx
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDHCPPktsTxtoProxyServer() uint64 {
	if m != nil {
		return m.NumDHCPPktsTxtoProxyServer
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDHCPPktsTxtoRelayServer() uint64 {
	if m != nil {
		return m.NumDHCPPktsTxtoRelayServer
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDHCPPktsTxtoRelayClient() uint64 {
	if m != nil {
		return m.NumDHCPPktsTxtoRelayClient
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumDHCPDrops() uint64 {
	if m != nil {
		return m.NumDHCPDrops
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumARPPktsRx() uint64 {
	if m != nil {
		return m.NumARPPktsRx
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumARPRepliesSent() uint64 {
	if m != nil {
		return m.NumARPRepliesSent
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumARPDrops() uint64 {
	if m != nil {
		return m.NumARPDrops
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumSessionsLearned() uint64 {
	if m != nil {
		return m.NumSessionsLearned
	}
	return 0
}

func (m *DataPathAssistStatsResponse) GetNumSessionsAged() uint64 {
	if m != nil {
		return m.NumSessionsAged
	}
	return 0
}

func init() {
	proto.RegisterType((*MeterStatsGetRequest)(nil), "pds.MeterStatsGetRequest")
	proto.RegisterType((*MeterStatistics)(nil), "pds.MeterStatistics")
	proto.RegisterType((*MeterStatsGetResponse)(nil), "pds.MeterStatsGetResponse")
	proto.RegisterType((*SessionStats)(nil), "pds.SessionStats")
	proto.RegisterType((*SessionStatsGetRequest)(nil), "pds.SessionStatsGetRequest")
	proto.RegisterType((*SessionStatsGetResponse)(nil), "pds.SessionStatsGetResponse")
	proto.RegisterType((*FlowStatsSummaryResponse)(nil), "pds.FlowStatsSummaryResponse")
	proto.RegisterType((*DataPathAssistStatsResponse)(nil), "pds.DataPathAssistStatsResponse")
}

func init() { proto.RegisterFile("pipeline.proto", fileDescriptor_7ac67a7adf3df9c7) }

var fileDescriptor_7ac67a7adf3df9c7 = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xda, 0x4a,
	0x10, 0x86, 0x40, 0x7e, 0x18, 0x20, 0x24, 0x1b, 0x4e, 0x8e, 0x0f, 0xc9, 0x41, 0xc8, 0x8a, 0xce,
	0x89, 0xaa, 0x8a, 0x4a, 0x24, 0xa2, 0xbd, 0xaa, 0x44, 0x20, 0x6d, 0xa8, 0x08, 0x45, 0x26, 0x7d,
	0x00, 0x27, 0x6c, 0x88, 0x55, 0xfc, 0x53, 0xef, 0x3a, 0x81, 0xb7, 0xe8, 0x5d, 0x5f, 0xa9, 0x97,
	0x7d, 0x83, 0x56, 0xb9, 0xec, 0x53, 0x54, 0xf6, 0x2e, 0xf6, 0x2e, 0x76, 0xd2, 0x34, 0x55, 0x6f,
	0x90, 0xf6, 0x9b, 0x6f, 0xbe, 0x99, 0xf1, 0xcc, 0xce, 0x02, 0xeb, 0x8e, 0xe1, 0xe0, 0x89, 0x61,
	0xe1, 0xba, 0xe3, 0xda, 0xd4, 0x46, 0x19, 0x67, 0x44, 0x2a, 0x30, 0xb6, 0xc7, 0x36, 0x03, 0x2a,
	0x25, 0x13, 0x53, 0xfd, 0x99, 0xff, 0xc3, 0x81, 0x3c, 0x9d, 0x39, 0x98, 0xb0, 0x83, 0x3a, 0x82,
	0xf2, 0x29, 0xa6, 0xd8, 0x1d, 0x52, 0x9d, 0x92, 0xd7, 0x98, 0x6a, 0xf8, 0x83, 0x87, 0x09, 0x45,
	0x7b, 0x50, 0x0c, 0xa0, 0xae, 0x35, 0xc2, 0xd3, 0x9e, 0x7d, 0xa3, 0xa4, 0x6b, 0xe9, 0xfd, 0xa2,
	0x26, 0x83, 0xe8, 0x3f, 0x58, 0x8f, 0x80, 0x13, 0x63, 0x7c, 0xa5, 0x2c, 0x05, 0xb4, 0x05, 0x54,
	0xc5, 0x50, 0x0a, 0xa3, 0x18, 0x84, 0x1a, 0x17, 0x04, 0x55, 0x01, 0x22, 0x12, 0x57, 0x17, 0x10,
	0xa4, 0xc0, 0xea, 0xd9, 0xf4, 0x68, 0x46, 0x31, 0x09, 0x34, 0xb3, 0xda, 0xfc, 0xe8, 0x5b, 0x34,
	0x6e, 0xc9, 0x30, 0x0b, 0x3f, 0xaa, 0x04, 0xfe, 0x5a, 0x28, 0x86, 0x38, 0xb6, 0x45, 0x30, 0xaa,
	0x43, 0xae, 0xe5, 0x18, 0x3e, 0xec, 0x91, 0x20, 0xd6, 0x7a, 0x63, 0xa3, 0xce, 0x3e, 0x43, 0x88,
	0x6b, 0x11, 0x05, 0x3d, 0x81, 0xe5, 0x40, 0x43, 0x59, 0xaa, 0x65, 0xf6, 0xf3, 0x8d, 0x72, 0xdd,
	0x19, 0x91, 0xfa, 0x42, 0x05, 0x1a, 0xa3, 0xa8, 0xdf, 0xd3, 0x50, 0x18, 0x62, 0x42, 0x0c, 0xdb,
	0x0a, 0x80, 0x9f, 0x56, 0xf6, 0x14, 0x36, 0xbb, 0x96, 0x41, 0x0d, 0x9d, 0xda, 0xee, 0xab, 0x89,
	0x7d, 0x33, 0x78, 0x4f, 0xe7, 0x35, 0xc6, 0x0d, 0xa8, 0x0e, 0x48, 0x02, 0xc5, 0xc2, 0x13, 0x2c,
	0xbe, 0x3a, 0x2b, 0x7b, 0x84, 0x23, 0xf5, 0x2c, 0x53, 0x8f, 0x19, 0x7c, 0x75, 0x09, 0x64, 0xea,
	0xcb, 0x4c, 0x3d, 0x6e, 0x51, 0x2f, 0x61, 0x5b, 0xac, 0xf5, 0x8f, 0x0d, 0x8c, 0x0b, 0x7f, 0xc7,
	0xe2, 0x3c, 0xb2, 0x97, 0xff, 0xcb, 0xbd, 0xdc, 0x0c, 0x7a, 0x29, 0x8a, 0xcf, 0x1b, 0xf9, 0x31,
	0x0b, 0x8a, 0x5f, 0x69, 0x70, 0x1a, 0x7a, 0xa6, 0xa9, 0xbb, 0xb3, 0xdf, 0x98, 0xa0, 0x8d, 0xbe,
	0x67, 0x9e, 0xb5, 0x07, 0xd7, 0x87, 0x3c, 0xd6, 0xbc, 0xc7, 0x31, 0x9c, 0x73, 0xdf, 0x75, 0x44,
	0x6e, 0x26, 0xe4, 0x4a, 0xb8, 0xdf, 0xde, 0xbe, 0x67, 0x76, 0xdb, 0xa7, 0x22, 0x99, 0xb7, 0x37,
	0x66, 0x40, 0x0d, 0x28, 0xf7, 0x3d, 0xf3, 0x2d, 0xbd, 0xc2, 0x6e, 0x57, 0x74, 0x60, 0x0d, 0x4e,
	0xb4, 0x09, 0x99, 0x37, 0x43, 0xfe, 0x8a, 0x94, 0x79, 0x33, 0x21, 0xf3, 0x88, 0xbb, 0x2a, 0x65,
	0xde, 0x4c, 0xca, 0x3c, 0x22, 0xaf, 0xc9, 0x99, 0x37, 0xef, 0xc8, 0x3c, 0x72, 0xc8, 0xc5, 0x32,
	0x8f, 0x7c, 0xf6, 0xa0, 0xd8, 0xf7, 0xcc, 0x5e, 0x23, 0x24, 0x43, 0x40, 0x96, 0x41, 0x9e, 0x33,
	0x3f, 0x1e, 0xbb, 0xae, 0xed, 0x12, 0x25, 0x1f, 0xe6, 0x2c, 0xe1, 0xea, 0xd7, 0x2c, 0xec, 0x74,
	0x74, 0xaa, 0x0f, 0x74, 0x7a, 0xd5, 0x22, 0xc4, 0x20, 0x94, 0x4d, 0xcc, 0x63, 0xa7, 0x62, 0x17,
	0x72, 0x7d, 0xcf, 0xf4, 0x6f, 0x9e, 0x36, 0xe5, 0xe3, 0x10, 0x01, 0xa8, 0x02, 0x6b, 0x7d, 0xcf,
	0xec, 0xb8, 0xb6, 0x33, 0xef, 0x7f, 0x78, 0xe6, 0xb5, 0x75, 0x4e, 0xda, 0x03, 0xee, 0x9d, 0x0d,
	0x6b, 0x8b, 0x40, 0xf4, 0x12, 0x2a, 0x02, 0x70, 0x36, 0xa5, 0xf6, 0xc0, 0xb5, 0xa7, 0xb3, 0x21,
	0x76, 0xaf, 0xb1, 0xcb, 0xbb, 0x7e, 0x0f, 0x23, 0xc1, 0x5f, 0xc3, 0x13, 0x7d, 0xee, 0xbf, 0x92,
	0xe8, 0x2f, 0x30, 0xee, 0xf2, 0x6f, 0x4f, 0x0c, 0x6c, 0x51, 0x3e, 0x19, 0xf7, 0x30, 0x90, 0x0a,
	0x05, 0x6e, 0x65, 0x5f, 0x81, 0x8d, 0x87, 0x84, 0x71, 0x4e, 0x4b, 0x9b, 0x7f, 0x88, 0x5c, 0xc8,
	0x09, 0x31, 0x3e, 0x6b, 0x2d, 0x6d, 0xa0, 0x61, 0x67, 0x62, 0x60, 0x32, 0xf4, 0xc3, 0x43, 0x38,
	0x6b, 0xb2, 0x01, 0xd5, 0x20, 0xcf, 0x40, 0x16, 0x94, 0x0d, 0x83, 0x08, 0xf9, 0x6b, 0x32, 0x9a,
	0x0d, 0xd2, 0xc3, 0xba, 0x6b, 0xe1, 0x91, 0x52, 0x60, 0x6b, 0x32, 0x6e, 0x41, 0xfb, 0x50, 0x12,
	0xd0, 0xd6, 0x18, 0x8f, 0x94, 0x62, 0x40, 0x5e, 0x84, 0x1b, 0x9f, 0xb2, 0x90, 0x1f, 0xf0, 0x17,
	0x7c, 0x78, 0x7d, 0x81, 0x4e, 0xa0, 0x28, 0x3d, 0x61, 0xe8, 0x1f, 0xf9, 0xed, 0x11, 0x56, 0x6e,
	0xa5, 0x92, 0x64, 0x62, 0x93, 0xa9, 0xa6, 0x50, 0x1f, 0x4a, 0x0b, 0x2b, 0x14, 0xed, 0xc4, 0x76,
	0x9f, 0xa0, 0xb6, 0x9b, 0x6c, 0x0c, 0xf5, 0x3a, 0xb0, 0xb5, 0xb8, 0x1d, 0x7d, 0xcd, 0x02, 0x9f,
	0xf7, 0x63, 0xd3, 0xa1, 0xb3, 0xca, 0xbf, 0x81, 0xc8, 0x5d, 0x5b, 0x54, 0x4d, 0xa1, 0x37, 0xb0,
	0x9d, 0x70, 0xa1, 0xe2, 0x42, 0xb5, 0x40, 0xe8, 0x9e, 0xbb, 0xa7, 0xa6, 0xd0, 0x73, 0xe9, 0x91,
	0x60, 0xaf, 0xf2, 0xb1, 0xa5, 0x9f, 0x4f, 0xf0, 0x82, 0x98, 0x74, 0x52, 0x53, 0xe8, 0x05, 0x28,
	0x31, 0xc7, 0x8e, 0x41, 0x1e, 0xe0, 0x79, 0x00, 0x5b, 0x3d, 0xe3, 0xf2, 0x17, 0xc3, 0x1d, 0x42,
	0x59, 0x72, 0x7a, 0x50, 0xa8, 0xa3, 0xc2, 0xe7, 0xdb, 0x6a, 0xfa, 0xcb, 0x6d, 0x35, 0xfd, 0xed,
	0xb6, 0x9a, 0x3e, 0x5f, 0x09, 0xfe, 0xae, 0x1d, 0xfc, 0x08, 0x00, 0x00, 0xff, 0xff, 0x27, 0x0b,
	0xd0, 0x03, 0xef, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PipelineSvcClient is the client API for PipelineSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PipelineSvcClient interface {
	MeterStatsGet(ctx context.Context, in *MeterStatsGetRequest, opts ...grpc.CallOption) (*MeterStatsGetResponse, error)
	SessionStatsGet(ctx context.Context, in *SessionStatsGetRequest, opts ...grpc.CallOption) (*SessionStatsGetResponse, error)
	FlowStatsSummaryGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlowStatsSummaryResponse, error)
	DataPathAssistStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataPathAssistStatsResponse, error)
	SessionStatisticsEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SessionStatisticsDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	LifStatisticsEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	LifStatisticsDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type pipelineSvcClient struct {
	cc *grpc.ClientConn
}

func NewPipelineSvcClient(cc *grpc.ClientConn) PipelineSvcClient {
	return &pipelineSvcClient{cc}
}

func (c *pipelineSvcClient) MeterStatsGet(ctx context.Context, in *MeterStatsGetRequest, opts ...grpc.CallOption) (*MeterStatsGetResponse, error) {
	out := new(MeterStatsGetResponse)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/MeterStatsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) SessionStatsGet(ctx context.Context, in *SessionStatsGetRequest, opts ...grpc.CallOption) (*SessionStatsGetResponse, error) {
	out := new(SessionStatsGetResponse)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/SessionStatsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) FlowStatsSummaryGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlowStatsSummaryResponse, error) {
	out := new(FlowStatsSummaryResponse)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/FlowStatsSummaryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) DataPathAssistStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataPathAssistStatsResponse, error) {
	out := new(DataPathAssistStatsResponse)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/DataPathAssistStatsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) SessionStatisticsEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/SessionStatisticsEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) SessionStatisticsDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/SessionStatisticsDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) LifStatisticsEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/LifStatisticsEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineSvcClient) LifStatisticsDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.PipelineSvc/LifStatisticsDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineSvcServer is the server API for PipelineSvc service.
type PipelineSvcServer interface {
	MeterStatsGet(context.Context, *MeterStatsGetRequest) (*MeterStatsGetResponse, error)
	SessionStatsGet(context.Context, *SessionStatsGetRequest) (*SessionStatsGetResponse, error)
	FlowStatsSummaryGet(context.Context, *Empty) (*FlowStatsSummaryResponse, error)
	DataPathAssistStatsGet(context.Context, *Empty) (*DataPathAssistStatsResponse, error)
	SessionStatisticsEnable(context.Context, *Empty) (*Empty, error)
	SessionStatisticsDisable(context.Context, *Empty) (*Empty, error)
	LifStatisticsEnable(context.Context, *Empty) (*Empty, error)
	LifStatisticsDisable(context.Context, *Empty) (*Empty, error)
}

// UnimplementedPipelineSvcServer can be embedded to have forward compatible implementations.
type UnimplementedPipelineSvcServer struct {
}

func (*UnimplementedPipelineSvcServer) MeterStatsGet(ctx context.Context, req *MeterStatsGetRequest) (*MeterStatsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterStatsGet not implemented")
}
func (*UnimplementedPipelineSvcServer) SessionStatsGet(ctx context.Context, req *SessionStatsGetRequest) (*SessionStatsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStatsGet not implemented")
}
func (*UnimplementedPipelineSvcServer) FlowStatsSummaryGet(ctx context.Context, req *Empty) (*FlowStatsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStatsSummaryGet not implemented")
}
func (*UnimplementedPipelineSvcServer) DataPathAssistStatsGet(ctx context.Context, req *Empty) (*DataPathAssistStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPathAssistStatsGet not implemented")
}
func (*UnimplementedPipelineSvcServer) SessionStatisticsEnable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStatisticsEnable not implemented")
}
func (*UnimplementedPipelineSvcServer) SessionStatisticsDisable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStatisticsDisable not implemented")
}
func (*UnimplementedPipelineSvcServer) LifStatisticsEnable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifStatisticsEnable not implemented")
}
func (*UnimplementedPipelineSvcServer) LifStatisticsDisable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifStatisticsDisable not implemented")
}

func RegisterPipelineSvcServer(s *grpc.Server, srv PipelineSvcServer) {
	s.RegisterService(&_PipelineSvc_serviceDesc, srv)
}

func _PipelineSvc_MeterStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterStatsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).MeterStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/MeterStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).MeterStatsGet(ctx, req.(*MeterStatsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_SessionStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionStatsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).SessionStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/SessionStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).SessionStatsGet(ctx, req.(*SessionStatsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_FlowStatsSummaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).FlowStatsSummaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/FlowStatsSummaryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).FlowStatsSummaryGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_DataPathAssistStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).DataPathAssistStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/DataPathAssistStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).DataPathAssistStatsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_SessionStatisticsEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).SessionStatisticsEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/SessionStatisticsEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).SessionStatisticsEnable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_SessionStatisticsDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).SessionStatisticsDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/SessionStatisticsDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).SessionStatisticsDisable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_LifStatisticsEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).LifStatisticsEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/LifStatisticsEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).LifStatisticsEnable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineSvc_LifStatisticsDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineSvcServer).LifStatisticsDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PipelineSvc/LifStatisticsDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineSvcServer).LifStatisticsDisable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PipelineSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.PipelineSvc",
	HandlerType: (*PipelineSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MeterStatsGet",
			Handler:    _PipelineSvc_MeterStatsGet_Handler,
		},
		{
			MethodName: "SessionStatsGet",
			Handler:    _PipelineSvc_SessionStatsGet_Handler,
		},
		{
			MethodName: "FlowStatsSummaryGet",
			Handler:    _PipelineSvc_FlowStatsSummaryGet_Handler,
		},
		{
			MethodName: "DataPathAssistStatsGet",
			Handler:    _PipelineSvc_DataPathAssistStatsGet_Handler,
		},
		{
			MethodName: "SessionStatisticsEnable",
			Handler:    _PipelineSvc_SessionStatisticsEnable_Handler,
		},
		{
			MethodName: "SessionStatisticsDisable",
			Handler:    _PipelineSvc_SessionStatisticsDisable_Handler,
		},
		{
			MethodName: "LifStatisticsEnable",
			Handler:    _PipelineSvc_LifStatisticsEnable_Handler,
		},
		{
			MethodName: "LifStatisticsDisable",
			Handler:    _PipelineSvc_LifStatisticsDisable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline.proto",
}

func (m *MeterStatsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterStatsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterStatsGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatsIndexHigh != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndexHigh))
		i--
		dAtA[i] = 0x10
	}
	if m.StatsIndexLow != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndexLow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RxBytes != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.RxBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.TxBytes != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.TxBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.StatsIndex != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterStatsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterStatsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterStatsGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipeline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ResponderFlowBytes != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ResponderFlowBytes))
		i--
		dAtA[i] = 0x28
	}
	if m.ResponderFlowPkts != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ResponderFlowPkts))
		i--
		dAtA[i] = 0x20
	}
	if m.InitiatorFlowBytes != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.InitiatorFlowBytes))
		i--
		dAtA[i] = 0x18
	}
	if m.InitiatorFlowPkts != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.InitiatorFlowPkts))
		i--
		dAtA[i] = 0x10
	}
	if m.StatsIndex != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionStatsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStatsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionStatsGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatsIndexHigh != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndexHigh))
		i--
		dAtA[i] = 0x10
	}
	if m.StatsIndexLow != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.StatsIndexLow))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionStatsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStatsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionStatsGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPipeline(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FlowStatsSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStatsSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FlowStatsSummaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumSessionErrors != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumSessionErrors))
		i--
		dAtA[i] = 0x58
	}
	if m.NumL2Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumL2Sessions))
		i--
		dAtA[i] = 0x50
	}
	if m.NumOtherIPv6Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumOtherIPv6Sessions))
		i--
		dAtA[i] = 0x48
	}
	if m.NumICMPv6Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumICMPv6Sessions))
		i--
		dAtA[i] = 0x40
	}
	if m.NumUDPv6Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumUDPv6Sessions))
		i--
		dAtA[i] = 0x38
	}
	if m.NumTCPv6Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumTCPv6Sessions))
		i--
		dAtA[i] = 0x30
	}
	if m.NumOtherIPv4Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumOtherIPv4Sessions))
		i--
		dAtA[i] = 0x28
	}
	if m.NumICMPv4Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumICMPv4Sessions))
		i--
		dAtA[i] = 0x20
	}
	if m.NumUDPv4Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumUDPv4Sessions))
		i--
		dAtA[i] = 0x18
	}
	if m.NumTCPv4Sessions != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumTCPv4Sessions))
		i--
		dAtA[i] = 0x10
	}
	if m.ApiStatus != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataPathAssistStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPathAssistStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPathAssistStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumSessionsAged != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumSessionsAged))
		i--
		dAtA[i] = 0x68
	}
	if m.NumSessionsLearned != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumSessionsLearned))
		i--
		dAtA[i] = 0x60
	}
	if m.NumARPDrops != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumARPDrops))
		i--
		dAtA[i] = 0x58
	}
	if m.NumARPRepliesSent != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumARPRepliesSent))
		i--
		dAtA[i] = 0x50
	}
	if m.NumARPPktsRx != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumARPPktsRx))
		i--
		dAtA[i] = 0x48
	}
	if m.NumDHCPDrops != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDHCPDrops))
		i--
		dAtA[i] = 0x40
	}
	if m.NumDHCPPktsTxtoRelayClient != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDHCPPktsTxtoRelayClient))
		i--
		dAtA[i] = 0x38
	}
	if m.NumDHCPPktsTxtoRelayServer != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDHCPPktsTxtoRelayServer))
		i--
		dAtA[i] = 0x30
	}
	if m.NumDHCPPktsTxtoProxyServer != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDHCPPktsTxtoProxyServer))
		i--
		dAtA[i] = 0x28
	}
	if m.NumDHCPPktsRx != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDHCPPktsRx))
		i--
		dAtA[i] = 0x20
	}
	if m.NumDrops != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumDrops))
		i--
		dAtA[i] = 0x18
	}
	if m.NumPktsRx != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.NumPktsRx))
		i--
		dAtA[i] = 0x10
	}
	if m.ApiStatus != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipeline(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipeline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MeterStatsGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsIndexLow != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndexLow))
	}
	if m.StatsIndexHigh != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndexHigh))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsIndex != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndex))
	}
	if m.TxBytes != 0 {
		n += 1 + sovPipeline(uint64(m.TxBytes))
	}
	if m.RxBytes != 0 {
		n += 1 + sovPipeline(uint64(m.RxBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterStatsGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPipeline(uint64(m.ApiStatus))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsIndex != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndex))
	}
	if m.InitiatorFlowPkts != 0 {
		n += 1 + sovPipeline(uint64(m.InitiatorFlowPkts))
	}
	if m.InitiatorFlowBytes != 0 {
		n += 1 + sovPipeline(uint64(m.InitiatorFlowBytes))
	}
	if m.ResponderFlowPkts != 0 {
		n += 1 + sovPipeline(uint64(m.ResponderFlowPkts))
	}
	if m.ResponderFlowBytes != 0 {
		n += 1 + sovPipeline(uint64(m.ResponderFlowBytes))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStatsGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatsIndexLow != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndexLow))
	}
	if m.StatsIndexHigh != 0 {
		n += 1 + sovPipeline(uint64(m.StatsIndexHigh))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStatsGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPipeline(uint64(m.ApiStatus))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovPipeline(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlowStatsSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPipeline(uint64(m.ApiStatus))
	}
	if m.NumTCPv4Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumTCPv4Sessions))
	}
	if m.NumUDPv4Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumUDPv4Sessions))
	}
	if m.NumICMPv4Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumICMPv4Sessions))
	}
	if m.NumOtherIPv4Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumOtherIPv4Sessions))
	}
	if m.NumTCPv6Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumTCPv6Sessions))
	}
	if m.NumUDPv6Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumUDPv6Sessions))
	}
	if m.NumICMPv6Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumICMPv6Sessions))
	}
	if m.NumOtherIPv6Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumOtherIPv6Sessions))
	}
	if m.NumL2Sessions != 0 {
		n += 1 + sovPipeline(uint64(m.NumL2Sessions))
	}
	if m.NumSessionErrors != 0 {
		n += 1 + sovPipeline(uint64(m.NumSessionErrors))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataPathAssistStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPipeline(uint64(m.ApiStatus))
	}
	if m.NumPktsRx != 0 {
		n += 1 + sovPipeline(uint64(m.NumPktsRx))
	}
	if m.NumDrops != 0 {
		n += 1 + sovPipeline(uint64(m.NumDrops))
	}
	if m.NumDHCPPktsRx != 0 {
		n += 1 + sovPipeline(uint64(m.NumDHCPPktsRx))
	}
	if m.NumDHCPPktsTxtoProxyServer != 0 {
		n += 1 + sovPipeline(uint64(m.NumDHCPPktsTxtoProxyServer))
	}
	if m.NumDHCPPktsTxtoRelayServer != 0 {
		n += 1 + sovPipeline(uint64(m.NumDHCPPktsTxtoRelayServer))
	}
	if m.NumDHCPPktsTxtoRelayClient != 0 {
		n += 1 + sovPipeline(uint64(m.NumDHCPPktsTxtoRelayClient))
	}
	if m.NumDHCPDrops != 0 {
		n += 1 + sovPipeline(uint64(m.NumDHCPDrops))
	}
	if m.NumARPPktsRx != 0 {
		n += 1 + sovPipeline(uint64(m.NumARPPktsRx))
	}
	if m.NumARPRepliesSent != 0 {
		n += 1 + sovPipeline(uint64(m.NumARPRepliesSent))
	}
	if m.NumARPDrops != 0 {
		n += 1 + sovPipeline(uint64(m.NumARPDrops))
	}
	if m.NumSessionsLearned != 0 {
		n += 1 + sovPipeline(uint64(m.NumSessionsLearned))
	}
	if m.NumSessionsAged != 0 {
		n += 1 + sovPipeline(uint64(m.NumSessionsAged))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPipeline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipeline(x uint64) (n int) {
	return sovPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeterStatsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterStatsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterStatsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndexLow", wireType)
			}
			m.StatsIndexLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndexLow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndexHigh", wireType)
			}
			m.StatsIndexHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndexHigh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndex", wireType)
			}
			m.StatsIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			m.TxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytes", wireType)
			}
			m.RxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterStatsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterStatsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterStatsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &MeterStatistics{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndex", wireType)
			}
			m.StatsIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorFlowPkts", wireType)
			}
			m.InitiatorFlowPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatorFlowPkts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorFlowBytes", wireType)
			}
			m.InitiatorFlowBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatorFlowBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderFlowPkts", wireType)
			}
			m.ResponderFlowPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponderFlowPkts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderFlowBytes", wireType)
			}
			m.ResponderFlowBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponderFlowBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStatsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStatsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStatsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndexLow", wireType)
			}
			m.StatsIndexLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndexLow |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndexHigh", wireType)
			}
			m.StatsIndexHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndexHigh |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStatsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStatsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStatsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &SessionStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStatsSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStatsSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStatsSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTCPv4Sessions", wireType)
			}
			m.NumTCPv4Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTCPv4Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUDPv4Sessions", wireType)
			}
			m.NumUDPv4Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUDPv4Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumICMPv4Sessions", wireType)
			}
			m.NumICMPv4Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumICMPv4Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOtherIPv4Sessions", wireType)
			}
			m.NumOtherIPv4Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOtherIPv4Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTCPv6Sessions", wireType)
			}
			m.NumTCPv6Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTCPv6Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUDPv6Sessions", wireType)
			}
			m.NumUDPv6Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUDPv6Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumICMPv6Sessions", wireType)
			}
			m.NumICMPv6Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumICMPv6Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOtherIPv6Sessions", wireType)
			}
			m.NumOtherIPv6Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOtherIPv6Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL2Sessions", wireType)
			}
			m.NumL2Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL2Sessions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSessionErrors", wireType)
			}
			m.NumSessionErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSessionErrors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPathAssistStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPathAssistStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPathAssistStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPktsRx", wireType)
			}
			m.NumPktsRx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPktsRx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDrops", wireType)
			}
			m.NumDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDrops |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDHCPPktsRx", wireType)
			}
			m.NumDHCPPktsRx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDHCPPktsRx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDHCPPktsTxtoProxyServer", wireType)
			}
			m.NumDHCPPktsTxtoProxyServer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDHCPPktsTxtoProxyServer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDHCPPktsTxtoRelayServer", wireType)
			}
			m.NumDHCPPktsTxtoRelayServer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDHCPPktsTxtoRelayServer |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDHCPPktsTxtoRelayClient", wireType)
			}
			m.NumDHCPPktsTxtoRelayClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDHCPPktsTxtoRelayClient |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDHCPDrops", wireType)
			}
			m.NumDHCPDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDHCPDrops |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumARPPktsRx", wireType)
			}
			m.NumARPPktsRx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumARPPktsRx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumARPRepliesSent", wireType)
			}
			m.NumARPRepliesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumARPRepliesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumARPDrops", wireType)
			}
			m.NumARPDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumARPDrops |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSessionsLearned", wireType)
			}
			m.NumSessionsLearned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSessionsLearned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSessionsAged", wireType)
			}
			m.NumSessionsAged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSessionsAged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPipeline
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPipeline(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPipeline
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPipeline = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipeline   = fmt.Errorf("proto: integer overflow")
)
