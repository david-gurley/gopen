// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meter.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MeterRuleAttrs struct {
	// IP prefix to match
	Prefix *IPPrefix `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// priority of this rule
	// NOTE:
	// 1. lower the numerical value, higher the priority in the datapath
	// 2. a meter policy MUST have either all the rules with priority set or no
	//    priority set on all the rules
	// 3. if multiple rules have same priority, prefix with longest prefix length
	//    will take effect and its meter class is picked
	// 4. if no priority value is set (i.e. 0) then meter prefix priority is
	//    computed as 128 - <prefix length>, so longer prefixes will have higher
	//    precedence over shorter ones giving regular LPM semantics
	// 5. Priority attribute on the rule is used only when PriorityEn is set to
	//    true on the corresponding MeterPolicySpec
	Priority uint32 `protobuf:"varint,2,opt,name=Priority,proto3" json:"Priority,omitempty" meta:range:0-1023`
	// TxMeterClass is meter class used for traffic egressing from the vnic
	// NOTE:
	// 1. upto 4K meter classes per vnic are supported, so meter class value must
	//    be between 1 to 4K - 1A
	// 2. meter class value of 0 is reserved
	// 3. Tx/Rx is orthogonal to whether vnic is client/server side of the
	//    connection (i.e. vnic could be session initiator or responder)
	TxMeterClass uint32 `protobuf:"varint,3,opt,name=TxMeterClass,proto3" json:"TxMeterClass,omitempty" meta:range:1-4095`
	// RxMeterClass is meter class used for traffic ingressing into the vnic
	// NOTE:
	// 1. upto 4K meter classes per vnic are supported, so meter class value must
	//    be between 1 to 4K - 1
	// 2. meter class value of 0 is reserved
	// 3. Tx/Rx is orthogonal to whether vnic is client/server side of the
	//    connection (i.e. vnic could be session initiator or responder)
	RxMeterClass         uint32   `protobuf:"varint,4,opt,name=RxMeterClass,proto3" json:"RxMeterClass,omitempty" meta:range:1-4095`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterRuleAttrs) Reset()         { *m = MeterRuleAttrs{} }
func (m *MeterRuleAttrs) String() string { return proto.CompactTextString(m) }
func (*MeterRuleAttrs) ProtoMessage()    {}
func (*MeterRuleAttrs) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{0}
}
func (m *MeterRuleAttrs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleAttrs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleAttrs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleAttrs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleAttrs.Merge(m, src)
}
func (m *MeterRuleAttrs) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleAttrs) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleAttrs.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleAttrs proto.InternalMessageInfo

func (m *MeterRuleAttrs) GetPrefix() *IPPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *MeterRuleAttrs) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *MeterRuleAttrs) GetTxMeterClass() uint32 {
	if m != nil {
		return m.TxMeterClass
	}
	return 0
}

func (m *MeterRuleAttrs) GetRxMeterClass() uint32 {
	if m != nil {
		return m.RxMeterClass
	}
	return 0
}

// meter rule specific configuration
type MeterRuleInfo struct {
	// optional rule id needed if incremental rule ADD/DEL/UPD functionality
	// is needed
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// rule attributes
	Attrs                *MeterRuleAttrs `protobuf:"bytes,2,opt,name=Attrs,proto3" json:"Attrs,omitempty" meta:mandatory`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MeterRuleInfo) Reset()         { *m = MeterRuleInfo{} }
func (m *MeterRuleInfo) String() string { return proto.CompactTextString(m) }
func (*MeterRuleInfo) ProtoMessage()    {}
func (*MeterRuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{1}
}
func (m *MeterRuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleInfo.Merge(m, src)
}
func (m *MeterRuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleInfo proto.InternalMessageInfo

func (m *MeterRuleInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MeterRuleInfo) GetAttrs() *MeterRuleAttrs {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// meter policy specification
// NOTE: any time a meter policy specification changes, client is expected to
//       send full new meter specification (i.e., no incremental add/del/upd of
//       prefixes in the metering policy is supported)
type MeterPolicySpec struct {
	// unique meter policy id
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// IP address family
	Af IPAF `protobuf:"varint,2,opt,name=Af,proto3,enum=types.IPAF" json:"Af,omitempty" meta:mandatory,immutable`
	// enable or disable priority based meter rules
	PriorityEn bool `protobuf:"varint,3,opt,name=PriorityEn,proto3" json:"PriorityEn,omitempty" meta:immutable,default=false`
	// list of meter rules
	// NOTE: in a given meter policy, same prefix must not appear more than once
	Rules                []*MeterRuleInfo `protobuf:"bytes,4,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeterPolicySpec) Reset()         { *m = MeterPolicySpec{} }
func (m *MeterPolicySpec) String() string { return proto.CompactTextString(m) }
func (*MeterPolicySpec) ProtoMessage()    {}
func (*MeterPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{2}
}
func (m *MeterPolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicySpec.Merge(m, src)
}
func (m *MeterPolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicySpec proto.InternalMessageInfo

func (m *MeterPolicySpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MeterPolicySpec) GetAf() IPAF {
	if m != nil {
		return m.Af
	}
	return IPAF_IP_AF_NONE
}

func (m *MeterPolicySpec) GetPriorityEn() bool {
	if m != nil {
		return m.PriorityEn
	}
	return false
}

func (m *MeterPolicySpec) GetRules() []*MeterRuleInfo {
	if m != nil {
		return m.Rules
	}
	return nil
}

// operational status of the meter policy, if any
type MeterPolicyStatus struct {
	// meter policy base address
	MeterPolicyBaseAddr  uint64   `protobuf:"varint,1,opt,name=MeterPolicyBaseAddr,proto3" json:"MeterPolicyBaseAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterPolicyStatus) Reset()         { *m = MeterPolicyStatus{} }
func (m *MeterPolicyStatus) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyStatus) ProtoMessage()    {}
func (*MeterPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{3}
}
func (m *MeterPolicyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyStatus.Merge(m, src)
}
func (m *MeterPolicyStatus) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyStatus proto.InternalMessageInfo

func (m *MeterPolicyStatus) GetMeterPolicyBaseAddr() uint64 {
	if m != nil {
		return m.MeterPolicyBaseAddr
	}
	return 0
}

// stats of the meter policy, if any
type MeterPolicyStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterPolicyStats) Reset()         { *m = MeterPolicyStats{} }
func (m *MeterPolicyStats) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyStats) ProtoMessage()    {}
func (*MeterPolicyStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{4}
}
func (m *MeterPolicyStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyStats.Merge(m, src)
}
func (m *MeterPolicyStats) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyStats.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyStats proto.InternalMessageInfo

// meter policy object
type MeterPolicy struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *MeterPolicySpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *MeterPolicyStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	Stats                *MeterPolicyStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeterPolicy) Reset()         { *m = MeterPolicy{} }
func (m *MeterPolicy) String() string { return proto.CompactTextString(m) }
func (*MeterPolicy) ProtoMessage()    {}
func (*MeterPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{5}
}
func (m *MeterPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicy.Merge(m, src)
}
func (m *MeterPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicy proto.InternalMessageInfo

func (m *MeterPolicy) GetSpec() *MeterPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MeterPolicy) GetStatus() *MeterPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MeterPolicy) GetStats() *MeterPolicyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// meter policy create and update request
type MeterPolicyRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// batched request
	Request              []*MeterPolicySpec `protobuf:"bytes,2,rep,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MeterPolicyRequest) Reset()         { *m = MeterPolicyRequest{} }
func (m *MeterPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyRequest) ProtoMessage()    {}
func (*MeterPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{6}
}
func (m *MeterPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyRequest.Merge(m, src)
}
func (m *MeterPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyRequest proto.InternalMessageInfo

func (m *MeterPolicyRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *MeterPolicyRequest) GetRequest() []*MeterPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// meter policy create and update response
type MeterPolicyResponse struct {
	ApiStatus            ApiStatus            `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*MeterPolicyStatus `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MeterPolicyResponse) Reset()         { *m = MeterPolicyResponse{} }
func (m *MeterPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyResponse) ProtoMessage()    {}
func (*MeterPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{7}
}
func (m *MeterPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyResponse.Merge(m, src)
}
func (m *MeterPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyResponse proto.InternalMessageInfo

func (m *MeterPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MeterPolicyResponse) GetResponse() []*MeterPolicyStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// meter policy get request
type MeterPolicyGetRequest struct {
	// batched request
	Id                   [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterPolicyGetRequest) Reset()         { *m = MeterPolicyGetRequest{} }
func (m *MeterPolicyGetRequest) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyGetRequest) ProtoMessage()    {}
func (*MeterPolicyGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{8}
}
func (m *MeterPolicyGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyGetRequest.Merge(m, src)
}
func (m *MeterPolicyGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyGetRequest proto.InternalMessageInfo

func (m *MeterPolicyGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// meter policy table get response
type MeterPolicyGetResponse struct {
	ApiStatus            ApiStatus      `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response             []*MeterPolicy `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeterPolicyGetResponse) Reset()         { *m = MeterPolicyGetResponse{} }
func (m *MeterPolicyGetResponse) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyGetResponse) ProtoMessage()    {}
func (*MeterPolicyGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{9}
}
func (m *MeterPolicyGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyGetResponse.Merge(m, src)
}
func (m *MeterPolicyGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyGetResponse proto.InternalMessageInfo

func (m *MeterPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MeterPolicyGetResponse) GetResponse() []*MeterPolicy {
	if m != nil {
		return m.Response
	}
	return nil
}

// meter policy delete request
type MeterPolicyDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// batched request
	Id                   [][]byte `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterPolicyDeleteRequest) Reset()         { *m = MeterPolicyDeleteRequest{} }
func (m *MeterPolicyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyDeleteRequest) ProtoMessage()    {}
func (*MeterPolicyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{10}
}
func (m *MeterPolicyDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyDeleteRequest.Merge(m, src)
}
func (m *MeterPolicyDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyDeleteRequest proto.InternalMessageInfo

func (m *MeterPolicyDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *MeterPolicyDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// meter policy delete response
type MeterPolicyDeleteResponse struct {
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MeterPolicyDeleteResponse) Reset()         { *m = MeterPolicyDeleteResponse{} }
func (m *MeterPolicyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*MeterPolicyDeleteResponse) ProtoMessage()    {}
func (*MeterPolicyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{11}
}
func (m *MeterPolicyDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterPolicyDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterPolicyDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterPolicyDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterPolicyDeleteResponse.Merge(m, src)
}
func (m *MeterPolicyDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterPolicyDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterPolicyDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterPolicyDeleteResponse proto.InternalMessageInfo

func (m *MeterPolicyDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// meter rule identifier
type MeterRuleId struct {
	// globally unique meter rule id
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// meter policy this rule belongs to
	MeterPolicyId        []byte   `protobuf:"bytes,2,opt,name=MeterPolicyId,proto3" json:"MeterPolicyId,omitempty" meta:mandatory,immutable`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterRuleId) Reset()         { *m = MeterRuleId{} }
func (m *MeterRuleId) String() string { return proto.CompactTextString(m) }
func (*MeterRuleId) ProtoMessage()    {}
func (*MeterRuleId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{12}
}
func (m *MeterRuleId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleId.Merge(m, src)
}
func (m *MeterRuleId) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleId) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleId.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleId proto.InternalMessageInfo

func (m *MeterRuleId) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MeterRuleId) GetMeterPolicyId() []byte {
	if m != nil {
		return m.MeterPolicyId
	}
	return nil
}

// meter rule specification
type MeterRuleSpec struct {
	// unique identifier of meter rule
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// meter policy this rule belongs to
	MeterPolicyId []byte `protobuf:"bytes,2,opt,name=MeterPolicyId,proto3" json:"MeterPolicyId,omitempty" meta:mandatory,immutable`
	// rule information
	Attrs                *MeterRuleAttrs `protobuf:"bytes,3,opt,name=Attrs,proto3" json:"Attrs,omitempty" meta:mandatory`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MeterRuleSpec) Reset()         { *m = MeterRuleSpec{} }
func (m *MeterRuleSpec) String() string { return proto.CompactTextString(m) }
func (*MeterRuleSpec) ProtoMessage()    {}
func (*MeterRuleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{13}
}
func (m *MeterRuleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleSpec.Merge(m, src)
}
func (m *MeterRuleSpec) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleSpec proto.InternalMessageInfo

func (m *MeterRuleSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MeterRuleSpec) GetMeterPolicyId() []byte {
	if m != nil {
		return m.MeterPolicyId
	}
	return nil
}

func (m *MeterRuleSpec) GetAttrs() *MeterRuleAttrs {
	if m != nil {
		return m.Attrs
	}
	return nil
}

// operational status of the meter rule, if any
type MeterRuleStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterRuleStatus) Reset()         { *m = MeterRuleStatus{} }
func (m *MeterRuleStatus) String() string { return proto.CompactTextString(m) }
func (*MeterRuleStatus) ProtoMessage()    {}
func (*MeterRuleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{14}
}
func (m *MeterRuleStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleStatus.Merge(m, src)
}
func (m *MeterRuleStatus) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleStatus proto.InternalMessageInfo

// stats of the meter rule, if any
type MeterRuleStats struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterRuleStats) Reset()         { *m = MeterRuleStats{} }
func (m *MeterRuleStats) String() string { return proto.CompactTextString(m) }
func (*MeterRuleStats) ProtoMessage()    {}
func (*MeterRuleStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{15}
}
func (m *MeterRuleStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleStats.Merge(m, src)
}
func (m *MeterRuleStats) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleStats.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleStats proto.InternalMessageInfo

// meter policy rule object
type MeterRule struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	Spec                 *MeterRuleSpec   `protobuf:"bytes,3,opt,name=Spec,proto3" json:"spec,omitempty"`
	Status               *MeterRuleStatus `protobuf:"bytes,4,opt,name=Status,proto3" json:"status,omitempty"`
	Stats                *MeterRuleStats  `protobuf:"bytes,5,opt,name=Stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeterRule) Reset()         { *m = MeterRule{} }
func (m *MeterRule) String() string { return proto.CompactTextString(m) }
func (*MeterRule) ProtoMessage()    {}
func (*MeterRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{16}
}
func (m *MeterRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRule.Merge(m, src)
}
func (m *MeterRule) XXX_Size() int {
	return m.Size()
}
func (m *MeterRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRule.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRule proto.InternalMessageInfo

func (m *MeterRule) GetSpec() *MeterRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MeterRule) GetStatus() *MeterRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MeterRule) GetStats() *MeterRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// meter policy rule create and update request
type MeterRuleRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// meter policy rule configuration
	Request              *MeterRuleSpec `protobuf:"bytes,2,opt,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeterRuleRequest) Reset()         { *m = MeterRuleRequest{} }
func (m *MeterRuleRequest) String() string { return proto.CompactTextString(m) }
func (*MeterRuleRequest) ProtoMessage()    {}
func (*MeterRuleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{17}
}
func (m *MeterRuleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleRequest.Merge(m, src)
}
func (m *MeterRuleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleRequest proto.InternalMessageInfo

func (m *MeterRuleRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *MeterRuleRequest) GetRequest() *MeterRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// meter policy rule create and update response
type MeterRuleResponse struct {
	// success or failure status
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// operational status
	Response             *MeterRuleStatus `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MeterRuleResponse) Reset()         { *m = MeterRuleResponse{} }
func (m *MeterRuleResponse) String() string { return proto.CompactTextString(m) }
func (*MeterRuleResponse) ProtoMessage()    {}
func (*MeterRuleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{18}
}
func (m *MeterRuleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleResponse.Merge(m, src)
}
func (m *MeterRuleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleResponse proto.InternalMessageInfo

func (m *MeterRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MeterRuleResponse) GetResponse() *MeterRuleStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// meter policy rule get request
type MeterRuleGetRequest struct {
	// list of id/key of the meter policy rules of interest
	Id                   []*MeterRuleId `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty" meta:mandatory`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeterRuleGetRequest) Reset()         { *m = MeterRuleGetRequest{} }
func (m *MeterRuleGetRequest) String() string { return proto.CompactTextString(m) }
func (*MeterRuleGetRequest) ProtoMessage()    {}
func (*MeterRuleGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{19}
}
func (m *MeterRuleGetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleGetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleGetRequest.Merge(m, src)
}
func (m *MeterRuleGetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleGetRequest proto.InternalMessageInfo

func (m *MeterRuleGetRequest) GetId() []*MeterRuleId {
	if m != nil {
		return m.Id
	}
	return nil
}

// meter policy rule get response
type MeterRuleGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// meter policy rule information
	Response             []*MeterRule `protobuf:"bytes,2,rep,name=Response,proto3" json:"Response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MeterRuleGetResponse) Reset()         { *m = MeterRuleGetResponse{} }
func (m *MeterRuleGetResponse) String() string { return proto.CompactTextString(m) }
func (*MeterRuleGetResponse) ProtoMessage()    {}
func (*MeterRuleGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{20}
}
func (m *MeterRuleGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleGetResponse.Merge(m, src)
}
func (m *MeterRuleGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleGetResponse proto.InternalMessageInfo

func (m *MeterRuleGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MeterRuleGetResponse) GetResponse() []*MeterRule {
	if m != nil {
		return m.Response
	}
	return nil
}

// meter policy rule delete request
type MeterRuleDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt,proto3" json:"BatchCtxt,omitempty"`
	// id/key list of the meter policy rule(s) to be deleted
	Id                   []*MeterRuleId `protobuf:"bytes,2,rep,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MeterRuleDeleteRequest) Reset()         { *m = MeterRuleDeleteRequest{} }
func (m *MeterRuleDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*MeterRuleDeleteRequest) ProtoMessage()    {}
func (*MeterRuleDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{21}
}
func (m *MeterRuleDeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleDeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleDeleteRequest.Merge(m, src)
}
func (m *MeterRuleDeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleDeleteRequest proto.InternalMessageInfo

func (m *MeterRuleDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *MeterRuleDeleteRequest) GetId() []*MeterRuleId {
	if m != nil {
		return m.Id
	}
	return nil
}

// meter policy rule delete response
type MeterRuleDeleteResponse struct {
	// API status code
	ApiStatus            []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MeterRuleDeleteResponse) Reset()         { *m = MeterRuleDeleteResponse{} }
func (m *MeterRuleDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*MeterRuleDeleteResponse) ProtoMessage()    {}
func (*MeterRuleDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3924cef7fd4872, []int{22}
}
func (m *MeterRuleDeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeterRuleDeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeterRuleDeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeterRuleDeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRuleDeleteResponse.Merge(m, src)
}
func (m *MeterRuleDeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MeterRuleDeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRuleDeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRuleDeleteResponse proto.InternalMessageInfo

func (m *MeterRuleDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*MeterRuleAttrs)(nil), "pds.MeterRuleAttrs")
	proto.RegisterType((*MeterRuleInfo)(nil), "pds.MeterRuleInfo")
	proto.RegisterType((*MeterPolicySpec)(nil), "pds.MeterPolicySpec")
	proto.RegisterType((*MeterPolicyStatus)(nil), "pds.MeterPolicyStatus")
	proto.RegisterType((*MeterPolicyStats)(nil), "pds.MeterPolicyStats")
	proto.RegisterType((*MeterPolicy)(nil), "pds.MeterPolicy")
	proto.RegisterType((*MeterPolicyRequest)(nil), "pds.MeterPolicyRequest")
	proto.RegisterType((*MeterPolicyResponse)(nil), "pds.MeterPolicyResponse")
	proto.RegisterType((*MeterPolicyGetRequest)(nil), "pds.MeterPolicyGetRequest")
	proto.RegisterType((*MeterPolicyGetResponse)(nil), "pds.MeterPolicyGetResponse")
	proto.RegisterType((*MeterPolicyDeleteRequest)(nil), "pds.MeterPolicyDeleteRequest")
	proto.RegisterType((*MeterPolicyDeleteResponse)(nil), "pds.MeterPolicyDeleteResponse")
	proto.RegisterType((*MeterRuleId)(nil), "pds.MeterRuleId")
	proto.RegisterType((*MeterRuleSpec)(nil), "pds.MeterRuleSpec")
	proto.RegisterType((*MeterRuleStatus)(nil), "pds.MeterRuleStatus")
	proto.RegisterType((*MeterRuleStats)(nil), "pds.MeterRuleStats")
	proto.RegisterType((*MeterRule)(nil), "pds.MeterRule")
	proto.RegisterType((*MeterRuleRequest)(nil), "pds.MeterRuleRequest")
	proto.RegisterType((*MeterRuleResponse)(nil), "pds.MeterRuleResponse")
	proto.RegisterType((*MeterRuleGetRequest)(nil), "pds.MeterRuleGetRequest")
	proto.RegisterType((*MeterRuleGetResponse)(nil), "pds.MeterRuleGetResponse")
	proto.RegisterType((*MeterRuleDeleteRequest)(nil), "pds.MeterRuleDeleteRequest")
	proto.RegisterType((*MeterRuleDeleteResponse)(nil), "pds.MeterRuleDeleteResponse")
}

func init() { proto.RegisterFile("meter.proto", fileDescriptor_ca3924cef7fd4872) }

var fileDescriptor_ca3924cef7fd4872 = []byte{
	// 1043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0x66, 0xed, 0x3a, 0x71, 0x9f, 0x1d, 0xdb, 0x99, 0xfc, 0xa8, 0xeb, 0x86, 0x38, 0xda, 0x4b,
	0x2d, 0xe4, 0x1a, 0x67, 0x5b, 0x0e, 0x09, 0x14, 0xea, 0x4d, 0x03, 0x58, 0x51, 0x21, 0x9a, 0x04,
	0x0e, 0xdc, 0x36, 0xde, 0x71, 0xd8, 0xca, 0xf6, 0x2e, 0xbb, 0xe3, 0x2a, 0x96, 0x90, 0xf8, 0xb7,
	0x38, 0x72, 0x84, 0x5b, 0xf9, 0x07, 0x2c, 0x94, 0x03, 0x87, 0x1c, 0xf3, 0x17, 0xa0, 0x9d, 0x19,
	0xaf, 0x67, 0xd6, 0x9b, 0x86, 0x6c, 0x91, 0xb8, 0x44, 0xf1, 0x7b, 0xef, 0xfb, 0x66, 0xde, 0x37,
	0x6f, 0xbe, 0xb1, 0xa1, 0x30, 0x24, 0x94, 0xf8, 0x2d, 0xcf, 0x77, 0xa9, 0x8b, 0xb2, 0x9e, 0x1d,
	0xd4, 0xe0, 0xdc, 0x3d, 0x77, 0x79, 0xa0, 0x56, 0x1e, 0x12, 0x6a, 0x7d, 0x1c, 0xfe, 0x11, 0x81,
	0x02, 0x9d, 0x78, 0x24, 0xe0, 0x1f, 0xf4, 0x4b, 0x0d, 0x4a, 0xaf, 0x42, 0x38, 0x1e, 0x0f, 0x48,
	0x87, 0x52, 0x3f, 0x40, 0x8f, 0x61, 0xe9, 0xd8, 0x27, 0x7d, 0xe7, 0xa2, 0xaa, 0xed, 0x68, 0x8d,
	0x82, 0x51, 0x6e, 0x71, 0x40, 0xf7, 0x98, 0x87, 0xb1, 0x48, 0xa3, 0x5d, 0xc8, 0x1f, 0xfb, 0x8e,
	0xeb, 0x3b, 0x74, 0x52, 0xcd, 0xec, 0x68, 0x8d, 0x15, 0x73, 0xe3, 0x7a, 0x5a, 0x5f, 0x0d, 0x97,
	0xda, 0xf7, 0xad, 0xd1, 0x39, 0xd9, 0x6f, 0x3f, 0xd9, 0x6d, 0x1b, 0x4f, 0x71, 0x54, 0x86, 0xf6,
	0xa0, 0x78, 0x7a, 0xc1, 0xd6, 0x3b, 0x18, 0x58, 0x41, 0x50, 0xcd, 0x26, 0xc2, 0x76, 0x9f, 0x3c,
	0x6b, 0xef, 0x7d, 0x82, 0x95, 0xd2, 0x10, 0x8a, 0x65, 0xe8, 0xbd, 0x77, 0x42, 0xe5, 0x52, 0xfd,
	0x67, 0x58, 0x89, 0x7a, 0xec, 0x8e, 0xfa, 0x2e, 0x6a, 0x42, 0xa6, 0x6b, 0xb3, 0xf6, 0x8a, 0xe6,
	0xd6, 0xf5, 0xb4, 0x5e, 0x65, 0x0c, 0x43, 0x6b, 0x64, 0x5b, 0xd4, 0xf5, 0x27, 0x4d, 0x67, 0x38,
	0x1c, 0x53, 0xeb, 0x6c, 0x40, 0x70, 0xa6, 0x6b, 0xa3, 0xe7, 0x90, 0x63, 0xca, 0xb0, 0x26, 0x0b,
	0xc6, 0x5a, 0xcb, 0xb3, 0x83, 0x96, 0x2a, 0x9a, 0x89, 0xae, 0xa7, 0xf5, 0x92, 0xca, 0x82, 0x39,
	0x4a, 0xff, 0x5b, 0x83, 0x32, 0xab, 0x3e, 0x76, 0x07, 0x4e, 0x6f, 0x72, 0xe2, 0x91, 0xde, 0x1d,
	0x37, 0xb0, 0x07, 0x99, 0x4e, 0x9f, 0xad, 0x5e, 0x32, 0x0a, 0xd1, 0x69, 0x74, 0xbe, 0xbc, 0x0d,
	0xda, 0xe9, 0xa3, 0x17, 0x00, 0x33, 0xf1, 0x0f, 0x47, 0x4c, 0xee, 0xbc, 0xb9, 0x73, 0x3d, 0xad,
	0x6f, 0x31, 0x54, 0x54, 0xdb, 0xb4, 0x49, 0xdf, 0x1a, 0x0f, 0xe8, 0xf3, 0xbe, 0x35, 0x08, 0x08,
	0x96, 0x30, 0xa8, 0x01, 0xb9, 0xb0, 0xcd, 0x50, 0xf0, 0x6c, 0xa3, 0x60, 0x20, 0xb5, 0xfb, 0x50,
	0x4e, 0xcc, 0x0b, 0xf4, 0x43, 0x58, 0x95, 0xfb, 0xa4, 0x16, 0x1d, 0x07, 0xa8, 0x0d, 0x6b, 0x52,
	0xd0, 0xb4, 0x02, 0xd2, 0xb1, 0x6d, 0x9f, 0xb5, 0x7e, 0x0f, 0x27, 0xa5, 0x74, 0x04, 0x95, 0x18,
	0x4d, 0xa0, 0xff, 0x99, 0x81, 0x82, 0x14, 0x44, 0x9f, 0x42, 0xfe, 0x74, 0xe2, 0x91, 0x57, 0x84,
	0x5a, 0x62, 0x4a, 0x4b, 0x2d, 0x36, 0xe2, 0xb3, 0xa8, 0x59, 0x7e, 0x3b, 0xad, 0x6b, 0x57, 0xd3,
	0xfa, 0x72, 0xd3, 0x19, 0x0d, 0x9c, 0x11, 0xc1, 0x11, 0x00, 0x7d, 0x01, 0xcb, 0xdf, 0x9e, 0xbd,
	0x66, 0x58, 0x7e, 0xa2, 0x2b, 0x1c, 0x2b, 0x82, 0xe6, 0xa6, 0x80, 0xb2, 0xf3, 0x6c, 0xba, 0x43,
	0x87, 0x92, 0xa1, 0x47, 0x27, 0x78, 0x86, 0x42, 0x9f, 0xc1, 0xbd, 0xf0, 0x14, 0x99, 0x9c, 0x05,
	0x63, 0x7d, 0xae, 0xc8, 0xfc, 0x84, 0x4d, 0x14, 0x12, 0x04, 0x1e, 0xe9, 0x49, 0x04, 0x0c, 0x85,
	0x5e, 0xc2, 0x12, 0xd7, 0x86, 0x8d, 0x70, 0xc1, 0xd8, 0x5c, 0xc0, 0xb3, 0xac, 0xb9, 0x7e, 0x35,
	0xad, 0x57, 0x02, 0xf6, 0xbf, 0xc4, 0x21, 0xb0, 0xe8, 0x05, 0xe4, 0x98, 0x34, 0xd5, 0x1c, 0x23,
	0xd9, 0x48, 0x22, 0x09, 0xcc, 0xb5, 0xab, 0x69, 0xbd, 0x1c, 0x72, 0xc8, 0x14, 0x1c, 0xa8, 0x53,
	0x40, 0x52, 0x3d, 0x26, 0x3f, 0x8d, 0x49, 0x40, 0x51, 0x0b, 0xee, 0x9b, 0x16, 0xed, 0xfd, 0x78,
	0x40, 0x2f, 0xa8, 0x90, 0xb6, 0x22, 0x46, 0x2e, 0x8a, 0xe3, 0x79, 0x09, 0x6a, 0xc1, 0xb2, 0x80,
	0x56, 0x33, 0x6c, 0x40, 0x12, 0xe5, 0xc0, 0xb3, 0x22, 0x7d, 0xa2, 0xcc, 0x03, 0x26, 0x81, 0xe7,
	0x8e, 0x02, 0x12, 0x2e, 0xdb, 0xf1, 0x1c, 0xa1, 0x8b, 0xc6, 0x26, 0x7d, 0xb6, 0x6c, 0x14, 0xc7,
	0xf3, 0x12, 0x64, 0x40, 0x7e, 0x86, 0x15, 0xeb, 0xde, 0x20, 0x23, 0x8e, 0xea, 0xf4, 0xc7, 0xb0,
	0x21, 0xa5, 0xbf, 0x22, 0x74, 0xd6, 0x73, 0x49, 0xdc, 0xc6, 0x6c, 0xa3, 0x18, 0xde, 0x37, 0xfd,
	0x0d, 0x6c, 0xc6, 0x0b, 0x53, 0x6e, 0xb3, 0xb9, 0xb0, 0xcd, 0x4a, 0x7c, 0x9b, 0xd2, 0x06, 0x7f,
	0x80, 0xaa, 0x94, 0x78, 0x49, 0x06, 0x84, 0x92, 0xb4, 0xe7, 0xc2, 0x7b, 0xca, 0x44, 0x3d, 0x1d,
	0xc1, 0xc3, 0x04, 0xee, 0xe4, 0xb6, 0xb2, 0xb7, 0xb4, 0xa5, 0xff, 0x22, 0x6e, 0x23, 0x73, 0x00,
	0xfb, 0x8e, 0x6e, 0x66, 0x0a, 0x37, 0xe6, 0x3b, 0x61, 0x9b, 0xbc, 0x1d, 0xa8, 0x42, 0xf4, 0xdf,
	0x34, 0xc9, 0xd2, 0x53, 0x38, 0xea, 0x7f, 0xb0, 0x87, 0xf9, 0xb3, 0x90, 0x4d, 0xf5, 0x2c, 0xac,
	0x8a, 0x57, 0x81, 0x75, 0xc0, 0x65, 0xad, 0x48, 0x6f, 0x31, 0xbf, 0xa3, 0x7f, 0x64, 0xe0, 0x7e,
	0x14, 0xfa, 0x9f, 0x5d, 0x6f, 0x5f, 0x71, 0xbd, 0xd8, 0x3b, 0x70, 0x8b, 0xe7, 0x99, 0x31, 0xcf,
	0x5b, 0x8f, 0xa1, 0xff, 0x8d, 0xe3, 0x7d, 0xae, 0x3a, 0xde, 0xda, 0x22, 0xc5, 0xbb, 0xfd, 0xce,
	0x13, 0xef, 0x4a, 0x58, 0x9d, 0xf6, 0x56, 0x35, 0x65, 0xb7, 0xbb, 0x41, 0x86, 0xb9, 0xd7, 0x8d,
	0xc5, 0x83, 0xc8, 0x57, 0x4c, 0x69, 0x21, 0x6d, 0xc5, 0x42, 0x6e, 0x14, 0x4f, 0xb2, 0x91, 0x23,
	0x61, 0xb1, 0x61, 0x52, 0x72, 0xb9, 0x67, 0x91, 0xcb, 0x29, 0x2e, 0xc4, 0xef, 0x70, 0xe2, 0xa4,
	0x86, 0xbe, 0xe1, 0xc3, 0xba, 0x4a, 0x96, 0xb2, 0x8d, 0x8f, 0x16, 0x9c, 0xb0, 0xa4, 0xee, 0x41,
	0x6a, 0xe0, 0xb5, 0xf0, 0xdf, 0x30, 0xfc, 0x7e, 0x2e, 0xb8, 0x13, 0xb9, 0x60, 0x42, 0xcf, 0xac,
	0xbf, 0x2e, 0x3c, 0x58, 0x58, 0x2b, 0x9d, 0x2b, 0x1a, 0xbf, 0xe6, 0x20, 0xcf, 0xb8, 0x4e, 0xde,
	0xf4, 0xd0, 0xd7, 0xca, 0x97, 0xa1, 0x03, 0x9f, 0x58, 0x94, 0xa0, 0x07, 0x0b, 0xe6, 0xcf, 0xfb,
	0xaa, 0x55, 0x17, 0x13, 0x42, 0x8b, 0x0f, 0x62, 0x4c, 0xdf, 0x79, 0x76, 0x6a, 0xa6, 0x23, 0xe1,
	0x2f, 0xd1, 0xbb, 0x86, 0x6a, 0xf1, 0xea, 0xf9, 0xbc, 0xd4, 0x1e, 0x25, 0xe6, 0x22, 0xb2, 0xef,
	0x85, 0x70, 0x51, 0xee, 0x84, 0xfa, 0xc4, 0x1a, 0x3a, 0xa3, 0xf3, 0xf7, 0x60, 0x6d, 0x6b, 0xe8,
	0x54, 0x69, 0x97, 0x1f, 0x09, 0xfa, 0x30, 0x8e, 0x52, 0xc6, 0xa2, 0xb6, 0x7d, 0x53, 0x3a, 0xda,
	0xad, 0x29, 0xb9, 0xad, 0x38, 0x8c, 0x8d, 0xd8, 0xfc, 0x09, 0xae, 0xcd, 0x78, 0x38, 0x91, 0x43,
	0x1c, 0xc3, 0x9d, 0x39, 0x0e, 0xa1, 0x28, 0x5f, 0x27, 0x54, 0x55, 0x2b, 0x25, 0xa1, 0x1e, 0x26,
	0x64, 0x22, 0x9a, 0x6f, 0xa4, 0xad, 0x08, 0x89, 0x1e, 0xa9, 0xf5, 0xaa, 0x40, 0x5b, 0xc9, 0xc9,
	0x19, 0x9f, 0x59, 0xfc, 0xfd, 0x72, 0x5b, 0x7b, 0x7b, 0xb9, 0xad, 0xfd, 0x75, 0xb9, 0xad, 0x9d,
	0x2d, 0xb1, 0xdf, 0x86, 0x4f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xef, 0x53, 0xf2, 0x25, 0x59,
	0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeterSvcClient is the client API for MeterSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeterSvcClient interface {
	// mirror policy APIs
	MeterPolicyCreate(ctx context.Context, in *MeterPolicyRequest, opts ...grpc.CallOption) (*MeterPolicyResponse, error)
	MeterPolicyUpdate(ctx context.Context, in *MeterPolicyRequest, opts ...grpc.CallOption) (*MeterPolicyResponse, error)
	MeterPolicyGet(ctx context.Context, in *MeterPolicyGetRequest, opts ...grpc.CallOption) (*MeterPolicyGetResponse, error)
	MeterPolicyGetStreaming(ctx context.Context, in *MeterPolicyGetRequest, opts ...grpc.CallOption) (MeterSvc_MeterPolicyGetStreamingClient, error)
	MeterPolicyDelete(ctx context.Context, in *MeterPolicyDeleteRequest, opts ...grpc.CallOption) (*MeterPolicyDeleteResponse, error)
	// mirror rule APIs to incrementally add/del/upd meter policy
	MeterRuleCreate(ctx context.Context, in *MeterRuleRequest, opts ...grpc.CallOption) (*MeterRuleResponse, error)
	MeterRuleUpdate(ctx context.Context, in *MeterRuleRequest, opts ...grpc.CallOption) (*MeterRuleResponse, error)
	MeterRuleGet(ctx context.Context, in *MeterRuleGetRequest, opts ...grpc.CallOption) (*MeterRuleGetResponse, error)
	MeterRuleDelete(ctx context.Context, in *MeterRuleDeleteRequest, opts ...grpc.CallOption) (*MeterRuleDeleteResponse, error)
}

type meterSvcClient struct {
	cc *grpc.ClientConn
}

func NewMeterSvcClient(cc *grpc.ClientConn) MeterSvcClient {
	return &meterSvcClient{cc}
}

func (c *meterSvcClient) MeterPolicyCreate(ctx context.Context, in *MeterPolicyRequest, opts ...grpc.CallOption) (*MeterPolicyResponse, error) {
	out := new(MeterPolicyResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterPolicyCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterPolicyUpdate(ctx context.Context, in *MeterPolicyRequest, opts ...grpc.CallOption) (*MeterPolicyResponse, error) {
	out := new(MeterPolicyResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterPolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterPolicyGet(ctx context.Context, in *MeterPolicyGetRequest, opts ...grpc.CallOption) (*MeterPolicyGetResponse, error) {
	out := new(MeterPolicyGetResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterPolicyGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterPolicyGetStreaming(ctx context.Context, in *MeterPolicyGetRequest, opts ...grpc.CallOption) (MeterSvc_MeterPolicyGetStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeterSvc_serviceDesc.Streams[0], "/pds.MeterSvc/MeterPolicyGetStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &meterSvcMeterPolicyGetStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeterSvc_MeterPolicyGetStreamingClient interface {
	Recv() (*MeterPolicyGetResponse, error)
	grpc.ClientStream
}

type meterSvcMeterPolicyGetStreamingClient struct {
	grpc.ClientStream
}

func (x *meterSvcMeterPolicyGetStreamingClient) Recv() (*MeterPolicyGetResponse, error) {
	m := new(MeterPolicyGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meterSvcClient) MeterPolicyDelete(ctx context.Context, in *MeterPolicyDeleteRequest, opts ...grpc.CallOption) (*MeterPolicyDeleteResponse, error) {
	out := new(MeterPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterPolicyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterRuleCreate(ctx context.Context, in *MeterRuleRequest, opts ...grpc.CallOption) (*MeterRuleResponse, error) {
	out := new(MeterRuleResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterRuleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterRuleUpdate(ctx context.Context, in *MeterRuleRequest, opts ...grpc.CallOption) (*MeterRuleResponse, error) {
	out := new(MeterRuleResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterRuleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterRuleGet(ctx context.Context, in *MeterRuleGetRequest, opts ...grpc.CallOption) (*MeterRuleGetResponse, error) {
	out := new(MeterRuleGetResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterRuleGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meterSvcClient) MeterRuleDelete(ctx context.Context, in *MeterRuleDeleteRequest, opts ...grpc.CallOption) (*MeterRuleDeleteResponse, error) {
	out := new(MeterRuleDeleteResponse)
	err := c.cc.Invoke(ctx, "/pds.MeterSvc/MeterRuleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeterSvcServer is the server API for MeterSvc service.
type MeterSvcServer interface {
	// mirror policy APIs
	MeterPolicyCreate(context.Context, *MeterPolicyRequest) (*MeterPolicyResponse, error)
	MeterPolicyUpdate(context.Context, *MeterPolicyRequest) (*MeterPolicyResponse, error)
	MeterPolicyGet(context.Context, *MeterPolicyGetRequest) (*MeterPolicyGetResponse, error)
	MeterPolicyGetStreaming(*MeterPolicyGetRequest, MeterSvc_MeterPolicyGetStreamingServer) error
	MeterPolicyDelete(context.Context, *MeterPolicyDeleteRequest) (*MeterPolicyDeleteResponse, error)
	// mirror rule APIs to incrementally add/del/upd meter policy
	MeterRuleCreate(context.Context, *MeterRuleRequest) (*MeterRuleResponse, error)
	MeterRuleUpdate(context.Context, *MeterRuleRequest) (*MeterRuleResponse, error)
	MeterRuleGet(context.Context, *MeterRuleGetRequest) (*MeterRuleGetResponse, error)
	MeterRuleDelete(context.Context, *MeterRuleDeleteRequest) (*MeterRuleDeleteResponse, error)
}

// UnimplementedMeterSvcServer can be embedded to have forward compatible implementations.
type UnimplementedMeterSvcServer struct {
}

func (*UnimplementedMeterSvcServer) MeterPolicyCreate(ctx context.Context, req *MeterPolicyRequest) (*MeterPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterPolicyCreate not implemented")
}
func (*UnimplementedMeterSvcServer) MeterPolicyUpdate(ctx context.Context, req *MeterPolicyRequest) (*MeterPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterPolicyUpdate not implemented")
}
func (*UnimplementedMeterSvcServer) MeterPolicyGet(ctx context.Context, req *MeterPolicyGetRequest) (*MeterPolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterPolicyGet not implemented")
}
func (*UnimplementedMeterSvcServer) MeterPolicyGetStreaming(req *MeterPolicyGetRequest, srv MeterSvc_MeterPolicyGetStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method MeterPolicyGetStreaming not implemented")
}
func (*UnimplementedMeterSvcServer) MeterPolicyDelete(ctx context.Context, req *MeterPolicyDeleteRequest) (*MeterPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterPolicyDelete not implemented")
}
func (*UnimplementedMeterSvcServer) MeterRuleCreate(ctx context.Context, req *MeterRuleRequest) (*MeterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterRuleCreate not implemented")
}
func (*UnimplementedMeterSvcServer) MeterRuleUpdate(ctx context.Context, req *MeterRuleRequest) (*MeterRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterRuleUpdate not implemented")
}
func (*UnimplementedMeterSvcServer) MeterRuleGet(ctx context.Context, req *MeterRuleGetRequest) (*MeterRuleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterRuleGet not implemented")
}
func (*UnimplementedMeterSvcServer) MeterRuleDelete(ctx context.Context, req *MeterRuleDeleteRequest) (*MeterRuleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeterRuleDelete not implemented")
}

func RegisterMeterSvcServer(s *grpc.Server, srv MeterSvcServer) {
	s.RegisterService(&_MeterSvc_serviceDesc, srv)
}

func _MeterSvc_MeterPolicyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterPolicyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterPolicyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterPolicyCreate(ctx, req.(*MeterPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterPolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterPolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterPolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterPolicyUpdate(ctx, req.(*MeterPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterPolicyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterPolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterPolicyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterPolicyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterPolicyGet(ctx, req.(*MeterPolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterPolicyGetStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MeterPolicyGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeterSvcServer).MeterPolicyGetStreaming(m, &meterSvcMeterPolicyGetStreamingServer{stream})
}

type MeterSvc_MeterPolicyGetStreamingServer interface {
	Send(*MeterPolicyGetResponse) error
	grpc.ServerStream
}

type meterSvcMeterPolicyGetStreamingServer struct {
	grpc.ServerStream
}

func (x *meterSvcMeterPolicyGetStreamingServer) Send(m *MeterPolicyGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MeterSvc_MeterPolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterPolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterPolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterPolicyDelete(ctx, req.(*MeterPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterRuleCreate(ctx, req.(*MeterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterRuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterRuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterRuleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterRuleUpdate(ctx, req.(*MeterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterRuleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterRuleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterRuleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterRuleGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterRuleGet(ctx, req.(*MeterRuleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeterSvc_MeterRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterRuleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterSvcServer).MeterRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.MeterSvc/MeterRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterSvcServer).MeterRuleDelete(ctx, req.(*MeterRuleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeterSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.MeterSvc",
	HandlerType: (*MeterSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MeterPolicyCreate",
			Handler:    _MeterSvc_MeterPolicyCreate_Handler,
		},
		{
			MethodName: "MeterPolicyUpdate",
			Handler:    _MeterSvc_MeterPolicyUpdate_Handler,
		},
		{
			MethodName: "MeterPolicyGet",
			Handler:    _MeterSvc_MeterPolicyGet_Handler,
		},
		{
			MethodName: "MeterPolicyDelete",
			Handler:    _MeterSvc_MeterPolicyDelete_Handler,
		},
		{
			MethodName: "MeterRuleCreate",
			Handler:    _MeterSvc_MeterRuleCreate_Handler,
		},
		{
			MethodName: "MeterRuleUpdate",
			Handler:    _MeterSvc_MeterRuleUpdate_Handler,
		},
		{
			MethodName: "MeterRuleGet",
			Handler:    _MeterSvc_MeterRuleGet_Handler,
		},
		{
			MethodName: "MeterRuleDelete",
			Handler:    _MeterSvc_MeterRuleDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MeterPolicyGetStreaming",
			Handler:       _MeterSvc_MeterPolicyGetStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meter.proto",
}

func (m *MeterRuleAttrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleAttrs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleAttrs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RxMeterClass != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.RxMeterClass))
		i--
		dAtA[i] = 0x20
	}
	if m.TxMeterClass != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.TxMeterClass))
		i--
		dAtA[i] = 0x18
	}
	if m.Priority != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attrs != nil {
		{
			size, err := m.Attrs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PriorityEn {
		i--
		if m.PriorityEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Af != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.Af))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MeterPolicyBaseAddr != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.MeterPolicyBaseAddr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintMeter(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Id[iNdEx])
			copy(dAtA[i:], m.Id[iNdEx])
			i = encodeVarintMeter(dAtA, i, uint64(len(m.Id[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterPolicyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterPolicyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterPolicyDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA11 := make([]byte, len(m.ApiStatus)*10)
		var j10 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMeter(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MeterPolicyId) > 0 {
		i -= len(m.MeterPolicyId)
		copy(dAtA[i:], m.MeterPolicyId)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.MeterPolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Attrs != nil {
		{
			size, err := m.Attrs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MeterPolicyId) > 0 {
		i -= len(m.MeterPolicyId)
		copy(dAtA[i:], m.MeterPolicyId)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.MeterPolicyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMeter(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MeterRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ApiStatus != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleGetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleGetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Response) > 0 {
		for iNdEx := len(m.Response) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Response[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintMeter(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleDeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BatchCtxt != nil {
		{
			size, err := m.BatchCtxt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeterRuleDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeterRuleDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeterRuleDeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ApiStatus) > 0 {
		dAtA23 := make([]byte, len(m.ApiStatus)*10)
		var j22 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintMeter(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeter(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MeterRuleAttrs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovMeter(uint64(m.Priority))
	}
	if m.TxMeterClass != 0 {
		n += 1 + sovMeter(uint64(m.TxMeterClass))
	}
	if m.RxMeterClass != 0 {
		n += 1 + sovMeter(uint64(m.RxMeterClass))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Attrs != nil {
		l = m.Attrs.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Af != 0 {
		n += 1 + sovMeter(uint64(m.Af))
	}
	if m.PriorityEn {
		n += 2
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MeterPolicyBaseAddr != 0 {
		n += 1 + sovMeter(uint64(m.MeterPolicyBaseAddr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMeter(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMeter(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterPolicyDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovMeter(uint64(e))
		}
		n += 1 + sovMeter(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	l = len(m.MeterPolicyId)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	l = len(m.MeterPolicyId)
	if l > 0 {
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Attrs != nil {
		l = m.Attrs.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMeter(uint64(m.ApiStatus))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleGetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMeter(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleDeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovMeter(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovMeter(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeterRuleDeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovMeter(uint64(e))
		}
		n += 1 + sovMeter(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMeter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeter(x uint64) (n int) {
	return sovMeter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeterRuleAttrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleAttrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleAttrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &IPPrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMeterClass", wireType)
			}
			m.TxMeterClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxMeterClass |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMeterClass", wireType)
			}
			m.RxMeterClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxMeterClass |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = &MeterRuleAttrs{}
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Af", wireType)
			}
			m.Af = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Af |= IPAF(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorityEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PriorityEn = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &MeterRuleInfo{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterPolicyBaseAddr", wireType)
			}
			m.MeterPolicyBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MeterPolicyBaseAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MeterPolicySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MeterPolicyStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MeterPolicyStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MeterPolicySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MeterPolicyStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MeterPolicy{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterPolicyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterPolicyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterPolicyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMeter
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMeter
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterPolicyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterPolicyId = append(m.MeterPolicyId[:0], dAtA[iNdEx:postIndex]...)
			if m.MeterPolicyId == nil {
				m.MeterPolicyId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeterPolicyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MeterPolicyId = append(m.MeterPolicyId[:0], dAtA[iNdEx:postIndex]...)
			if m.MeterPolicyId == nil {
				m.MeterPolicyId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = &MeterRuleAttrs{}
			}
			if err := m.Attrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MeterRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MeterRuleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MeterRuleStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &MeterRuleSpec{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &MeterRuleStatus{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &MeterRuleId{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MeterRule{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &MeterRuleId{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeterRuleDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeterRuleDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeterRuleDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ApiStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMeter
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMeter
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ApiStatus) == 0 {
					m.ApiStatus = make([]ApiStatus, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ApiStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMeter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeter
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMeter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMeter
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeter   = fmt.Errorf("proto: integer overflow")
)
