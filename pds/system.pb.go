// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: system.proto

package pds

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pds "github.com/david-gurley/gopen/pds/meta/pds"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// type of the system led values
type LedStatus int32

const (
	LedStatus_LED_STATUS_NONE  LedStatus = 0
	LedStatus_LED_STATUS_GREEN LedStatus = 1
	LedStatus_LED_STATUS_AMBER LedStatus = 2
	LedStatus_LED_STATUS_OFF   LedStatus = 3
)

var LedStatus_name = map[int32]string{
	0: "LED_STATUS_NONE",
	1: "LED_STATUS_GREEN",
	2: "LED_STATUS_AMBER",
	3: "LED_STATUS_OFF",
}

var LedStatus_value = map[string]int32{
	"LED_STATUS_NONE":  0,
	"LED_STATUS_GREEN": 1,
	"LED_STATUS_AMBER": 2,
	"LED_STATUS_OFF":   3,
}

func (x LedStatus) String() string {
	return proto.EnumName(LedStatus_name, int32(x))
}

func (LedStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{0}
}

// type of the system resset reason values
type ResetReason int32

const (
	ResetReason_RESET_REASON_UNKNOWN          ResetReason = 0
	ResetReason_RESET_REASON_SW_POWER_CYCLE   ResetReason = 1
	ResetReason_RESET_REASON_VRD_FAULT        ResetReason = 2
	ResetReason_RESET_REASON_THERM_TRIP       ResetReason = 3
	ResetReason_RESET_REASON_HOST_POWER_CYCLE ResetReason = 4
	ResetReason_RESET_REASON_AC_POWER_CYCLE   ResetReason = 5
	ResetReason_RESET_REASON_REBOOT           ResetReason = 6
	ResetReason_RESET_REASON_PANIC            ResetReason = 7
	ResetReason_RESET_REASON_PCIE_RESET       ResetReason = 8
)

var ResetReason_name = map[int32]string{
	0: "RESET_REASON_UNKNOWN",
	1: "RESET_REASON_SW_POWER_CYCLE",
	2: "RESET_REASON_VRD_FAULT",
	3: "RESET_REASON_THERM_TRIP",
	4: "RESET_REASON_HOST_POWER_CYCLE",
	5: "RESET_REASON_AC_POWER_CYCLE",
	6: "RESET_REASON_REBOOT",
	7: "RESET_REASON_PANIC",
	8: "RESET_REASON_PCIE_RESET",
}

var ResetReason_value = map[string]int32{
	"RESET_REASON_UNKNOWN":          0,
	"RESET_REASON_SW_POWER_CYCLE":   1,
	"RESET_REASON_VRD_FAULT":        2,
	"RESET_REASON_THERM_TRIP":       3,
	"RESET_REASON_HOST_POWER_CYCLE": 4,
	"RESET_REASON_AC_POWER_CYCLE":   5,
	"RESET_REASON_REBOOT":           6,
	"RESET_REASON_PANIC":            7,
	"RESET_REASON_PCIE_RESET":       8,
}

func (x ResetReason) String() string {
	return proto.EnumName(ResetReason_name, int32(x))
}

func (ResetReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{1}
}

type SystemTemperature struct {
	DieTemperature       uint32   `protobuf:"varint,1,opt,name=DieTemperature,proto3" json:"DieTemperature,omitempty"`
	LocalTemperature     uint32   `protobuf:"varint,2,opt,name=LocalTemperature,proto3" json:"LocalTemperature,omitempty"`
	HbmTemperature       uint32   `protobuf:"varint,3,opt,name=HbmTemperature,proto3" json:"HbmTemperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemTemperature) Reset()         { *m = SystemTemperature{} }
func (m *SystemTemperature) String() string { return proto.CompactTextString(m) }
func (*SystemTemperature) ProtoMessage()    {}
func (*SystemTemperature) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{0}
}
func (m *SystemTemperature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemTemperature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemTemperature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemTemperature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemTemperature.Merge(m, src)
}
func (m *SystemTemperature) XXX_Size() int {
	return m.Size()
}
func (m *SystemTemperature) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemTemperature.DiscardUnknown(m)
}

var xxx_messageInfo_SystemTemperature proto.InternalMessageInfo

func (m *SystemTemperature) GetDieTemperature() uint32 {
	if m != nil {
		return m.DieTemperature
	}
	return 0
}

func (m *SystemTemperature) GetLocalTemperature() uint32 {
	if m != nil {
		return m.LocalTemperature
	}
	return 0
}

func (m *SystemTemperature) GetHbmTemperature() uint32 {
	if m != nil {
		return m.HbmTemperature
	}
	return 0
}

type SystemVoltage struct {
	CoreVoltage          uint32   `protobuf:"varint,1,opt,name=CoreVoltage,proto3" json:"CoreVoltage,omitempty"`
	ArmVoltage           uint32   `protobuf:"varint,2,opt,name=ArmVoltage,proto3" json:"ArmVoltage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemVoltage) Reset()         { *m = SystemVoltage{} }
func (m *SystemVoltage) String() string { return proto.CompactTextString(m) }
func (*SystemVoltage) ProtoMessage()    {}
func (*SystemVoltage) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{1}
}
func (m *SystemVoltage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemVoltage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemVoltage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemVoltage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemVoltage.Merge(m, src)
}
func (m *SystemVoltage) XXX_Size() int {
	return m.Size()
}
func (m *SystemVoltage) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemVoltage.DiscardUnknown(m)
}

var xxx_messageInfo_SystemVoltage proto.InternalMessageInfo

func (m *SystemVoltage) GetCoreVoltage() uint32 {
	if m != nil {
		return m.CoreVoltage
	}
	return 0
}

func (m *SystemVoltage) GetArmVoltage() uint32 {
	if m != nil {
		return m.ArmVoltage
	}
	return 0
}

type SystemPower struct {
	TotalPowerDrawn      uint32   `protobuf:"varint,1,opt,name=TotalPowerDrawn,proto3" json:"TotalPowerDrawn,omitempty"`
	CorePower            uint32   `protobuf:"varint,2,opt,name=CorePower,proto3" json:"CorePower,omitempty"`
	ArmPower             uint32   `protobuf:"varint,3,opt,name=ArmPower,proto3" json:"ArmPower,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemPower) Reset()         { *m = SystemPower{} }
func (m *SystemPower) String() string { return proto.CompactTextString(m) }
func (*SystemPower) ProtoMessage()    {}
func (*SystemPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{2}
}
func (m *SystemPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemPower.Merge(m, src)
}
func (m *SystemPower) XXX_Size() int {
	return m.Size()
}
func (m *SystemPower) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemPower.DiscardUnknown(m)
}

var xxx_messageInfo_SystemPower proto.InternalMessageInfo

func (m *SystemPower) GetTotalPowerDrawn() uint32 {
	if m != nil {
		return m.TotalPowerDrawn
	}
	return 0
}

func (m *SystemPower) GetCorePower() uint32 {
	if m != nil {
		return m.CorePower
	}
	return 0
}

func (m *SystemPower) GetArmPower() uint32 {
	if m != nil {
		return m.ArmPower
	}
	return 0
}

type SystemFrequency struct {
	ClockFrequency       uint32   `protobuf:"varint,1,opt,name=ClockFrequency,proto3" json:"ClockFrequency,omitempty"`
	ArmClockFrequency    uint32   `protobuf:"varint,2,opt,name=ArmClockFrequency,proto3" json:"ArmClockFrequency,omitempty"`
	P4StageFrequency     uint32   `protobuf:"varint,3,opt,name=P4StageFrequency,proto3" json:"P4StageFrequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemFrequency) Reset()         { *m = SystemFrequency{} }
func (m *SystemFrequency) String() string { return proto.CompactTextString(m) }
func (*SystemFrequency) ProtoMessage()    {}
func (*SystemFrequency) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{3}
}
func (m *SystemFrequency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemFrequency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemFrequency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemFrequency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemFrequency.Merge(m, src)
}
func (m *SystemFrequency) XXX_Size() int {
	return m.Size()
}
func (m *SystemFrequency) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemFrequency.DiscardUnknown(m)
}

var xxx_messageInfo_SystemFrequency proto.InternalMessageInfo

func (m *SystemFrequency) GetClockFrequency() uint32 {
	if m != nil {
		return m.ClockFrequency
	}
	return 0
}

func (m *SystemFrequency) GetArmClockFrequency() uint32 {
	if m != nil {
		return m.ArmClockFrequency
	}
	return 0
}

func (m *SystemFrequency) GetP4StageFrequency() uint32 {
	if m != nil {
		return m.P4StageFrequency
	}
	return 0
}

type SystemGetResponse struct {
	ApiStatus            ApiStatus          `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	ResetReason          ResetReason        `protobuf:"varint,2,opt,name=ResetReason,proto3,enum=pds.ResetReason" json:"ResetReason,omitempty"`
	DieId                string             `protobuf:"bytes,3,opt,name=DieId,proto3" json:"DieId,omitempty"`
	SystemLed            LedStatus          `protobuf:"varint,4,opt,name=SystemLed,proto3,enum=pds.LedStatus" json:"SystemLed,omitempty"`
	Temperature          *SystemTemperature `protobuf:"bytes,5,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	Voltage              *SystemVoltage     `protobuf:"bytes,6,opt,name=Voltage,proto3" json:"Voltage,omitempty"`
	Power                *SystemPower       `protobuf:"bytes,7,opt,name=Power,proto3" json:"Power,omitempty"`
	Frequency            *SystemFrequency   `protobuf:"bytes,8,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SystemGetResponse) Reset()         { *m = SystemGetResponse{} }
func (m *SystemGetResponse) String() string { return proto.CompactTextString(m) }
func (*SystemGetResponse) ProtoMessage()    {}
func (*SystemGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{4}
}
func (m *SystemGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGetResponse.Merge(m, src)
}
func (m *SystemGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *SystemGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGetResponse proto.InternalMessageInfo

func (m *SystemGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemGetResponse) GetResetReason() ResetReason {
	if m != nil {
		return m.ResetReason
	}
	return ResetReason_RESET_REASON_UNKNOWN
}

func (m *SystemGetResponse) GetDieId() string {
	if m != nil {
		return m.DieId
	}
	return ""
}

func (m *SystemGetResponse) GetSystemLed() LedStatus {
	if m != nil {
		return m.SystemLed
	}
	return LedStatus_LED_STATUS_NONE
}

func (m *SystemGetResponse) GetTemperature() *SystemTemperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *SystemGetResponse) GetVoltage() *SystemVoltage {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *SystemGetResponse) GetPower() *SystemPower {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *SystemGetResponse) GetFrequency() *SystemFrequency {
	if m != nil {
		return m.Frequency
	}
	return nil
}

type ClockFrequencyRequest struct {
	*pds.TypeMeta        `protobuf:"bytes,1,opt,name=TypeMeta,proto3,embedded=TypeMeta" json:",inline"`
	*pds.ObjMeta         `protobuf:"bytes,2,opt,name=ObjMeta,proto3,embedded=ObjMeta" json:"meta,omitempty"`
	ClockFrequency       uint32   `protobuf:"varint,3,opt,name=ClockFrequency,proto3" json:"ClockFrequency,omitempty"`
	ArmClockFrequency    uint32   `protobuf:"varint,4,opt,name=ArmClockFrequency,proto3" json:"ArmClockFrequency,omitempty"`
	P4StageFrequency     uint32   `protobuf:"varint,5,opt,name=P4StageFrequency,proto3" json:"P4StageFrequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClockFrequencyRequest) Reset()         { *m = ClockFrequencyRequest{} }
func (m *ClockFrequencyRequest) String() string { return proto.CompactTextString(m) }
func (*ClockFrequencyRequest) ProtoMessage()    {}
func (*ClockFrequencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{5}
}
func (m *ClockFrequencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClockFrequencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClockFrequencyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClockFrequencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockFrequencyRequest.Merge(m, src)
}
func (m *ClockFrequencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClockFrequencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockFrequencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClockFrequencyRequest proto.InternalMessageInfo

func (m *ClockFrequencyRequest) GetClockFrequency() uint32 {
	if m != nil {
		return m.ClockFrequency
	}
	return 0
}

func (m *ClockFrequencyRequest) GetArmClockFrequency() uint32 {
	if m != nil {
		return m.ArmClockFrequency
	}
	return 0
}

func (m *ClockFrequencyRequest) GetP4StageFrequency() uint32 {
	if m != nil {
		return m.P4StageFrequency
	}
	return 0
}

type ClockFrequencyResponse struct {
	ApiStatus            ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ClockFrequencyResponse) Reset()         { *m = ClockFrequencyResponse{} }
func (m *ClockFrequencyResponse) String() string { return proto.CompactTextString(m) }
func (*ClockFrequencyResponse) ProtoMessage()    {}
func (*ClockFrequencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{6}
}
func (m *ClockFrequencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClockFrequencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClockFrequencyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClockFrequencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClockFrequencyResponse.Merge(m, src)
}
func (m *ClockFrequencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClockFrequencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClockFrequencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClockFrequencyResponse proto.InternalMessageInfo

func (m *ClockFrequencyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type QueueCredit struct {
	Queue                uint32   `protobuf:"varint,1,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Credit               uint32   `protobuf:"varint,2,opt,name=Credit,proto3" json:"Credit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueueCredit) Reset()         { *m = QueueCredit{} }
func (m *QueueCredit) String() string { return proto.CompactTextString(m) }
func (*QueueCredit) ProtoMessage()    {}
func (*QueueCredit) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{7}
}
func (m *QueueCredit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueCredit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueCredit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueCredit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueCredit.Merge(m, src)
}
func (m *QueueCredit) XXX_Size() int {
	return m.Size()
}
func (m *QueueCredit) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueCredit.DiscardUnknown(m)
}

var xxx_messageInfo_QueueCredit proto.InternalMessageInfo

func (m *QueueCredit) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *QueueCredit) GetCredit() uint32 {
	if m != nil {
		return m.Credit
	}
	return 0
}

type PortQueueCredit struct {
	Port                 uint32         `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	QueueCredit          []*QueueCredit `protobuf:"bytes,2,rep,name=QueueCredit,proto3" json:"QueueCredit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PortQueueCredit) Reset()         { *m = PortQueueCredit{} }
func (m *PortQueueCredit) String() string { return proto.CompactTextString(m) }
func (*PortQueueCredit) ProtoMessage()    {}
func (*PortQueueCredit) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{8}
}
func (m *PortQueueCredit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortQueueCredit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortQueueCredit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortQueueCredit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortQueueCredit.Merge(m, src)
}
func (m *PortQueueCredit) XXX_Size() int {
	return m.Size()
}
func (m *PortQueueCredit) XXX_DiscardUnknown() {
	xxx_messageInfo_PortQueueCredit.DiscardUnknown(m)
}

var xxx_messageInfo_PortQueueCredit proto.InternalMessageInfo

func (m *PortQueueCredit) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortQueueCredit) GetQueueCredit() []*QueueCredit {
	if m != nil {
		return m.QueueCredit
	}
	return nil
}

type QueueCreditsGetResponse struct {
	ApiStatus            ApiStatus          `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	PortQueueCredit      []*PortQueueCredit `protobuf:"bytes,2,rep,name=PortQueueCredit,proto3" json:"PortQueueCredit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueueCreditsGetResponse) Reset()         { *m = QueueCreditsGetResponse{} }
func (m *QueueCreditsGetResponse) String() string { return proto.CompactTextString(m) }
func (*QueueCreditsGetResponse) ProtoMessage()    {}
func (*QueueCreditsGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86a7260ebdc12f47, []int{9}
}
func (m *QueueCreditsGetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueCreditsGetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueCreditsGetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueCreditsGetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueCreditsGetResponse.Merge(m, src)
}
func (m *QueueCreditsGetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueueCreditsGetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueCreditsGetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueueCreditsGetResponse proto.InternalMessageInfo

func (m *QueueCreditsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QueueCreditsGetResponse) GetPortQueueCredit() []*PortQueueCredit {
	if m != nil {
		return m.PortQueueCredit
	}
	return nil
}

func init() {
	proto.RegisterEnum("pds.LedStatus", LedStatus_name, LedStatus_value)
	proto.RegisterEnum("pds.ResetReason", ResetReason_name, ResetReason_value)
	proto.RegisterType((*SystemTemperature)(nil), "pds.SystemTemperature")
	proto.RegisterType((*SystemVoltage)(nil), "pds.SystemVoltage")
	proto.RegisterType((*SystemPower)(nil), "pds.SystemPower")
	proto.RegisterType((*SystemFrequency)(nil), "pds.SystemFrequency")
	proto.RegisterType((*SystemGetResponse)(nil), "pds.SystemGetResponse")
	proto.RegisterType((*ClockFrequencyRequest)(nil), "pds.ClockFrequencyRequest")
	proto.RegisterType((*ClockFrequencyResponse)(nil), "pds.ClockFrequencyResponse")
	proto.RegisterType((*QueueCredit)(nil), "pds.QueueCredit")
	proto.RegisterType((*PortQueueCredit)(nil), "pds.PortQueueCredit")
	proto.RegisterType((*QueueCreditsGetResponse)(nil), "pds.QueueCreditsGetResponse")
}

func init() { proto.RegisterFile("system.proto", fileDescriptor_86a7260ebdc12f47) }

var fileDescriptor_86a7260ebdc12f47 = []byte{
	// 933 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xe2, 0x56,
	0x14, 0x8e, 0x21, 0x84, 0x70, 0x48, 0xc0, 0x73, 0x86, 0x21, 0x88, 0x4c, 0x93, 0xd4, 0x8b, 0x51,
	0x14, 0x21, 0x2a, 0x31, 0x6d, 0x55, 0x69, 0xa4, 0x8e, 0x0c, 0x38, 0x3f, 0x2a, 0x01, 0x72, 0xed,
	0x4c, 0x34, 0x2b, 0xea, 0xc0, 0x55, 0x44, 0x0b, 0xd8, 0x63, 0x5f, 0x66, 0xc4, 0x23, 0x74, 0xd5,
	0xc5, 0x2c, 0xfa, 0x40, 0xdd, 0x74, 0x39, 0x4f, 0x30, 0xaa, 0xb2, 0xec, 0x4b, 0xb4, 0xf2, 0xbd,
	0x36, 0x5c, 0x9b, 0x54, 0xfd, 0x99, 0x4d, 0x92, 0xf3, 0x9d, 0xef, 0x3b, 0xf7, 0xf8, 0x9e, 0xef,
	0x5c, 0x05, 0x76, 0xfc, 0x85, 0xcf, 0xe8, 0xb4, 0xee, 0x7a, 0x0e, 0x73, 0x30, 0xed, 0x8e, 0xfc,
	0x2a, 0xdc, 0x39, 0x77, 0x8e, 0x00, 0xaa, 0xc5, 0x29, 0x65, 0xf6, 0x17, 0xc1, 0x8f, 0x10, 0xc8,
	0xb3, 0x85, 0x4b, 0x7d, 0x11, 0x68, 0x3f, 0x2b, 0xf0, 0xc8, 0xe4, 0x7a, 0x8b, 0x4e, 0x5d, 0xea,
	0xd9, 0x6c, 0xee, 0x51, 0x7c, 0x06, 0x85, 0xf6, 0x98, 0x4a, 0x48, 0x45, 0x39, 0x52, 0x8e, 0x77,
	0x49, 0x02, 0xc5, 0x13, 0x50, 0x3b, 0xce, 0xd0, 0x9e, 0xc8, 0xcc, 0x14, 0x67, 0xae, 0xe1, 0x41,
	0xcd, 0xf3, 0x5b, 0xf9, 0x94, 0x4a, 0x5a, 0xd4, 0x8c, 0xa3, 0xda, 0x15, 0xec, 0x8a, 0x86, 0x5e,
	0x39, 0x13, 0x66, 0xdf, 0x51, 0x3c, 0x82, 0x7c, 0xcb, 0xf1, 0x68, 0x18, 0x86, 0x9d, 0xc8, 0x10,
	0x1e, 0x00, 0xe8, 0x5e, 0xc4, 0x0f, 0x1b, 0x90, 0x10, 0xed, 0x0d, 0xe4, 0x45, 0xc9, 0xbe, 0xf3,
	0x8e, 0x7a, 0x78, 0x0c, 0x45, 0xcb, 0x61, 0xf6, 0x84, 0x47, 0x6d, 0xcf, 0x7e, 0x37, 0x0b, 0x8b,
	0x26, 0x61, 0x7c, 0x0a, 0xb9, 0xe0, 0x1c, 0x8e, 0x84, 0x75, 0x57, 0x00, 0x56, 0x61, 0x5b, 0xf7,
	0x44, 0xcd, 0xf0, 0x5b, 0x96, 0xb1, 0xf6, 0x5e, 0x81, 0xa2, 0x38, 0xf3, 0xd4, 0xa3, 0x6f, 0xe6,
	0x74, 0x36, 0x5c, 0x04, 0x37, 0xd0, 0x9a, 0x38, 0xc3, 0x1f, 0x97, 0x48, 0x74, 0xab, 0x71, 0x14,
	0x6b, 0xf0, 0x48, 0xf7, 0xa6, 0x09, 0xaa, 0x38, 0x7d, 0x3d, 0x11, 0xcc, 0xa0, 0xff, 0xa5, 0x19,
	0x7c, 0xe7, 0x8a, 0x2c, 0xba, 0x59, 0xc3, 0xb5, 0x3f, 0x53, 0xd1, 0xb4, 0xcf, 0x28, 0x23, 0xd4,
	0x77, 0x9d, 0x99, 0x4f, 0xb1, 0x0e, 0x39, 0xdd, 0x1d, 0x9b, 0xcc, 0x66, 0x73, 0x9f, 0xb7, 0x54,
	0x68, 0xa8, 0x75, 0x61, 0x92, 0x25, 0x4e, 0x56, 0x14, 0x6c, 0x40, 0x9e, 0x50, 0x3f, 0x28, 0x60,
	0xfb, 0xce, 0x8c, 0x77, 0x16, 0x28, 0xdc, 0x91, 0x5f, 0x97, 0x70, 0x22, 0x93, 0xb0, 0x04, 0x99,
	0xf6, 0x98, 0x5e, 0x8c, 0x78, 0x6b, 0x39, 0x22, 0x02, 0xac, 0x41, 0x4e, 0xb4, 0xd3, 0xa1, 0xa3,
	0xca, 0x26, 0xaf, 0x53, 0xe0, 0x75, 0x3a, 0x74, 0x14, 0x9d, 0xbb, 0x24, 0xe0, 0x37, 0x90, 0x97,
	0xed, 0x93, 0x39, 0x52, 0x8e, 0xf3, 0x8d, 0x32, 0xe7, 0xaf, 0x59, 0x98, 0xc8, 0x54, 0xac, 0x41,
	0x36, 0x72, 0xc7, 0x16, 0x57, 0xa1, 0xa4, 0x0a, 0x33, 0x24, 0xa2, 0xe0, 0x33, 0xc8, 0x88, 0xa1,
	0x66, 0x39, 0x57, 0x95, 0xb8, 0x1c, 0x27, 0x22, 0x8d, 0x0d, 0xc8, 0xad, 0xae, 0x7c, 0x9b, 0x73,
	0x4b, 0x12, 0x77, 0x99, 0x23, 0x2b, 0x9a, 0xf6, 0x4b, 0x0a, 0x9e, 0xc4, 0x07, 0x48, 0x82, 0xdf,
	0x3e, 0xc3, 0x17, 0xb0, 0x6d, 0x2d, 0x5c, 0x7a, 0x49, 0x99, 0xcd, 0x87, 0x90, 0x6f, 0x14, 0xea,
	0x7c, 0x6b, 0x23, 0xb4, 0x59, 0xfc, 0xf0, 0xf1, 0x50, 0xf9, 0xe3, 0xe3, 0x61, 0xb6, 0x36, 0x9e,
	0x4d, 0xc6, 0x33, 0x4a, 0x96, 0x02, 0x7c, 0x09, 0xd9, 0xde, 0xed, 0x0f, 0x5c, 0x9b, 0xe2, 0xda,
	0x5d, 0xa1, 0x0d, 0xc1, 0x66, 0x39, 0x94, 0x16, 0x02, 0xb4, 0xe6, 0x4c, 0xc7, 0x8c, 0x4e, 0x5d,
	0xb6, 0x20, 0x91, 0xea, 0x01, 0x6f, 0xa6, 0xff, 0xbd, 0x37, 0x37, 0xff, 0x8b, 0x37, 0x33, 0x7f,
	0xe3, 0xcd, 0x73, 0x28, 0x27, 0x2f, 0xe6, 0xff, 0xf9, 0x53, 0x7b, 0x01, 0xf9, 0xab, 0x39, 0x9d,
	0xd3, 0x96, 0x47, 0x47, 0x63, 0x16, 0x58, 0x8f, 0x87, 0xe1, 0xb6, 0x89, 0x00, 0xcb, 0xb0, 0x25,
	0xf2, 0xe1, 0x66, 0x85, 0x91, 0xf6, 0x1a, 0x8a, 0x7d, 0xc7, 0x63, 0x72, 0x01, 0x84, 0xcd, 0x00,
	0x0a, 0xf5, 0xfc, 0xef, 0x60, 0x07, 0x24, 0x4a, 0x25, 0x75, 0x94, 0x5e, 0x3a, 0x45, 0xc2, 0x89,
	0x4c, 0xd2, 0x7e, 0x52, 0x60, 0x4f, 0x8a, 0xfd, 0x4f, 0xd9, 0xc1, 0x6f, 0xd7, 0xda, 0x0c, 0x7b,
	0x10, 0x0e, 0x4c, 0xe4, 0x48, 0x92, 0x7c, 0xf2, 0x3d, 0xe4, 0x96, 0x3b, 0x86, 0x8f, 0xa1, 0xd8,
	0x31, 0xda, 0x03, 0xd3, 0xd2, 0xad, 0x6b, 0x73, 0xd0, 0xed, 0x75, 0x0d, 0x75, 0x03, 0x4b, 0xa0,
	0x4a, 0xe0, 0x19, 0x31, 0x8c, 0xae, 0xaa, 0x24, 0x50, 0xfd, 0xb2, 0x69, 0x10, 0x35, 0x85, 0x08,
	0x05, 0x09, 0xed, 0x9d, 0x9e, 0xaa, 0xe9, 0x93, 0xf7, 0xa9, 0xd8, 0x33, 0x81, 0x15, 0x28, 0x11,
	0xc3, 0x34, 0xac, 0x01, 0x31, 0x74, 0xb3, 0xd7, 0x1d, 0x5c, 0x77, 0xbf, 0xeb, 0xf6, 0x6e, 0xba,
	0xea, 0x06, 0x1e, 0xc2, 0x7e, 0x2c, 0x63, 0xde, 0x0c, 0xfa, 0xbd, 0x1b, 0x83, 0x0c, 0x5a, 0xaf,
	0x5b, 0x1d, 0x43, 0x55, 0xb0, 0x0a, 0xe5, 0x18, 0xe1, 0x15, 0x69, 0x0f, 0x4e, 0xf5, 0xeb, 0x8e,
	0xa5, 0xa6, 0x70, 0x1f, 0xf6, 0x62, 0x39, 0xeb, 0xdc, 0x20, 0x97, 0x03, 0x8b, 0x5c, 0xf4, 0xd5,
	0x34, 0x7e, 0x0e, 0x9f, 0xc5, 0x92, 0xe7, 0x3d, 0xd3, 0x8a, 0xd5, 0xde, 0x5c, 0x3b, 0x5c, 0x6f,
	0xc5, 0x08, 0x19, 0xdc, 0x83, 0xc7, 0x31, 0x02, 0x31, 0x9a, 0xbd, 0x9e, 0xa5, 0x6e, 0x61, 0x19,
	0x30, 0x96, 0xe8, 0xeb, 0xdd, 0x8b, 0x96, 0x9a, 0x5d, 0xeb, 0xa8, 0xdf, 0xba, 0x30, 0x06, 0x1c,
	0x51, 0xb7, 0x1b, 0xbf, 0xa6, 0xa2, 0x27, 0xcf, 0x7c, 0x3b, 0xc4, 0xe7, 0x51, 0x70, 0x46, 0x19,
	0xee, 0x84, 0xf3, 0x36, 0x82, 0xcd, 0xac, 0xca, 0xef, 0x9a, 0x64, 0x14, 0x6d, 0x03, 0xaf, 0xa0,
	0x14, 0x5f, 0x94, 0x6b, 0x77, 0x64, 0x33, 0x8a, 0x55, 0xae, 0x78, 0xf0, 0x71, 0xa9, 0xee, 0x3f,
	0x98, 0x5b, 0x96, 0x7c, 0x09, 0xc5, 0x84, 0x31, 0x13, 0xdd, 0x3c, 0x4d, 0x3a, 0xdb, 0x8f, 0xf7,
	0xf4, 0x15, 0x3c, 0xe9, 0x7b, 0xce, 0x90, 0xfa, 0x3e, 0xa1, 0x43, 0xe7, 0x2d, 0xf5, 0x16, 0xc6,
	0xcc, 0xbe, 0x9d, 0xd0, 0x44, 0x99, 0x58, 0xa4, 0x6d, 0xe0, 0xd7, 0x50, 0x4e, 0xc8, 0xda, 0x63,
	0xff, 0x9f, 0x75, 0xcd, 0x9d, 0xdf, 0xee, 0x0f, 0x94, 0x0f, 0xf7, 0x07, 0xca, 0xef, 0xf7, 0x07,
	0xca, 0xed, 0x16, 0xff, 0x57, 0xe6, 0xf9, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x58, 0xca, 0x2e,
	0x04, 0x09, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SystemSvcClient is the client API for SystemSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemSvcClient interface {
	SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemGetResponse, error)
	ClockFrequencyUpdate(ctx context.Context, in *ClockFrequencyRequest, opts ...grpc.CallOption) (*ClockFrequencyResponse, error)
	QueueCreditsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueueCreditsGetResponse, error)
	ProcessRecoveryEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ProcessRecoveryDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type systemSvcClient struct {
	cc *grpc.ClientConn
}

func NewSystemSvcClient(cc *grpc.ClientConn) SystemSvcClient {
	return &systemSvcClient{cc}
}

func (c *systemSvcClient) SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemGetResponse, error) {
	out := new(SystemGetResponse)
	err := c.cc.Invoke(ctx, "/pds.SystemSvc/SystemGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ClockFrequencyUpdate(ctx context.Context, in *ClockFrequencyRequest, opts ...grpc.CallOption) (*ClockFrequencyResponse, error) {
	out := new(ClockFrequencyResponse)
	err := c.cc.Invoke(ctx, "/pds.SystemSvc/ClockFrequencyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) QueueCreditsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueueCreditsGetResponse, error) {
	out := new(QueueCreditsGetResponse)
	err := c.cc.Invoke(ctx, "/pds.SystemSvc/QueueCreditsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ProcessRecoveryEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.SystemSvc/ProcessRecoveryEnable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemSvcClient) ProcessRecoveryDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pds.SystemSvc/ProcessRecoveryDisable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemSvcServer is the server API for SystemSvc service.
type SystemSvcServer interface {
	SystemGet(context.Context, *Empty) (*SystemGetResponse, error)
	ClockFrequencyUpdate(context.Context, *ClockFrequencyRequest) (*ClockFrequencyResponse, error)
	QueueCreditsGet(context.Context, *Empty) (*QueueCreditsGetResponse, error)
	ProcessRecoveryEnable(context.Context, *Empty) (*Empty, error)
	ProcessRecoveryDisable(context.Context, *Empty) (*Empty, error)
}

// UnimplementedSystemSvcServer can be embedded to have forward compatible implementations.
type UnimplementedSystemSvcServer struct {
}

func (*UnimplementedSystemSvcServer) SystemGet(ctx context.Context, req *Empty) (*SystemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemGet not implemented")
}
func (*UnimplementedSystemSvcServer) ClockFrequencyUpdate(ctx context.Context, req *ClockFrequencyRequest) (*ClockFrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClockFrequencyUpdate not implemented")
}
func (*UnimplementedSystemSvcServer) QueueCreditsGet(ctx context.Context, req *Empty) (*QueueCreditsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueCreditsGet not implemented")
}
func (*UnimplementedSystemSvcServer) ProcessRecoveryEnable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRecoveryEnable not implemented")
}
func (*UnimplementedSystemSvcServer) ProcessRecoveryDisable(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRecoveryDisable not implemented")
}

func RegisterSystemSvcServer(s *grpc.Server, srv SystemSvcServer) {
	s.RegisterService(&_SystemSvc_serviceDesc, srv)
}

func _SystemSvc_SystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).SystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.SystemSvc/SystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).SystemGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ClockFrequencyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ClockFrequencyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.SystemSvc/ClockFrequencyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ClockFrequencyUpdate(ctx, req.(*ClockFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_QueueCreditsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).QueueCreditsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.SystemSvc/QueueCreditsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).QueueCreditsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ProcessRecoveryEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ProcessRecoveryEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.SystemSvc/ProcessRecoveryEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ProcessRecoveryEnable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemSvc_ProcessRecoveryDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemSvcServer).ProcessRecoveryDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.SystemSvc/ProcessRecoveryDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemSvcServer).ProcessRecoveryDisable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.SystemSvc",
	HandlerType: (*SystemSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemGet",
			Handler:    _SystemSvc_SystemGet_Handler,
		},
		{
			MethodName: "ClockFrequencyUpdate",
			Handler:    _SystemSvc_ClockFrequencyUpdate_Handler,
		},
		{
			MethodName: "QueueCreditsGet",
			Handler:    _SystemSvc_QueueCreditsGet_Handler,
		},
		{
			MethodName: "ProcessRecoveryEnable",
			Handler:    _SystemSvc_ProcessRecoveryEnable_Handler,
		},
		{
			MethodName: "ProcessRecoveryDisable",
			Handler:    _SystemSvc_ProcessRecoveryDisable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func (m *SystemTemperature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemTemperature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemTemperature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HbmTemperature != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.HbmTemperature))
		i--
		dAtA[i] = 0x18
	}
	if m.LocalTemperature != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.LocalTemperature))
		i--
		dAtA[i] = 0x10
	}
	if m.DieTemperature != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.DieTemperature))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemVoltage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemVoltage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemVoltage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArmVoltage != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ArmVoltage))
		i--
		dAtA[i] = 0x10
	}
	if m.CoreVoltage != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.CoreVoltage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ArmPower != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ArmPower))
		i--
		dAtA[i] = 0x18
	}
	if m.CorePower != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.CorePower))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalPowerDrawn != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.TotalPowerDrawn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemFrequency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemFrequency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemFrequency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.P4StageFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.P4StageFrequency))
		i--
		dAtA[i] = 0x18
	}
	if m.ArmClockFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ArmClockFrequency))
		i--
		dAtA[i] = 0x10
	}
	if m.ClockFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ClockFrequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frequency != nil {
		{
			size, err := m.Frequency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Power != nil {
		{
			size, err := m.Power.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Voltage != nil {
		{
			size, err := m.Voltage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Temperature != nil {
		{
			size, err := m.Temperature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SystemLed != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.SystemLed))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DieId) > 0 {
		i -= len(m.DieId)
		copy(dAtA[i:], m.DieId)
		i = encodeVarintSystem(dAtA, i, uint64(len(m.DieId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResetReason != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ResetReason))
		i--
		dAtA[i] = 0x10
	}
	if m.ApiStatus != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClockFrequencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockFrequencyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClockFrequencyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.P4StageFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.P4StageFrequency))
		i--
		dAtA[i] = 0x28
	}
	if m.ArmClockFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ArmClockFrequency))
		i--
		dAtA[i] = 0x20
	}
	if m.ClockFrequency != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ClockFrequency))
		i--
		dAtA[i] = 0x18
	}
	if m.ObjMeta != nil {
		{
			size, err := m.ObjMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TypeMeta != nil {
		{
			size, err := m.TypeMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSystem(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClockFrequencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockFrequencyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClockFrequencyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ApiStatus != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueueCredit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueCredit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueCredit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Credit != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Credit))
		i--
		dAtA[i] = 0x10
	}
	if m.Queue != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Queue))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PortQueueCredit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortQueueCredit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortQueueCredit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QueueCredit) > 0 {
		for iNdEx := len(m.QueueCredit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueueCredit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Port != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueueCreditsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueCreditsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueCreditsGetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PortQueueCredit) > 0 {
		for iNdEx := len(m.PortQueueCredit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PortQueueCredit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSystem(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ApiStatus != 0 {
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSystem(dAtA []byte, offset int, v uint64) int {
	offset -= sovSystem(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemTemperature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DieTemperature != 0 {
		n += 1 + sovSystem(uint64(m.DieTemperature))
	}
	if m.LocalTemperature != 0 {
		n += 1 + sovSystem(uint64(m.LocalTemperature))
	}
	if m.HbmTemperature != 0 {
		n += 1 + sovSystem(uint64(m.HbmTemperature))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemVoltage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoreVoltage != 0 {
		n += 1 + sovSystem(uint64(m.CoreVoltage))
	}
	if m.ArmVoltage != 0 {
		n += 1 + sovSystem(uint64(m.ArmVoltage))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalPowerDrawn != 0 {
		n += 1 + sovSystem(uint64(m.TotalPowerDrawn))
	}
	if m.CorePower != 0 {
		n += 1 + sovSystem(uint64(m.CorePower))
	}
	if m.ArmPower != 0 {
		n += 1 + sovSystem(uint64(m.ArmPower))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemFrequency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClockFrequency != 0 {
		n += 1 + sovSystem(uint64(m.ClockFrequency))
	}
	if m.ArmClockFrequency != 0 {
		n += 1 + sovSystem(uint64(m.ArmClockFrequency))
	}
	if m.P4StageFrequency != 0 {
		n += 1 + sovSystem(uint64(m.P4StageFrequency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.ResetReason != 0 {
		n += 1 + sovSystem(uint64(m.ResetReason))
	}
	l = len(m.DieId)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.SystemLed != 0 {
		n += 1 + sovSystem(uint64(m.SystemLed))
	}
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Voltage != nil {
		l = m.Voltage.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Frequency != nil {
		l = m.Frequency.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClockFrequencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.ClockFrequency != 0 {
		n += 1 + sovSystem(uint64(m.ClockFrequency))
	}
	if m.ArmClockFrequency != 0 {
		n += 1 + sovSystem(uint64(m.ArmClockFrequency))
	}
	if m.P4StageFrequency != 0 {
		n += 1 + sovSystem(uint64(m.P4StageFrequency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClockFrequencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueCredit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queue != 0 {
		n += 1 + sovSystem(uint64(m.Queue))
	}
	if m.Credit != 0 {
		n += 1 + sovSystem(uint64(m.Credit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PortQueueCredit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovSystem(uint64(m.Port))
	}
	if len(m.QueueCredit) > 0 {
		for _, e := range m.QueueCredit {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueCreditsGetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if len(m.PortQueueCredit) > 0 {
		for _, e := range m.PortQueueCredit {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSystem(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSystem(x uint64) (n int) {
	return sovSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SystemTemperature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemTemperature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemTemperature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DieTemperature", wireType)
			}
			m.DieTemperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DieTemperature |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTemperature", wireType)
			}
			m.LocalTemperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocalTemperature |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HbmTemperature", wireType)
			}
			m.HbmTemperature = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HbmTemperature |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemVoltage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemVoltage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemVoltage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreVoltage", wireType)
			}
			m.CoreVoltage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoreVoltage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmVoltage", wireType)
			}
			m.ArmVoltage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmVoltage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPowerDrawn", wireType)
			}
			m.TotalPowerDrawn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPowerDrawn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorePower", wireType)
			}
			m.CorePower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CorePower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmPower", wireType)
			}
			m.ArmPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmPower |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemFrequency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemFrequency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemFrequency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockFrequency", wireType)
			}
			m.ClockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmClockFrequency", wireType)
			}
			m.ArmClockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmClockFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P4StageFrequency", wireType)
			}
			m.P4StageFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P4StageFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetReason", wireType)
			}
			m.ResetReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResetReason |= ResetReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DieId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DieId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemLed", wireType)
			}
			m.SystemLed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemLed |= LedStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &SystemTemperature{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voltage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voltage == nil {
				m.Voltage = &SystemVoltage{}
			}
			if err := m.Voltage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &SystemPower{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frequency == nil {
				m.Frequency = &SystemFrequency{}
			}
			if err := m.Frequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockFrequencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockFrequencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockFrequencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &pds.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &pds.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockFrequency", wireType)
			}
			m.ClockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmClockFrequency", wireType)
			}
			m.ArmClockFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmClockFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P4StageFrequency", wireType)
			}
			m.P4StageFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P4StageFrequency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockFrequencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockFrequencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockFrequencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueCredit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueCredit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueCredit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			m.Queue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Queue |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			m.Credit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortQueueCredit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortQueueCredit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortQueueCredit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueCredit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueCredit = append(m.QueueCredit, &QueueCredit{})
			if err := m.QueueCredit[len(m.QueueCredit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueCreditsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueCreditsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueCreditsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= ApiStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortQueueCredit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSystem
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortQueueCredit = append(m.PortQueueCredit, &PortQueueCredit{})
			if err := m.PortQueueCredit[len(m.PortQueueCredit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSystem
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSystem
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystem   = fmt.Errorf("proto: integer overflow")
)
