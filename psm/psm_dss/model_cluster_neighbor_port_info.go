/*
 * Cluster API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_dss

import (
	"encoding/json"
)

// ClusterNeighborPortInfo NeighborPortInfo is the Information of the remote port mac and local port of a link learnt through LLDP.
type ClusterNeighborPortInfo struct {
	// mac address of the local port.
	MacAddress *string `json:"mac-address,omitempty"`
	// local port identifier.
	Name *string `json:"name,omitempty"`
	// mac address of the remote port.
	RemoteMac *string `json:"remote-mac,omitempty"`
}

// NewClusterNeighborPortInfo instantiates a new ClusterNeighborPortInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNeighborPortInfo() *ClusterNeighborPortInfo {
	this := ClusterNeighborPortInfo{}
	return &this
}

// NewClusterNeighborPortInfoWithDefaults instantiates a new ClusterNeighborPortInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNeighborPortInfoWithDefaults() *ClusterNeighborPortInfo {
	this := ClusterNeighborPortInfo{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *ClusterNeighborPortInfo) GetMacAddress() string {
	if o == nil || o.MacAddress == nil {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNeighborPortInfo) GetMacAddressOk() (*string, bool) {
	if o == nil || o.MacAddress == nil {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *ClusterNeighborPortInfo) HasMacAddress() bool {
	if o != nil && o.MacAddress != nil {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *ClusterNeighborPortInfo) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClusterNeighborPortInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNeighborPortInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClusterNeighborPortInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClusterNeighborPortInfo) SetName(v string) {
	o.Name = &v
}

// GetRemoteMac returns the RemoteMac field value if set, zero value otherwise.
func (o *ClusterNeighborPortInfo) GetRemoteMac() string {
	if o == nil || o.RemoteMac == nil {
		var ret string
		return ret
	}
	return *o.RemoteMac
}

// GetRemoteMacOk returns a tuple with the RemoteMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterNeighborPortInfo) GetRemoteMacOk() (*string, bool) {
	if o == nil || o.RemoteMac == nil {
		return nil, false
	}
	return o.RemoteMac, true
}

// HasRemoteMac returns a boolean if a field has been set.
func (o *ClusterNeighborPortInfo) HasRemoteMac() bool {
	if o != nil && o.RemoteMac != nil {
		return true
	}

	return false
}

// SetRemoteMac gets a reference to the given string and assigns it to the RemoteMac field.
func (o *ClusterNeighborPortInfo) SetRemoteMac(v string) {
	o.RemoteMac = &v
}

func (o ClusterNeighborPortInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MacAddress != nil {
		toSerialize["mac-address"] = o.MacAddress
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RemoteMac != nil {
		toSerialize["remote-mac"] = o.RemoteMac
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNeighborPortInfo struct {
	value *ClusterNeighborPortInfo
	isSet bool
}

func (v NullableClusterNeighborPortInfo) Get() *ClusterNeighborPortInfo {
	return v.value
}

func (v *NullableClusterNeighborPortInfo) Set(val *ClusterNeighborPortInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNeighborPortInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNeighborPortInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNeighborPortInfo(val *ClusterNeighborPortInfo) *NullableClusterNeighborPortInfo {
	return &NullableClusterNeighborPortInfo{value: val, isSet: true}
}

func (v NullableClusterNeighborPortInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNeighborPortInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


