/*
 * Workload API reference
 *
 * Service name  
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package psm_dss

import (
	"encoding/json"
)

// WorkloadWorkloadGroupSpec Spec part of WorkloadGroup object.
type WorkloadWorkloadGroupSpec struct {
	// IP Block selector for entities outside of cluster if used alone When used in conjuction with WorkloadSelector, The Workload selected based on LabelSelector or if IPAddress is part of the IPBlock entries Each IPBlock are ORed.
	IpBlock *[]WorkloadIPBlock `json:"ip-block,omitempty"`
	// Workload selector is a list of label selectors. Each WorkloadSelector are ORed.
	WorkloadSelector *[]LabelsSelector `json:"workload-selector,omitempty"`
}

// NewWorkloadWorkloadGroupSpec instantiates a new WorkloadWorkloadGroupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadWorkloadGroupSpec() *WorkloadWorkloadGroupSpec {
	this := WorkloadWorkloadGroupSpec{}
	return &this
}

// NewWorkloadWorkloadGroupSpecWithDefaults instantiates a new WorkloadWorkloadGroupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWorkloadGroupSpecWithDefaults() *WorkloadWorkloadGroupSpec {
	this := WorkloadWorkloadGroupSpec{}
	return &this
}

// GetIpBlock returns the IpBlock field value if set, zero value otherwise.
func (o *WorkloadWorkloadGroupSpec) GetIpBlock() []WorkloadIPBlock {
	if o == nil || o.IpBlock == nil {
		var ret []WorkloadIPBlock
		return ret
	}
	return *o.IpBlock
}

// GetIpBlockOk returns a tuple with the IpBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadGroupSpec) GetIpBlockOk() (*[]WorkloadIPBlock, bool) {
	if o == nil || o.IpBlock == nil {
		return nil, false
	}
	return o.IpBlock, true
}

// HasIpBlock returns a boolean if a field has been set.
func (o *WorkloadWorkloadGroupSpec) HasIpBlock() bool {
	if o != nil && o.IpBlock != nil {
		return true
	}

	return false
}

// SetIpBlock gets a reference to the given []WorkloadIPBlock and assigns it to the IpBlock field.
func (o *WorkloadWorkloadGroupSpec) SetIpBlock(v []WorkloadIPBlock) {
	o.IpBlock = &v
}

// GetWorkloadSelector returns the WorkloadSelector field value if set, zero value otherwise.
func (o *WorkloadWorkloadGroupSpec) GetWorkloadSelector() []LabelsSelector {
	if o == nil || o.WorkloadSelector == nil {
		var ret []LabelsSelector
		return ret
	}
	return *o.WorkloadSelector
}

// GetWorkloadSelectorOk returns a tuple with the WorkloadSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadWorkloadGroupSpec) GetWorkloadSelectorOk() (*[]LabelsSelector, bool) {
	if o == nil || o.WorkloadSelector == nil {
		return nil, false
	}
	return o.WorkloadSelector, true
}

// HasWorkloadSelector returns a boolean if a field has been set.
func (o *WorkloadWorkloadGroupSpec) HasWorkloadSelector() bool {
	if o != nil && o.WorkloadSelector != nil {
		return true
	}

	return false
}

// SetWorkloadSelector gets a reference to the given []LabelsSelector and assigns it to the WorkloadSelector field.
func (o *WorkloadWorkloadGroupSpec) SetWorkloadSelector(v []LabelsSelector) {
	o.WorkloadSelector = &v
}

func (o WorkloadWorkloadGroupSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpBlock != nil {
		toSerialize["ip-block"] = o.IpBlock
	}
	if o.WorkloadSelector != nil {
		toSerialize["workload-selector"] = o.WorkloadSelector
	}
	return json.Marshal(toSerialize)
}

type NullableWorkloadWorkloadGroupSpec struct {
	value *WorkloadWorkloadGroupSpec
	isSet bool
}

func (v NullableWorkloadWorkloadGroupSpec) Get() *WorkloadWorkloadGroupSpec {
	return v.value
}

func (v *NullableWorkloadWorkloadGroupSpec) Set(val *WorkloadWorkloadGroupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadWorkloadGroupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadWorkloadGroupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadWorkloadGroupSpec(val *WorkloadWorkloadGroupSpec) *NullableWorkloadWorkloadGroupSpec {
	return &NullableWorkloadWorkloadGroupSpec{value: val, isSet: true}
}

func (v NullableWorkloadWorkloadGroupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadWorkloadGroupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


